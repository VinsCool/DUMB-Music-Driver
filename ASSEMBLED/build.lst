mads 2.1.3
Source: DUMB Music Player.asm
     1 				;* --- Dumb Unless Made Better ---
     2 				;*
     3 				;* DUMB Music Player (Prototype, using a stripped down version of Simple RMT Player for now) 
     4 				;* By VinsCool 
     5 				;*
     6 				;* To build: 'mads DUMB Music Player.asm -l:ASSEMBLED/build.lst -o:ASSEMBLED/build.xex' 
     7 				;--------------------------------------------------------------------------------------------------; 
     8
     9 				;* Build flags, they are not the requirement, and could be changed if necessary 
    10
    11 					OPT R- F-
    12 					icl "atari.def"			; Missing or conflicting labels cause build errors, be extra careful! 
Source: atari.def
     1 				;* some memory addresses and definitions
     2
     3 				;//---------------------------------------------------------------------------------------------
     4
     5 = 000A			.def DOSVEC			= $000A
     6 = 0012			.def RTCLOK			= $0012	; Real Time Clock
     7
     8 = 0200			.def VDSLST			= $0200	; Display List Interrupt Vector
     9
    10 = 0222			.def VVBLKI			= $0222	; Vertical Blank Immediate (VBI) Register
    11 = 022F			.def SDMCTL			= $022F	; Shadow Direct Memory Access Control address
    12 = 0230			.def SDLSTL			= $0230
    13 = 02C4			.def COLOR0			= $02C4
    14 = 02C5			.def COLOR1			= $02C5
    15 = 02C6			.def COLOR2			= $02C6
    16 = 02C7			.def COLOR3			= $02C7
    17 = 02C8			.def COLOR4			= $02C8
    18 = 02F2			.def CH1			= $02F2
    19 = 02FC			.def CH				= $02FC
    20
    21 = D000			.def HPOSP0          		= $D000	; HORIZONTAL POSITION P0
    22 = D001			.def HPOSP1          		= $D001	; HORIZONTAL POSITION P1
    23 = D002			.def HPOSP2          		= $D002	; HORIZONTAL POSITION P2
    24 = D003			.def HPOSP3          		= $D003	; HORIZONTAL POSITION P3
    25 = D004			.def HPOSM0          		= $D004	; HORIZONTAL POSITION M0
    26 = D005			.def HPOSM1          		= $D005	; HORIZONTAL POSITION M1
    27 = D006			.def HPOSM2          		= $D006	; HORIZONTAL POSITION M2
    28 = D007			.def HPOSM3          		= $D007	; HORIZONTAL POSITION M3
    29 = D008			.def SIZEP0          		= $D008	; SIZE P0
    30 = D009			.def SIZEP1          		= $D009	; SIZE P0
    31 = D00A			.def SIZEP2          		= $D00A	; SIZE P0
    32 = D00B			.def SIZEP3          		= $D00B	; SIZE P0
    33 = D00C			.def SIZEM           		= $D00C	; SIZE M
    34 = D00D			.def GRAFP0          		= $D00D
    35 = D00E			.def GRAFP1          		= $D00E
    36 = D00F			.def GRAFP2          		= $D00F
    37 = D010			.def GRAFP3          		= $D010
    38 = D010			.def TRIG0			= $D010
    39 = D011			.def GRAFM           		= $D011
    40 = D012			.def COLPM0          		= $D012	; COLOR P0/M0
    41 = D013			.def COLPM1          		= $D013	; COLOR P1/M1
    42 = D014			.def COLPM2          		= $D014	; COLOR P2/M2
    43 = D014			.def NTSCPAL         		= $D014
    44 = D015			.def COLPM3          		= $D015	; COLOR P3/M3
    45 = D016			.def COLPF0         		= $D016
    46 = D017			.def COLPF1          		= $D017
    47 = D018			.def COLPF2          		= $D018
    48 = D019			.def COLPF3          		= $D019
    49 = D01A			.def COLBK           		= $D01A
    50 = D01B			.def GPRIOR          		= $D01B
    51 = D01D			.def GRACTL          		= $D01D
    52
    53 = D200			.def POKEY 			= $D200
    54 = D209			.def KBCODE			= $D209
    55 = D20A			.def RANDOM			= $D20A
    56 = D20B			.def POTGO 			= $D20B ; reset paddles for new input to read
    57 = D20E			.def IRQEN          		= $D20E
    58 = D20E			.def IRQST          		= $D20E
    59 = D20F			.def SKCTL			= $D20F
    60 = D20F			.def SKSTAT			= $D20F
    61
    62 = D300			.def PORTA			= $D300
    63 = D301			.def PORTB           		= $D301
    64
    65 = D400			.def DMACTL          		= $D400
    66 = D401			.def CHACTL          		= $D401
    67 = D402			.def DLISTL          		= $D402
    68 = D403			.def DLISTH          		= $D403
    69 = D404			.def HSCROL          		= $D404
    70 = D405			.def VSCROL          		= $D405
    71 = D407			.def PMBASE          		= $D407	; STARTING ADRESS PLAYER MISSILE GRAPHICS
    72 = D409			.def CHBASE          		= $D409
    73 = D40A			.def WSYNC           		= $D40A
    74 = D40B			.def VCOUNT          		= $D40B
    75 = D40E			.def NMIEN          		= $D40E 
    76 = D40F			.def NMIST           		= $D40F
    77 = D40F			.def NMIRES			= $D40F
    78
    79 = FFFA			.def NMI             		= $FFFA
    80 = FFFC			.def RESET           		= $FFFC
    81 = FFFE			.def IRQ             		= $FFFE
    82
    83 				;//---------------------------------------------------------------------------------------------
    84
    85 				.MACRO CHECK_NTSCPAL
    86 						lda		NTSCPAL
    87 						cmp		#1
    88 				.ENDM
    89
    90 				.MACRO SETBKCOL COLVAL
    91 				.ifdef DEBUG_COLOR
    92 						lda		#:COLVAL 
    93 						sta		COLBK
    94 				.endif
    95 				.ENDM
    96
    97 				.MACRO KIL
    98 						dta 2
    99 				.ENDM
   100
   101 				;//---------------------------------------------------------------------------------------------
   102
   103 = 0040			.def LMS                 	= 64
   104 = 0010			.def HS                  	= 16
   105 = 0004			.def MODE4               	= 4
   106 = 000D			.def MODED               	= $0D
   107 = 000E			.def MODEE               	= $0E
   108 = 000F			.def MODEF               	= $0F
   109 = 0070			.def BLANK8              	= $70
   110 = 0080			.def DLI                 	= 128
   111 = 0041			.def DLIJUMP             	= $41	; jump + wait vsync
   112 = 0001			.def DL_JUMP             	= $1	; jump 
   113 = 0000			.def PFSIZE_DISABLED		= 0
   114 = 0001			.def PFSIZE_NARROW		= 1
   115 = 0002			.def PFSIZE_NORMAL		= 2
   116 = 0003			.def PFSIZE_WIDE		= 3
   117 = 0002			.def GRACTL_PDMA		= 1<<1
   118 = 0001			.def GRACTL_MDMA		= 1<<0
    13
    14 				;--------------------------------------------------------------------------------------------------;
    15
    16 = 0000			ZEROPAGE	equ $0000 
    17 = 0800			DRIVER		equ $0800
    18 				;PLAYER		equ $3000 
    19 				;MODULE		equ $4000 
    20 = 0008			VLINE		equ 8			; 16 is the default according to Raster's example player 
    21 = 0069			RASTERBAR	equ $69			; $69 is a nice purpleish hue 
    22 = 00FE			DISPLAY 	equ $FE			; Display List indirect memory address
    23
    24 				;--------------------------------------------------------------------------------------------------;
    25
    26 				; initialisation of the DUMB Driver and Player's very simple interface 
    27 				 
    28 					icl 'DUMB Music Driver.asm'	; The lovely RMT driver wannabe :D 
Source: DUMB Music Driver.asm
     1 				;* --- Dumb Unless Made Better ---
     2 				;*
     3 				;* DUMB Music Driver - Prototype 2 
     4 				;* By VinsCool 
     5 				;* 
     6 				;* Some inspiration was taken from Raster Music Tracker's original driver, mainly for familiarity 
     7 				;--------------------------------------------------------------------------------------------------; 
     8
     9 						icl 'DUMB Module.inc' 		;* MADS Assembly Macros and Module Format Definitions  
Source: DUMB Module.inc
     1 				;* --- Dumb Unless Made Better ---
     2 				;*
     3 				;* DUMB Module Construction Pseudocode - Prototype 2 
     4 				;* By VinsCool 
     5 				;* 
     6 				;* An attempt at construction Module data using Assembly macros pseudocode
     7 				;* The goal is mainly to be able to make something that is humanly readable and editiable
     8 				;* Ideally, the syntax is as close as possible to the look and feel of a typical Music Tracker 
     9 				;* This is also done for the purpose of easily decoding the data to a functional purpose later 
    10 				;--------------------------------------------------------------------------------------------------; 
    11
    12 				;* Much of everything is being designed right now!!!
    13 				;* TODO: A FUCKTON of things, lmfaooo 
    14
    15 				//-----------------------------------------------------------------------------------------------------------//
    16
    17 				;* Some humanly readable data definitions
    18 				;* Designed to make things much easier to follow
    19 				;* This is also intended to be used within the music driver itself 
    20 				;* Future design changes will be a lot faster and easier to apply in the code 
    21 				;* Otherwise, I know I will get frustrated if I need to edit everything by hand  
    22 				;* Small and subtle changes are very easy to miss in the ASM code, specifically! 
    23 				;* Nothing here is definitive yet, but hopefully, this provides a good enough idea for how it's being made  
    24 				;* I'm still in the process of brainstorming better ideas, regarding new driver features, and optimisations 
    25
    26 				//-----------------------------------------------------------------------------------------------------------//
    27
    28 				;* Byte $VV bits Constants 
    29
    30 = 0080			PAUSE		= %10000000	; Pause length of 0 
    31 = 0040			NOTE		= %01000000
    32 = 0020			INSTRUMENT	= %00100000
    33 = 0010			VOLUME		= %00010000 
    34 = 0008			COMMAND_1	= %00001000
    35 = 0004			COMMAND_2	= %00000100
    36 = 0002			COMMAND_3	= %00000010
    37 = 0001			COMMAND_4	= %00000001
    38
    39
    40 				;* Byte $II bits Constants 
    41
    42 = 000C			INSTRPAR 	= 12 		; number of instrument parameters before tables and envelopes 
    43 				;INSTRINIT	= %01000000	; if bit 6 is set, the instrument will be reset 
    44 				;INSTRESET	= %10111111	; use to clear bit 6 in the selected instrument 
    45
    46 = 0080			INSTRINIT	= %10000000	; if bit 7 is set, the instrument will be reset 
    47 = 007F			INSTRESET	= %01111111
    48
    49 				;* Byte $CC bits Constants 
    50
    51 = 00FF			TERMINATOR	= $FF		; End a pattern, it will be needed twice if the Pattern is longer than 128 rows 
    52
    53 				;* Row Volume Constants 
    54
    55 = 0000			v0	= $00
    56 = 0010			v1	= $10
    57 = 0020			v2	= $20
    58 = 0030			v3	= $30
    59 = 0040			v4	= $40
    60 = 0050			v5	= $50
    61 = 0060			v6	= $60
    62 = 0070			v7	= $70
    63 = 0080			v8	= $80
    64 = 0090			v9	= $90
    65 = 00A0			vA	= $A0
    66 = 00B0			vB	= $B0
    67 = 00C0			vC	= $C0
    68 = 00D0			vD	= $D0
    69 = 00E0			vE	= $E0
    70 = 00F0			vF	= $F0 
    71 = 0100			__	= $100		; A way to write an empty Instrument, Volume, etc  
    72
    73 				;* Row Notes Index Number Constants 
    74
    75 = 0000			C_0	= $00
    76 = 0001			Cs0	= $01
    77 = 0002			D_0	= $02
    78 = 0003			Ds0	= $03
    79 = 0004			E_0	= $04
    80 = 0005			F_0	= $05
    81 = 0006			Fs0	= $06
    82 = 0007			G_0	= $07
    83 = 0008			Gs0	= $08
    84 = 0009			A_0	= $09
    85 = 000A			As0	= $0A
    86 = 000B			B_0	= $0B
    87 = 000C			C_1	= $0C
    88 = 000D			Cs1	= $0D
    89 = 000E			D_1	= $0E
    90 = 000F			Ds1	= $0F
    91 = 0010			E_1	= $10
    92 = 0011			F_1	= $11
    93 = 0012			Fs1	= $12
    94 = 0013			G_1	= $13
    95 = 0014			Gs1	= $14
    96 = 0015			A_1	= $15
    97 = 0016			As1	= $16
    98 = 0017			B_1	= $17
    99 = 0018			C_2	= $18
   100 = 0019			Cs2	= $19
   101 = 001A			D_2	= $1A
   102 = 001B			Ds2	= $1B
   103 = 001C			E_2	= $1C
   104 = 001D			F_2	= $1D
   105 = 001E			Fs2	= $1E
   106 = 001F			G_2	= $1F
   107 = 0020			Gs2	= $20
   108 = 0021			A_2	= $21
   109 = 0022			As2	= $22
   110 = 0023			B_2	= $23
   111 = 0024			C_3	= $24
   112 = 0025			Cs3	= $25
   113 = 0026			D_3	= $26
   114 = 0027			Ds3	= $27
   115 = 0028			E_3	= $28
   116 = 0029			F_3	= $29
   117 = 002A			Fs3	= $2A
   118 = 002B			G_3	= $2B
   119 = 002C			Gs3	= $2C
   120 = 002D			A_3	= $2D
   121 = 002E			As3	= $2E
   122 = 002F			B_3	= $2F
   123 = 0030			C_4	= $30
   124 = 0031			Cs4	= $31
   125 = 0032			D_4	= $32
   126 = 0033			Ds4	= $33
   127 = 0034			E_4	= $34
   128 = 0035			F_4	= $35
   129 = 0036			Fs4	= $36
   130 = 0037			G_4	= $37
   131 = 0038			Gs4	= $38
   132 = 0039			A_4	= $39
   133 = 003A			As4	= $3A
   134 = 003B			B_4	= $3B
   135 = 003C			C_5	= $3C
   136 = 003D			Cs5	= $3D
   137 = 003E			D_5	= $3E
   138 = 003F			Ds5	= $3F
   139 = 0040			E_5	= $40
   140 = 0041			F_5	= $41
   141 = 0042			Fs5	= $42
   142 = 0043			G_5	= $43
   143 = 0044			Gs5	= $44
   144 = 0045			A_5	= $45
   145 = 0046			As5	= $46
   146 = 0047			B_5	= $47
   147 = 0048			C_6	= $48
   148 = 0049			Cs6	= $49
   149 = 004A			D_6	= $4A
   150 = 004B			Ds6	= $4B
   151 = 004C			E_6	= $4C
   152 = 004D			F_6	= $4D
   153 = 004E			Fs6	= $4E
   154 = 004F			G_6	= $4F
   155 = 0050			Gs6	= $50
   156 = 0051			A_6	= $51
   157 = 0052			As6	= $52
   158 = 0053			B_6	= $53
   159 = 0054			C_7	= $54
   160 = 0055			Cs7	= $55
   161 = 0056			D_7	= $56
   162 = 0057			Ds7	= $57
   163 = 0058			E_7	= $58
   164 = 0059			F_7	= $59
   165 = 005A			Fs7	= $5A
   166 = 005B			G_7	= $5B
   167 = 005C			Gs7	= $5C
   168 = 005D			A_7	= $5D
   169 = 005E			As7	= $5E
   170 = 005F			B_7	= $5F 
   171 = 0060			REL	= $60
   172 = 007F			OFF	= $7F  
   173 = 0100			___	= $100		; A way to write an Empty Note, Command, XY Parameter, etc
   174
   175 				;* Effect Commands Constants 
   176
   177 = 0000			CMD0	= $00 
   178 = 0001			CMD1	= $01 
   179 = 0002			CMD2	= $02 
   180 = 0003			CMD3	= $03 
   181 = 0004			CMD4	= $04 
   182 = 0005			CMD5	= $05 
   183 = 0006			CMD6	= $06 
   184 = 0007			CMD7	= $07 
   185 = 0008			CMD8	= $08 
   186 = 0009			CMD9	= $09 
   187 = 000A			CMDA	= $0A 
   188 = 000B			CMDB	= $0B 
   189 = 000C			CMDC	= $0C 
   190 = 000D			CMDD	= $0D 
   191 = 000E			CMDE	= $0E 
   192 = 000F			CMDF	= $0F 
   193
   194 				//-----------------------------------------------------------------------------------------------------------//
   195
   196 				;* Row Pause creation macro, pretty self explanatory regarding what it could do 
   197 				;* I would prefer being able to simply have both the Row Pause and Row Creation macros merged, but whatever 
   198 				;* As long as it works, I'm fine with that :P 
   199 				;* 
   200 				;* Parameters:
   201 				;* p = Pause length, up to $7F, or 128 rows 
   202
   203 				.MACRO	SET_PAUSE [p] 
   204 					.IF (:p > TERMINATOR) 
   205 						.BYTE $80		; Missing parameter, Empty Row with a Pause length of 0 is assumed 
   206 						
   207 					.ELSEIF (:p < PAUSE) 
   208 						.BYTE PAUSE + :p 	; Set the Pause length by adding the Parameter p to it  
   209 				
   210 					.ELSE 
   211 						.BYTE :p		; Limit the pause length to $7F if a larger number is used 
   212 							
   213 					.ENDIF	
   214 				
   215 				.ENDM 
   216
   217 				.MACRO	END_PATTERN 
   218 					 
   219 					.BYTE $00			; Pattern End 
   220 				
   221 				.ENDM
   222
   223 				//-----------------------------------------------------------------------------------------------------------//
   224
   225 				;* Pattern Row creation macro, this is made with the goal of creating modules in the Assembly code easily 
   226 				;* This may become good enough for the creation of complete module file, from start to finish, with simplicity in mind 
   227 				;* Currently, most of this stuff is a proof of concept, but it may eventually become useful for future C++ adaptation 
   228 				;* This is intended to be flexible, and painless to update when I have to edit the pseudocode to match any driver changes 
   229 				;* 
   230 				;* Parameters:
   231 				;* not = Note Index, from $00 (C-0) to $5F (B-7), or 96 notes. Also used for Note Command, such as Note Cut, Note Release, etc 
   232 				;* inst = Instrument Index, from $00 to $3F, or 64 instruments (not yet implemented properly in the driver) 
   233 				;* vol = Volume, from $00 to $0F, or 16 levels 
   234 				;* cmd0-3 = Effect Commands, to do later (not yet implemented properly in the driver) 
   235 				;* xy0-3 = Effect Commands $XY parameters, to do later (not yet implemented properly in the driver) 
   236 				;* paus = Row Pause length, this parameter only exists as a soft limit, technically any byte after $VV may be used the same way 
   237 				;* 
   238 				;* TODO: a LOT, it's a bit complex to make it all work, but it will be EXTREMELY rewarding! :D 
   239
   240 				.MACRO	ROW [not, inst, vol, cmd0, xy0, cmd1, xy1, cmd2, xy2, cmd3, xy3] 
   241 				
   242 				;* First, verify if the arguments aren't missing, if the first argument is empty, spit out a $80 and bail out! 
   243 				
   244 					.IF (:not > TERMINATOR+1) 
   245 						.BYTE $80	; Missing parameter, an Empty Row with a Pause length of 0 is assumed 
   246 						
   247 				;	.ELSEIF (:not > OFF) 
   248 				;		.BYTE :not	; :not is a Row Pause Command
   249 				
   250 					.ELSE	;* Everything is processed like normal from here, if the arguments aren't empty 
   251 					
   252 				;* Check how many arguments were passed to the macro, in order to know exactly what is actually expected! 
   253 				
   254 						.IF (:xy3 <= TERMINATOR)
   255 							argnum = 11	; up to 11 arguments may be valid 
   256 				
   257 						.ELSEIF (:cmd3 <= TERMINATOR)
   258 							argnum = 10	; up to 10 arguments may be valid 
   259 				
   260 						.ELSEIF (:xy2 <= TERMINATOR)
   261 							argnum = 9	; up to 9 arguments may be valid 
   262 				
   263 						.ELSEIF (:cmd2 <= TERMINATOR)
   264 							argnum = 8	; up to 8 arguments may be valid 
   265 				
   266 						.ELSEIF (:xy1 <= TERMINATOR)
   267 							argnum = 7	; up to 7 arguments may be valid 
   268 				
   269 						.ELSEIF (:cmd1 <= TERMINATOR)
   270 							argnum = 6	; up to 6 arguments may be valid 
   271 				
   272 						.ELSEIF (:xy0 <= TERMINATOR)
   273 							argnum = 5	; up to 5 arguments may be valid 
   274 				
   275 						.ELSEIF (:cmd0 <= TERMINATOR)
   276 							argnum = 4	; up to 4 arguments may be valid 
   277 				
   278 						.ELSEIF (:vol <= TERMINATOR)
   279 							argnum = 3	; up to 3 arguments may be valid 
   280 				
   281 						.ELSEIF (:inst <= TERMINATOR)
   282 							argnum = 2	; up to 2 arguments may be valid 
   283 							
   284 						.ELSEIF (:not <= TERMINATOR)
   285 							argnum = 1	; only 1 argument may be valid 
   286 							
   287 						.ELSE
   288 							argnum = 0	; no valid argument 
   289 					
   290 						.ENDIF
   291 				
   292 				;* Process Row values from here 
   293 				
   294 						.IF (argnum == 0) 
   295 							.BYTE $80
   296 				
   297 						.ELSEIF (argnum == 1) 
   298 						
   299 							.IF (:not > OFF) 
   300 								.BYTE :not	; :not is a Row Pause Command
   301 								
   302 							.ELSEIF (:not == OFF) 
   303 								.BYTE NOTE 
   304 								.BYTE $FF	; no, this is NOT a PAUSE command! 
   305 								
   306 							.ELSE
   307 								.BYTE NOTE 
   308 								.BYTE :not 
   309 							.ENDIF
   310 				
   311 						.ELSEIF (argnum == 2) 
   312 							.BYTE NOTE + INSTRUMENT 
   313 							.BYTE :not 
   314 							.BYTE :inst + INSTRINIT
   315 				
   316 						.ELSEIF (argnum == 3) 
   317 						
   318 							.IF (:not == ___ && :inst == ___ && :vol == ___) 
   319 								.BYTE $80
   320 							
   321 							.ELSEIF (:not == ___ && :inst == ___) 
   322 								.BYTE VOLUME 
   323 								.BYTE :vol 
   324 								
   325 							.ELSEIF (:not == ___ && :vol == ___) 
   326 								.BYTE INSTRUMENT 
   327 								.BYTE :inst
   328 								
   329 							.ELSEIF (:inst == ___ && :vol == ___) 
   330 								.BYTE NOTE 
   331 								.BYTE :not 
   332 				
   333 							.ELSEIF (:not == ___) 
   334 								.BYTE INSTRUMENT + VOLUME  
   335 								.BYTE :inst + INSTRINIT
   336 								.BYTE :vol
   337 								
   338 							.ELSEIF (:inst == ___) 
   339 								.BYTE NOTE + VOLUME  
   340 								.BYTE :not 
   341 								.BYTE :vol
   342 								
   343 							.ELSEIF (:vol == ___) 
   344 								.BYTE NOTE + INSTRUMENT 
   345 								.BYTE :not 
   346 								.BYTE :inst
   347 							
   348 							.ELSE
   349 								.BYTE NOTE + INSTRUMENT + VOLUME 
   350 								.BYTE :not 
   351 								.BYTE :inst + INSTRINIT
   352 								.BYTE :vol 
   353 							
   354 							.ENDIF
   355 							
   356 				/*	
   357 								.BYTE NOTE + INSTRUMENT + VOLUME 
   358 								.BYTE :not 
   359 								.BYTE :inst + INSTRINIT
   360 								.BYTE :vol 
   361 				*/
   362 							
   363 						.ELSEIF (argnum == 4) 
   364 							.BYTE NOTE + INSTRUMENT + VOLUME + COMMAND_1 
   365 							.BYTE :not 
   366 							.BYTE :inst + INSTRINIT
   367 							.BYTE :vol 
   368 							.BYTE :cmd0 
   369 							.BYTE $00
   370 								
   371 						.ELSEIF (argnum == 5) 
   372 				
   373 							.IF (:not == OFF) 
   374 								.BYTE NOTE + COMMAND_1 
   375 								.BYTE $FF	; no, this is NOT a PAUSE command! 
   376 								.BYTE :cmd0 
   377 								.BYTE :xy0 
   378 								
   379 							.ELSE 
   380 								.BYTE NOTE + INSTRUMENT + VOLUME + COMMAND_1 
   381 								.BYTE :not 
   382 								.BYTE :inst + INSTRINIT
   383 								.BYTE :vol
   384 								.BYTE :cmd0 
   385 								.BYTE :xy0 
   386 							.ENDIF 
   387 				
   388 						.ELSEIF (argnum == 6) 
   389 							.BYTE NOTE + INSTRUMENT + VOLUME + COMMAND_1 + COMMAND_2
   390 							.BYTE :not 
   391 							.BYTE :inst + INSTRINIT
   392 							.BYTE :vol
   393 							.BYTE :cmd0 
   394 							.BYTE :xy0
   395 							.BYTE :cmd1 
   396 							.BYTE $00
   397 								
   398 						.ELSEIF (argnum == 7) 
   399 							.BYTE NOTE + INSTRUMENT + VOLUME + COMMAND_1 + COMMAND_2
   400 							.BYTE :not 
   401 							.BYTE :inst + INSTRINIT
   402 							.BYTE :vol
   403 							.BYTE :cmd0 
   404 							.BYTE :xy0
   405 							.BYTE :cmd1
   406 							.BYTE :xy1
   407 				
   408 						.ELSEIF (argnum == 8) 
   409 							.BYTE NOTE + INSTRUMENT + VOLUME + COMMAND_1 + COMMAND_2 + COMMAND_3
   410 							.BYTE :not 
   411 							.BYTE :inst + INSTRINIT
   412 							.BYTE :vol
   413 							.BYTE :cmd0 
   414 							.BYTE :xy0
   415 							.BYTE :cmd1
   416 							.BYTE :xy1 
   417 							.BYTE :cmd2
   418 							.BYTE $00 
   419 				
   420 						.ELSEIF (argnum == 9) 
   421 							.BYTE NOTE + INSTRUMENT + VOLUME + COMMAND_1 + COMMAND_2 + COMMAND_3
   422 							.BYTE :not 
   423 							.BYTE :inst + INSTRINIT
   424 							.BYTE :vol
   425 							.BYTE :cmd0 
   426 							.BYTE :xy0
   427 							.BYTE :cmd1
   428 							.BYTE :xy1 
   429 							.BYTE :cmd2
   430 							.BYTE :xy2
   431 								
   432 						.ELSEIF (argnum == 10) 
   433 							.BYTE NOTE + INSTRUMENT + VOLUME + COMMAND_1 + COMMAND_2 + COMMAND_3 + COMMAND_4
   434 							.BYTE :not 
   435 							.BYTE :inst + INSTRINIT
   436 							.BYTE :vol
   437 							.BYTE :cmd0 
   438 							.BYTE :xy0
   439 							.BYTE :cmd1
   440 							.BYTE :xy1 
   441 							.BYTE :cmd2
   442 							.BYTE :xy2 
   443 							.BYTE :cmd3 
   444 							.BYTE $00 
   445 				
   446 						.ELSEIF (argnum == 11) 
   447 							.BYTE NOTE + INSTRUMENT + VOLUME + COMMAND_1 + COMMAND_2 + COMMAND_3 + COMMAND_4
   448 							.BYTE :not 
   449 							.BYTE :inst + INSTRINIT
   450 							.BYTE :vol
   451 							.BYTE :cmd0 
   452 							.BYTE :xy0
   453 							.BYTE :cmd1
   454 							.BYTE :xy1 
   455 							.BYTE :cmd2
   456 							.BYTE :xy2 
   457 							.BYTE :cmd3 
   458 							.BYTE :xy3 
   459 							
   460 						.ENDIF 
   461 				
   462 					.ENDIF 
   463 				
   464 				;* Finished the macro! 
   465 				
   466 				.ENDM 
   467
   468
   469
   470
   471
   472
   473
   474
   475
   476
   477
   478
   479
   480
   481
   482
   483
   484
   485
   486
   487 				/*
   488
   489 				;* First, verify if the arguments aren't missing, if the first argument is empty, spit out a $80 and bail out! 
   490
   491 					.IF (:not > TERMINATOR) 
   492 						.BYTE $80	; Missing parameter, an Empty Row with a Pause length of 0 is assumed 
   493
   494 					.ELSE	;* Everything is processed like normal from here, if the arguments aren't empty 
   495 					
   496 				;* Check how many arguments were passed to the macro, in order to know exactly what is actually expected! 
   497
   498 						.IF (:paus <= TERMINATOR)
   499 							argnum = 12	; all 12 arguments may be valid, anything above that will be ignored 
   500
   501 						.ELSEIF (:xy3 <= TERMINATOR)
   502 							argnum = 11	; up to 11 arguments may be valid 
   503
   504 						.ELSEIF (:cmd3 <= TERMINATOR)
   505 							argnum = 10	; up to 10 arguments may be valid 
   506
   507 						.ELSEIF (:xy2 <= TERMINATOR)
   508 							argnum = 9	; up to 9 arguments may be valid 
   509
   510 						.ELSEIF (:cmd2 <= TERMINATOR)
   511 							argnum = 8	; up to 8 arguments may be valid 
   512
   513 						.ELSEIF (:xy1 <= TERMINATOR)
   514 							argnum = 7	; up to 7 arguments may be valid 
   515
   516 						.ELSEIF (:cmd1 <= TERMINATOR)
   517 							argnum = 6	; up to 6 arguments may be valid 
   518
   519 						.ELSEIF (:xy0 <= TERMINATOR)
   520 							argnum = 5	; up to 5 arguments may be valid 
   521
   522 						.ELSEIF (:cmd0 <= TERMINATOR)
   523 							argnum = 4	; up to 4 arguments may be valid 
   524
   525 						.ELSEIF (:vol <= TERMINATOR)
   526 							argnum = 3	; up to 3 arguments may be valid 
   527
   528 						.ELSEIF (:inst <= TERMINATOR)
   529 							argnum = 2	; up to 2 arguments may be valid 
   530 							
   531 						.ELSEIF (:not <= TERMINATOR)
   532 							argnum = 1	; only 1 argument may be valid 
   533 					
   534 						.ENDIF
   535 						
   536 				;* Create the Byte $VV here, it will always be the first byte processed by DUMB Music Driver 
   537 				;* The number of arguments will be directly related to its creation, so this is very important to not half ass it all! 
   538 				;* Note, Instrument and Volume are minimal number of arguments expected for a "complete" Byte $VV 
   539 				;* Anything else will depend on the arguments number, and a bit of luck, if the assumptions aren't wrong in the first place! 
   540
   541 						.IF (argnum == 1)			; argument 1: Note 
   542 							.IF (:not < MAXNOTE) 
   543 								byte_vv = NOTE		; :not is a valid Note Index 
   544 								
   545 							.ELSE
   546 								byte_vv = PAUSE 	; :not was set to be used as the Row Pause Length
   547 							
   548 							.ENDIF
   549
   550 							.IF (byte_vv == PAUSE) 
   551 								.BYTE :not		; Set Pause Command, using the value of :not directly 
   552 							
   553 							.ELSEIF (byte_vv == NOTE) 
   554 								.BYTE byte_vv		; $VV => Set Note Command  
   555 								.BYTE :not 		; $NN => :not 
   556 								.BYTE PAUSE		; Missing parameter, a Pause length of 0 is assumed 
   557 							
   558 							.ENDIF
   559 							
   560 						.ELSEIF (argnum == 2)			; argument 2: Instrument 
   561 							.IF (:inst < MAXINSTRUMENT && :not < MAXNOTE) 
   562 								byte_vv = NOTE + INSTRUMENT	; :not is a valid Note Index, :inst is a valid Instrument Index 		
   563
   564 							.ELSEIF (:inst < MAXINSTRUMENT) 
   565 								byte_vv = INSTRUMENT 	; :inst is a valid Instrument Index, :not will be ignored 
   566
   567 							.ELSEIF (:not < MAXNOTE) 
   568 								byte_vv = NOTE		; :not is a valid Note Index, :inst was set to be used as the Row Pause Length 
   569
   570 							.ELSE
   571 								byte_vv = PAUSE 	; WARNING: This should never happen! Unfuck your code immediately Vin! 
   572 							
   573 							.ENDIF
   574
   575 							.IF (byte_vv == PAUSE) 
   576 								.BYTE PAUSE		; Missing parameter, a Pause length of 0 is assumed 
   577
   578 							.ELSEIF (byte_vv == NOTE + INSTRUMENT) 
   579 								.BYTE byte_vv		; $VV => Set Note and Instrument Command 
   580 								.BYTE :not 		; $NN => :not 
   581 								.BYTE :inst		; $II => :inst 
   582 								.BYTE PAUSE		; Missing parameter, a Pause length of 0 is assumed 
   583
   584 							.ELSEIF (byte_vv == INSTRUMENT) 
   585 								.BYTE byte_vv		; $VV => Set Instrument Command  
   586 								.BYTE :inst		; $II => :inst 
   587 								.BYTE PAUSE		; Missing parameter, a Pause length of 0 is assumed 
   588
   589 							.ELSEIF (byte_vv == NOTE) 
   590 								.BYTE byte_vv		; $VV => Set Note Command  
   591 								.BYTE :not 		; $NN => :not 
   592 								.BYTE :inst		; $II => :inst, Trigger Bit was set 
   593 							
   594 							.ENDIF		
   595 							 
   596 						.ELSEIF (argnum == 3)			; argument 3: Volume 
   597 							.IF (:vol < MAXVOLUME && :inst < MAXINSTRUMENT && :not < MAXNOTE) 
   598 								byte_vv = VOLUME + NOTE + INSTRUMENT	; :not is a valid Note Index, :inst is a valid Instrument Index :vol is a valid Volume level		
   599
   600 							.ELSEIF (:vol < MAXVOLUME && :inst < MAXINSTRUMENT) 
   601 								byte_vv = VOLUME + INSTRUMENT		; :inst is a valid Instrument Index :vol is a valid Volume level, :not will be ignored
   602 								
   603 							.ELSEIF (:vol < MAXVOLUME && :not < MAXNOTE) 
   604 								byte_vv = VOLUME + NOTE			; :not is a valid Note Index, :vol is a valid Volume level, :inst will be ignored
   605
   606 							.ELSEIF (:vol < MAXVOLUME) 
   607 								byte_vv = VOLUME	; :vol is a valid Volume level, :not and :inst will be ignored 
   608
   609 							.ELSEIF (:inst < MAXINSTRUMENT && :not < MAXNOTE) 
   610 								byte_vv = NOTE + INSTRUMENT	; :not is a valid Note Index, :inst is a valid Instrument Index, :vol was set to be used as the Row Pause Length 
   611
   612 							.ELSEIF (:inst < MAXINSTRUMENT) 
   613 								byte_vv = INSTRUMENT 	; :inst is a valid Instrument Index, :not will be ignored, :vol was set to be used as the Row Pause Length 
   614
   615 							.ELSEIF (:not < MAXNOTE) 
   616 								byte_vv = NOTE		; :not is a valid Note Index, :inst will be ignored, :vol was set to be used as the Row Pause Length 
   617
   618 							.ELSE
   619 								byte_vv = PAUSE 	; WARNING: This should never happen! Unfuck your code immediately Vin! 
   620 							
   621 							.ENDIF
   622
   623 							.IF (byte_vv == PAUSE) 
   624 								.BYTE PAUSE		; Missing parameter, a Pause length of 0 is assumed 
   625
   626 							.ELSEIF (byte_vv == VOLUME + NOTE + INSTRUMENT) 
   627 								.BYTE byte_vv + :vol 	; $VV => Set Volume, Note and Instrument Command, Volume was set to the value of :vol  
   628 								.BYTE :not 		; $NN => :not 
   629 								.BYTE :inst		; $II => :inst 
   630 								.BYTE PAUSE		; Missing parameter, a Pause length of 0 is assumed 
   631
   632 							.ELSEIF (byte_vv == VOLUME + INSTRUMENT) 
   633 								.BYTE byte_vv + :vol 	; $VV => Set Volume and Instrument Command, Volume was set to the value of :vol  
   634 								.BYTE :inst 		; $II => :inst 
   635 								.BYTE PAUSE		; Missing parameter, a Pause length of 0 is assumed
   636
   637 							.ELSEIF (byte_vv == VOLUME + NOTE) 
   638 								.BYTE byte_vv + :vol 	; $VV => Set Volume and Note Command, Volume was set to the value of :vol  
   639 								.BYTE :not 		; $NN => :not 
   640 								.BYTE PAUSE		; Missing parameter, a Pause length of 0 is assumed
   641
   642 							.ELSEIF (byte_vv == VOLUME) 
   643 								.BYTE byte_vv + :vol 	; $VV => Set Volume Command, Volume was set to the value of :vol  
   644 								.BYTE PAUSE		; Missing parameter, a Pause length of 0 is assumed 
   645
   646 							.ELSEIF (byte_vv == NOTE + INSTRUMENT) 
   647 								.BYTE byte_vv		; $VV => Set Note and Instrument Command 
   648 								.BYTE :not 		; $NN => :not 
   649 								.BYTE :inst		; $II => :inst 
   650 								.BYTE :vol		; $CC => :vol, Trigger Bit was set 
   651
   652 							.ELSEIF (byte_vv == INSTRUMENT) 
   653 								.BYTE byte_vv		; $VV => Set Instrument Command  
   654 								.BYTE :inst		; $II => :inst 
   655 								.BYTE :vol		; $CC => :vol, Trigger Bit was set 
   656
   657 							.ELSEIF (byte_vv == NOTE) 
   658 								.BYTE byte_vv		; $VV => Set Note Command  
   659 								.BYTE :not 		; $NN => :not 
   660 								.BYTE :vol		; $II => :vol, Trigger Bit was set 
   661
   662 							.ENDIF	
   663
   664
   665 						.ELSEIF (argnum >= 4)			; argument 4 and beyond: Effect Commands  
   666 							.IF (:vol < MAXVOLUME && :inst < MAXINSTRUMENT && :not < MAXNOTE) 
   667 								byte_vv = VOLUME + NOTE + INSTRUMENT	; :not is a valid Note Index, :inst is a valid Instrument Index :vol is a valid Volume level		
   668
   669 							.ELSEIF (:vol < MAXVOLUME && :inst < MAXINSTRUMENT) 
   670 								byte_vv = VOLUME + INSTRUMENT		; :inst is a valid Instrument Index :vol is a valid Volume level, :not will be ignored
   671 								
   672 							.ELSEIF (:vol < MAXVOLUME && :not < MAXNOTE) 
   673 								byte_vv = VOLUME + NOTE			; :not is a valid Note Index, :vol is a valid Volume level, :inst will be ignored
   674
   675 							.ELSEIF (:vol < MAXVOLUME) 
   676 								byte_vv = VOLUME	; :vol is a valid Volume level, :not and :inst will be ignored 
   677
   678 							.ELSEIF (:inst < MAXINSTRUMENT && :not < MAXNOTE) 
   679 								byte_vv = NOTE + INSTRUMENT	; :not is a valid Note Index, :inst is a valid Instrument Index, :vol was set to be used as the Row Pause Length 
   680
   681 							.ELSEIF (:inst < MAXINSTRUMENT) 
   682 								byte_vv = INSTRUMENT 	; :inst is a valid Instrument Index, :not will be ignored, :vol was set to be used as the Row Pause Length 
   683
   684 							.ELSEIF (:not < MAXNOTE) 
   685 								byte_vv = NOTE		; :not is a valid Note Index, :inst will be ignored, :vol was set to be used as the Row Pause Length 
   686
   687 							.ELSE
   688 				;				byte_vv = PAUSE 	; WARNING: This should never happen! Unfuck your code immediately Vin! 
   689 								byte_vv = $00
   690 							
   691 							.ENDIF
   692
   693 				;			.IF (byte_vv == PAUSE) 
   694 				;				.BYTE PAUSE		; Missing parameter, a Pause length of 0 is assumed 
   695
   696 							.IF (byte_vv == $00) 
   697 								.BYTE byte_vv		; Empty Row, Processing Byte $CC immediately 
   698
   699 							.ELSEIF (byte_vv == VOLUME + NOTE + INSTRUMENT) 
   700 								.BYTE byte_vv + :vol 	; $VV => Set Volume, Note and Instrument Command, Volume was set to the value of :vol  
   701 								.BYTE :not 		; $NN => :not 
   702 								.BYTE :inst		; $II => :inst 
   703
   704 							.ELSEIF (byte_vv == VOLUME + INSTRUMENT) 
   705 								.BYTE byte_vv + :vol 	; $VV => Set Volume and Instrument Command, Volume was set to the value of :vol  
   706 								.BYTE :inst 		; $II => :inst 
   707
   708 							.ELSEIF (byte_vv == VOLUME + NOTE) 
   709 								.BYTE byte_vv + :vol 	; $VV => Set Volume and Note Command, Volume was set to the value of :vol  
   710 								.BYTE :not 		; $NN => :not 
   711
   712 							.ELSEIF (byte_vv == VOLUME) 
   713 								.BYTE byte_vv + :vol 	; $VV => Set Volume Command, Volume was set to the value of :vol  
   714
   715 							.ELSEIF (byte_vv == NOTE + INSTRUMENT) 
   716 								.BYTE byte_vv		; $VV => Set Note and Instrument Command 
   717 								.BYTE :not 		; $NN => :not 
   718 								.BYTE :inst		; $II => :inst 
   719 								.BYTE :vol		; $CC => :vol, Trigger Bit was set 
   720
   721 							.ELSEIF (byte_vv == INSTRUMENT) 
   722 								.BYTE byte_vv		; $VV => Set Instrument Command  
   723 								.BYTE :inst		; $II => :inst 
   724 								.BYTE :vol		; $CC => :vol, Trigger Bit was set 
   725
   726 							.ELSEIF (byte_vv == NOTE) 
   727 								.BYTE byte_vv		; $VV => Set Note Command  
   728 								.BYTE :not 		; $NN => :not 
   729 				;				.BYTE :vol		; $II => :vol, Trigger Bit was set 
   730
   731 							.ENDIF	
   732 							
   733 						.ENDIF 
   734 							
   735 				;* Effect Commands, used when argnum >= 4 only 
   736
   737 						.IF (argnum >= 4) 
   738
   739 				;* CMD0 
   740
   741 							.IF (:cmd0 >= PAUSE && argnum == 4) 
   742 								.BYTE :cmd0		; Pause length was set to the value :cmd0 
   743
   744 							.ELSEIF (:cmd0 < MAXCMD) 
   745 								.IF (:xy0 < TERMINATOR && :xy0 > $00) 
   746 									.BYTE :cmd0 + USE_XY	; $CC => :cmd0, using $XY parameter :xy0
   747 									.BYTE :xy0		; $XY => :xy0 
   748 							
   749 								.ELSEIF (:xy0 > TERMINATOR || :xy0 == $00) 
   750 									.BYTE :cmd0 		; $CC => :cmd0, $XY parameter of 0 is assumed 
   751 								
   752 								.ENDIF
   753 								
   754 								.IF (argnum == 4 || argnum == 5) 
   755 									.BYTE PAUSE		; Missing parameter, a Pause length of 0 is assumed 
   756 								
   757 								.ENDIF 
   758 								
   759 							.ENDIF
   760
   761 				;* CMD1 
   762
   763 							.IF (:cmd1 >= PAUSE && argnum == 6) 
   764 								.BYTE :cmd1		; Pause length was set to the value :cmd1 
   765
   766 							.ELSEIF (:cmd1 < MAXCMD) 
   767 								.IF (:xy1 < TERMINATOR && :xy1 > $00) 
   768 									.BYTE :cmd1 + USE_XY	; $CC => :cmd1, using $XY parameter :xy1
   769 									.BYTE :xy1		; $XY => :xy1 
   770 							
   771 								.ELSEIF (:xy1 > TERMINATOR || :xy1 == $00) 
   772 									.BYTE :cmd1 		; $CC => :cmd1, $XY parameter of 0 is assumed 
   773 								
   774 								.ENDIF
   775 								
   776 								.IF (argnum == 6 || argnum == 7) 
   777 									.BYTE PAUSE		; Missing parameter, a Pause length of 0 is assumed 
   778 								
   779 								.ENDIF 
   780 								
   781 							.ENDIF
   782
   783 				;* CMD2 
   784
   785 							.IF (:cmd2 >= PAUSE && argnum == 8) 
   786 								.BYTE :cmd2		; Pause length was set to the value :cmd2 
   787
   788 							.ELSEIF (:cmd2 < MAXCMD) 
   789 								.IF (:xy2 < TERMINATOR && :xy2 > $00) 
   790 									.BYTE :cmd2 + USE_XY	; $CC => :cmd2, using $XY parameter :xy2
   791 									.BYTE :xy2		; $XY => :xy2 
   792 							
   793 								.ELSEIF (:xy2 > TERMINATOR || :xy2 == $00) 
   794 									.BYTE :cmd2 		; $CC => :cmd2, $XY parameter of 0 is assumed 
   795 								
   796 								.ENDIF
   797 								
   798 								.IF (argnum == 8 || argnum == 9) 
   799 									.BYTE PAUSE		; Missing parameter, a Pause length of 0 is assumed 
   800 								
   801 								.ENDIF 
   802 								
   803 							.ENDIF
   804
   805 				;* CMD3 
   806
   807 							.IF (:cmd3 >= PAUSE && argnum == 10) 
   808 								.BYTE :cmd3		; Pause length was set to the value :cmd3 
   809
   810 							.ELSEIF (:cmd3 < MAXCMD) 
   811 								.IF (:xy3 < TERMINATOR && :xy3 > $00) 
   812 									.BYTE :cmd3 + USE_XY	; $CC => :cmd3, using $XY parameter :xy3
   813 									.BYTE :xy3		; $XY => :xy3 
   814 							
   815 								.ELSEIF (:xy3 > TERMINATOR || :xy3 == $00) 
   816 									.BYTE :cmd3 		; $CC => :cmd3, $XY parameter of 0 is assumed 
   817 								
   818 								.ENDIF
   819 								
   820 								.IF (argnum == 10 || argnum == 11) 
   821 									.BYTE PAUSE		; Missing parameter, a Pause length of 0 is assumed 
   822 								
   823 								.ENDIF 
   824 								
   825 							.ENDIF 
   826 							
   827 							.IF (argnum == 12) 
   828 								.BYTE :paus		; Pause length was set to the value :paus 
   829 							.ENDIF 
   830
   831 						.ENDIF 
   832
   833 				;* Maximum of arguments number reached from this point, anything else will be ignored 
   834
   835 					.ENDIF 
   836
   837 				;* Finished the macro! 
   838
   839 				.ENDM 
   840
   841 				*/
   841
   842
   843 				//-----------------------------------------------------------------------------------------------------------//
   844
    10
    11 				;-----------------
    12
    13 				;* Global Variables, anything that is directly used by the music driver 
    14
    15 						org ZEROPAGE+$80 
    16 				DUMBZPG 
    17 				SONGNUM 	org *+1
    18 				SONGMAX 	org *+1
    19 				ROWNUM		org *+1
    20 				ROWMAX		org *+1
    21 				TIMER		org *+1
    22 				SPEED		org *+1
    23 				VTIMER		org *+1 
    24 				VSPEED		org *+1
    25 				TMP0		org *+1 
    26 				TMP1		org *+1 
    27 				;* 11 bytes 
    28
    29 				;-----------------
    30
    31 				;* Indirect Memory Address Pointers used for parsing the Module data 
    32
    33 				SONGIDX		org *+2				;* Current Songline Index 
    34 				PTNIDX		org *+2				;* Current Pattern Index 
    35 				ROWIDX		org *+2				;* Current Row Index 
    36 				INSIDX		org *+2				;* Current Instrument Index 
    37 				FREQIDX		org *+2 			;* Current Tuning Table Index 
    38 				;* 10 bytes 
    39
    40 				;-----------------
    41
    42 				;* Temporary Variables, used to process Effect Commands and Instruments Commands 
    43
    44 				VAR_NOTE	org *+4
    45 				VAR_FREQ	org *+4
    46 				VAR_VOLUME	org *+4 
    47 				DUMBZPGEND
    48 				;* 12 bytes 
    49
    50 				;-----------------
    51
    52 				;* Shadow POKEY registers, buffered during playback, and copied to the actual POKEY the next frame 
    53
    54 				SDW_POKEY
    55 				SDW_AUDF	org *+4
    56 				SDW_AUDC	org *+4 
    57 				SDW_AUDCTL	org *+1 
    58 				SDW_SKCTL	org *+1  
    59 				;* 10 bytes 
    60
    61 				;-----------------
    62
    63 				;--------------------------------------------------------------------------------------------------;
    64
    65 				;* Start of DUMB jump table... 
    66
    67 					org DRIVER 
    68 				DUMBMUSICDRIVER
    69 FFFF> 0800-1EDB> 4C 0F + 	jmp DUMB_init				;* Must be run first, to clear memory and initialise the player... 
    70 0803 4C 8D 08			jmp DUMB_play				;* One play per call. SetPokey is executed first, then the player routines are processed 
    71 0806 4C 6F 09			jmp DUMB_continue			;* Similar to DUMB_play, but SetPokey is skipped very useful for playing simple things.
    72 0809 4C 4C 08			jmp DUMB_silence			;* Run this to stop the driver, and reset all POKEY registers to 0 
    73 080C 4C 5A 08			jmp setpokeyfull 			;* Copy the buffered POKEY bytes to into the real ones 
    74
    75 				;-----------------
    76
    77 				;--------------------------------------------------------------------------------------------------;
    78
    79 				;* Clear all Module Variables in memory first
    80
    81 080F			DUMB_init
    82 080F 20 4C 08			jsr DUMB_silence 			; clear the POKEY registers first
    83 0812 A9 00			lda #0
    84 0814 A2 20			ldx #DUMBZPGEND - DUMBZPG		; number of zeropage bytes used 
    85 0816			DUMB_init_loop 
    86 0816 95 80			sta DUMBZPG,x 				; clear all the zeropage bytes 
    87 0818 CA				dex 
    88 0819 10 FB			bpl DUMB_init_loop 			; continue until everything was cleared 
    89 081B A2 88			ldx #DUMB_VARIABLES_END - DUMB_VARIABLES; number of driver variables used 
    90 081D			DUMB_init_loop_2 
    91 081D 9D BD 17			sta DUMB_VARIABLES,x 			; clear all the driver variable  
    92 0820 CA				dex 
    93 0821 10 FA			bpl DUMB_init_loop_2 			; continue until everything was cleared 
    94 0823			DUMB_begin 
    95 0823 AD 2D 1F			lda MAXTLEN 				; Initialise the Maximal Pattern Length value from the module 
    96 0826 85 82			sta ROWNUM				; Set the maximal number of rows per patterns 
    97 0828 85 83			sta ROWMAX				; Set to backup memory, so it could be reloaded quickly between patterns 
    98 082A AD 2E 1F			lda SONGLEN				; Initialise the maximal number of songlines in song 
    99 082D 85 81			sta SONGMAX				; Set to backup memory, so it could be compared directly to current songline number 
   100 082F AD 2F 1F			lda INITSPD				; Initialise song speed defined in the module 
   101 0832 85 84			sta TIMER 				; Set to current pattern as the initial speed value to count from (in ticks) 
   102 0834 85 85			sta SPEED 				; Set to backup memory, so it could be reloaded quickly between patterns 
   103 0836 AD 30 1F			lda VBISPD				; Initialise the xVBI speed defined in the module 
   104 0839 85 86			sta VTIMER 				; Set to current xVBI speed used in the song, and should not change during the playback 
   105 083B 85 87			sta VSPEED 				; Set to backup memory, so it could be reloaded quickly between patterns 
   106 083D CE BD 17			dec CMD_NOTE+0 				; Disable notes, they should only play if valid data is loaded into them first 
   107 0840 CE BE 17			dec CMD_NOTE+1 
   108 0843 CE BF 17			dec CMD_NOTE+2 
   109 0846 CE C0 17			dec CMD_NOTE+3 
   110 0849 4C AB 08			jmp DUMB_play_songline_reset 
   111
   112 				;-----------------
   113
   114 				;--------------------------------------------------------------------------------------------------;
   115
   116 				;* Mute and Reset the POKEY registers, processed using the setpokeyfull routine below 
   117
   118 084C			DUMB_silence 
   119 084C A9 00			lda #0 
   120 084E A0 08			ldy #8					; 4 AUDF, 4 AUDC and 1 AUDCTL to reset 
   121 0850			DUMB_silence_loop	
   122 0850 99 A0 00			sta SDW_POKEY,y	
   123 0853 88				dey
   124 0854 10 FA			bpl DUMB_silence_loop 			; continue until all bytes were written 
   125 0856 A9 03			lda #3
   126 0858 85 A9			sta SDW_SKCTL				; Normal SKCTL register state 
   127
   128 				;-----------------
   129
   130 				;* Setpokey, intended for double buffering the POKEY register bytes for timing and cosmetic purposes 
   131
   132 085A			setpokeyfull
   133 085A A5 A9			lda SDW_SKCTL+0 			; to initialise the SKCTL register, could be omitted unless the Two-Tone Filter is used 
   134 085C 8D 0F D2			sta $D20F 
   135 085F			setpokey
   136 085F A4 A8			ldy SDW_AUDCTL+0			; normal routine otherwise, skipping 2 instructions if desired 
   137 0861 A5 A0			lda SDW_AUDF+0
   138 0863 A6 A4			ldx SDW_AUDC+0
   139 0865 8D 00 D2			sta $D200
   140 0868 8E 01 D2			stx $D201
   141 086B A5 A1			lda SDW_AUDF+1
   142 086D A6 A5			ldx SDW_AUDC+1
   143 086F 8D 02 D2			sta $D202
   144 0872 8E 03 D2			stx $D203
   145 0875 A5 A2			lda SDW_AUDF+2
   146 0877 A6 A6			ldx SDW_AUDC+2
   147 0879 8D 04 D2			sta $D204
   148 087C 8E 05 D2			stx $D205
   149 087F A5 A3			lda SDW_AUDF+3
   150 0881 A6 A7			ldx SDW_AUDC+3
   151 0883 8D 06 D2			sta $D206
   152 0886 8E 07 D2			stx $D207
   153 0889 8C 08 D2			sty $D208
   154 088C 60				rts 
   155
   156 				;-----------------
   157
   158 				;--------------------------------------------------------------------------------------------------;
   159
   160 				;* Main routine for the DUMB Music Driver, for typical music playback, call at least once per VBI 
   161 				;* Be sure to call DUMB_init first to initialise everything in memory, and every time new music data is loaded 
   162 				;* Attempting to execute DUMB_play without initialisation may corrupt memory and/or use garbage data as music data! 
   163
   164 088D			DUMB_play
   165 088D 20 5A 08			jsr setpokeyfull 			; update the POKEY with the last buffered registers data 
   166 0890 C6 84			dec TIMER 				; decrement 1 unit of the pause timer 
   167 0892 F0 03			beq DUMB_play_row			; once the Pause timer reaches 0, process the next row
   168 0894 4C 6F 09			jmp DUMB_continue			; if the Pause has not yet been finished, the next row won't play for this frame 
   169
   170 0897			DUMB_play_row 
   171 0897 A5 85			lda SPEED 				; reload the song speed from memory 
   172 0899 85 84			sta TIMER				; and reset the timer for the next row 
   173 089B C6 82			dec ROWNUM				; decrement the rows counter 
   174 089D D0 45			bne DUMB_play_advance 			; if not yet 0, the pattern is not finished, play the next row 
   175 089F A5 83			lda ROWMAX				; get the maximal pattern length defined 
   176 08A1 85 82			sta ROWNUM 				; reset the Row count 
   177 					
   178 08A3			DUMB_play_songline
   179 08A3 E6 80			inc SONGNUM				; increment the current songline number 
   180 08A5 A5 80			lda SONGNUM 
   181 08A7 C5 81			cmp SONGMAX				; maximal number songlines 
   182 08A9 D0 10			bne DUMB_play_pattern	 		; if not ended, update the songline index, then immediately get the new patterns data 
   183 					
   184 08AB			DUMB_play_songline_reset
   185 08AB AD 31 1F 85 8A AD + 	mwa SONGTBL SONGIDX			; re-initialise Songline Address Table first 
   186 08B5 A9 00			lda #0 
   187 08B7 85 80			sta SONGNUM 				; reset the Songline count
   188 08B9 F0 0A			beq DUMB_get_pattern_index		; unconditional 
   189
   190 08BB			DUMB_play_pattern	
   191 08BB A5 8A			lda SONGIDX 				; Songline Index LSB 
   192 08BD 69 04			adc #4					; Carry is clear 
   193 08BF 85 8A			sta SONGIDX 
   194 08C1 90 02			bcc DUMB_get_pattern_index 
   195 08C3 E6 8B			inc SONGIDX+1 
   196 					
   197 08C5			DUMB_get_pattern_index 
   198 08C5 A2 03			ldx #3					; start with ch4 
   199
   200 08C7			DUMB_get_pattern_index_loop
   201 08C7 8A				txa 
   202 08C8 A8				tay 
   203 08C9 B1 8A			lda (SONGIDX),y 			; get pattern number for that channel 
   204 08CB 0A				asl @ 
   205 08CC A8				tay  
   206 08CD B9 33 1F			lda PTNTBL,y 
   207 08D0 9D E9 17			sta PTNROW_LSB,x 
   208 08D3 C8				iny 
   209 08D4 B9 33 1F			lda PTNTBL,y 
   210 08D7 69 00			adc #0
   211 08D9 9D ED 17			sta PTNROW_MSB,x 
   212 08DC A9 00			lda #0 
   213 08DE 9D C9 17			sta CMD_PAUSE,x 
   214 08E1 CA				dex 
   215 08E2 10 E3			bpl DUMB_get_pattern_index_loop 
   216
   217 08E4			DUMB_play_advance   
   218 08E4 A2 03			ldx #3					; start with ch4 
   219
   220 08E6			DUMB_play_row_again  
   221 08E6 BC C9 17			ldy CMD_PAUSE,x				; is there a pause currently set for this channel?
   222 08E9 F0 06			beq DUMB_play_parse_row			; if Y = 0, play like normal, the Row Pause is finished 
   223 08EB DE C9 17			dec CMD_PAUSE,x 			; else, decrement the value currently in memory by 1 
   224 08EE 4C 69 09			jmp DUMB_play_skip_row_index 
   225
   226 08F1			DUMB_play_parse_row 
   227 08F1 BD E9 17			lda PTNROW_LSB,x 			; get the row index pointer in memory first 
   228 08F4 85 8E			sta ROWIDX 
   229 08F6 BD ED 17			lda PTNROW_MSB,x
   230 08F9 85 8F			sta ROWIDX+1 
   231
   232 08FB			DUMB_get_row_byte_parameter  
   233 08FB B1 8E			lda (ROWIDX),y 				; Parameter Byte will always be the first byte loaded 
   234 08FD F0 6A			beq DUMB_play_skip_row_index		; if the byte is $00, the row is skipped immediately, due to being a Terminator Byte!  
   235 08FF 10 07			bpl DUMB_get_row_byte_note	 	; if the Trigger bit is not set, continue with the remaining bits 
   236 0901 29 7F			and #$7F				; else, keep the lower 7 bits 
   237 0903 9D C9 17			sta CMD_PAUSE,x				; and use them to set the new pause length directly 
   238 0906 10 54			bpl DUMB_get_row_byte_advance_pointer	; unconditional 
   239
   240 0908			DUMB_get_row_byte_note 
   241 0908 85 88			sta TMP0 				; put in the temporary memory first 
   242 090A 06 88			asl TMP0 				; initial offset, bit 7 is already clear 
   243 090C 10 16			bpl DUMB_get_row_byte_instrument 
   244 090E C8				iny 
   245 090F B1 8E			lda (ROWIDX),y 
   246 0911 30 09			bmi DUMB_get_row_byte_note_cmd		; if the value is negative, continue below, this is a Note Stop command 
   247 0913 C9 60			cmp #REL 
   248 0915 90 0A			bcc DUMB_get_row_byte_note_no_cmd 
   249 0917 DE 41 18			dec instr_release,x 
   250 091A D0 08			bne DUMB_get_row_byte_instrument
   251 					
   252 091C			DUMB_get_row_byte_note_cmd
   253 091C 20 C1 09			jsr DUMB_process_note_stop		; this is a Note Stop command, clear some variables before continuing 
   254 091F F0 03			beq DUMB_get_row_byte_instrument
   255
   256 0921			DUMB_get_row_byte_note_no_cmd	
   257 0921 9D BD 17			sta CMD_NOTE,x 				; set the new Note value for this channel 
   258
   259 0924			DUMB_get_row_byte_instrument
   260 0924 06 88			asl TMP0 
   261 0926 10 06			bpl DUMB_get_row_byte_volume 
   262 0928 C8				iny 
   263 0929 B1 8E			lda (ROWIDX),y 
   264 092B 9D C1 17			sta CMD_INSTRUMENT,x			; set the new Instrument value for this channel 
   265
   266 092E			DUMB_get_row_byte_volume
   267 092E 06 88			asl TMP0 
   268 0930 10 06			bpl DUMB_get_row_byte_cmd1
   269 0932 C8				iny 
   270 0933 B1 8E			lda (ROWIDX),y 
   271 0935 9D C5 17			sta CMD_VOLUME,x			; set the new Volume value for this channel 
   272
   273 0938			DUMB_get_row_byte_cmd1
   274 0938 06 88			asl TMP0 
   275 093A 10 05			bpl DUMB_get_row_byte_cmd2
   276 093C 20 D7 09			jsr DUMB_set_effect_cmd			; initialise the Effect Command 
   277 093F A4 89			ldy TMP1 				; reload the Y offset, then continue
   278
   279 0941			DUMB_get_row_byte_cmd2
   280 0941 06 88			asl TMP0 
   281 0943 10 05			bpl DUMB_get_row_byte_cmd3
   282 0945 20 D7 09			jsr DUMB_set_effect_cmd			; initialise the Effect Command 
   283 0948 A4 89			ldy TMP1 				; reload the Y offset, then continue
   284
   285 094A			DUMB_get_row_byte_cmd3
   286 094A 06 88			asl TMP0 
   287 094C 10 05			bpl DUMB_get_row_byte_cmd4
   288 094E 20 D7 09			jsr DUMB_set_effect_cmd			; initialise the Effect Command 
   289 0951 A4 89			ldy TMP1 				; reload the Y offset, then continue	
   290
   291 0953			DUMB_get_row_byte_cmd4
   292 0953 06 88			asl TMP0 
   293 0955 10 05			bpl DUMB_get_row_byte_advance_pointer 
   294 0957 20 D7 09			jsr DUMB_set_effect_cmd			; initialise the Effect Command 
   295 095A A4 89			ldy TMP1 				; reload the Y offset, then continue
   296
   297 095C			DUMB_get_row_byte_advance_pointer 
   298 095C 98				tya 
   299 095D 38				sec					; set Carry manually to add 1 on top of the addition below, save 1 INY instruction  
   300 095E 7D E9 17			adc PTNROW_LSB,x 
   301 0961 9D E9 17			sta PTNROW_LSB,x 
   302 0964 90 03			bcc DUMB_play_skip_row_index 
   303 0966 FE ED 17			inc PTNROW_MSB,x 
   304
   305 0969			DUMB_play_skip_row_index 
   306 0969 CA				dex					; decrement the index for the next channel 
   307 096A 30 03			bmi DUMB_continue
   308 096C 4C E6 08			jmp DUMB_play_row_again			; continue until all channels were processed 
   309
   310 				;-----------------
   311
   312 				;--------------------------------------------------------------------------------------------------; 
   313
   314 				;* Secondary routine for the DUMB Music Driver, for processing music data in memory, such as instruments or effect commands 
   315 				;* This point is automatically reached when DUMB_play is called first, since it is the direct continuation of it 
   316 				;* Useful for playing sound effects using Instrument data, using a method very similar to one used by RMT 
   317 				;* Processed data for Note, Pitch, Volume, etc, will then be used for buffering the Shadow POKEY registers accordingly 
   318 				;* If DUMB_play isn't used for music playback, setpokey or setpokeyfull must be called manually, or when it is appropriate 
   319 				;* Otherwise, nothing will be written to the actual POKEY registers, which would result in nothing being output!
   320
   321 096F			DUMB_continue 
   322 096F A2 03			ldx #3					; start with ch4 
   323
   324 0971			DUMB_play_next_channel 
   325 0971 BD BD 17			lda CMD_NOTE,x 				; first, get the Note command currently in memory  
   326 0974 30 45			bmi DUMB_continue_advance 		; if the negative flag is set, skip this channel, there is nothing to play
   327 0976 95 94			sta VAR_NOTE,x 				; overwrite the Temporary Note Variable, since it may be edited before it is output 
   328 0978 A9 00			lda #0 
   329 097A 95 98			sta VAR_FREQ,x 
   330 097C 20 DD 0B			jsr DUMB_process_instrument 		; run the Instrument Routine if a valid note was read, in this case 
   331
   332 097F			DUMB_process_commands 
   333 097F BD DD 17			lda CMD_ARPEGGIO,x			; is Arpeggio used? this will be the starting point for Note offset 
   334 0982 F0 18			beq DUMB_process_commands_no_arps 	; in this case, the value will be #0, so this would work just fine 
   335 0984 DE E1 17			dec CMD_ARPTIMER,x 			; decrement the active Arpeggio timer 
   336 0987 10 09			bpl DUMB_process_arpeggio_continue 	; if positive, get the next entry from the arpeggio table 
   337 0989 A9 02			lda #2					; else, the arpeggio timer must be reset 
   338 098B 9D E1 17			sta CMD_ARPTIMER,x 			; for 2 notes 
   339 098E A9 00			lda #0 					; due to the way this is tangled, load #0 here for the Note offset 
   340 0990 10 0A			bpl DUMB_process_commands_no_arps 	; unconditional 
   341 					
   342 0992			DUMB_process_arpeggio_continue 
   343 0992 8A				txa 					; get the channel number 
   344 0993 0A				asl @ 					; multiply it by 2
   345 0994 18 7D E1 17			add CMD_ARPTIMER,x			; add the Arpeggio Timer as an offset 
   346 0998 A8				tay 					; copy to Y 
   347 0999 B9 F1 17			lda ARPTBL,y 				; and fetch the note currently in the Arpeggio table 
   348 					
   349 099C			DUMB_process_commands_no_arps
   350 099C 18 75 94			add VAR_NOTE,x 				; add the current note to the value in the table 
   351 099F 95 94			sta VAR_NOTE,x				; and overwrite it, so it could be played for the next part as intended 
   352 09A1 BD D5 17			lda CMD_VIBRATO,x 			; is Vibrato used? this will be the starting point for Freq offset 
   353 09A4 F0 0C			beq DUMB_process_commands_no_vib	; in this case, the value will be #0, so this would work just fine 
   354 09A6 BC D9 17			ldy CMD_VIBOFFSET,x			; get the current vibrato table offset in Y 
   355 09A9 B9 A8 17			lda vibtabnext,y			; now get the next vibrato table offset
   356 09AC 9D D9 17			sta CMD_VIBOFFSET,x			; and update the value in memory with it for the next frame 
   357 09AF B9 93 17			lda vib0,y 				; add the value from the Vibrato table to it
   358
   359 09B2			DUMB_process_commands_no_vib
   360 09B2 18 7D E5 17			add CMD_FINETUNE,x 			; add the Finetune value to it 
   361 09B6 18 75 98			add VAR_FREQ,x				; add the current Freq variable to it, if an instrument Command edited it already (FIXME) 
   362 09B9 95 98			sta VAR_FREQ,x 				; save the Freq variable for later 
   363
   364 09BB			DUMB_continue_advance 
   365 09BB CA				dex					; decrement the index for the next channel 
   366 09BC 10 B3			bpl DUMB_play_next_channel 		; process all channels that way, until X overflows to #$FF 
   367 09BE 4C 9D 0A			jmp DUMB_play_buffer_registers 		; now process all the data from every channels after everything was done 
   368
   369 				;-----------------
   370
   371 				;--------------------------------------------------------------------------------------------------; 
   372
   373 				;* Process the Note currently in memory 
   374
   375 09C1			DUMB_process_note_stop 
   376 09C1 A9 00			lda #0 
   377 09C3 95 A0			sta SDW_AUDF,x 				; reset channel AUDF 
   378 09C5 95 A4			sta SDW_AUDC,x				; reset channel AUDC	
   379 09C7 9D D1 17			sta CMD_AUDCTL,x 			; reset channel AUDCTL  
   380 09CA 9D C5 17			sta CMD_VOLUME,x 			; reset channel Volume 
   381 09CD 9D D5 17			sta CMD_VIBRATO,x 			; reset vibrato command 
   382 09D0 9D DD 17			sta CMD_ARPEGGIO,x 			; reset arpeggio command 
   383 09D3 9D E5 17			sta CMD_FINETUNE,x 			; reset finetune command 
   384 09D6 60				rts
   385
   386 				;--------------------------------------------------------------------------------------------------;
   387
   388 				;* An attempt at implementing effect commands... 
   389 				;* A will hold the $CC byte, and will be used to set the desired command in the Channel indexed by X
   390 				;* Y may hold the $XY Parameter for the Command using it, otherwise, #0 is assumed 
   391
   392 09D7			DUMB_set_effect_cmd
   393 09D7 C8				iny 
   394 09D8 B1 8E			lda (ROWIDX),y 				; Effect Command value 
   395 09DA 48				pha 					; quick backup in the Stack 
   396 09DB C8				iny 
   397 09DC B1 8E			lda (ROWIDX),y 				; $XY Parameter value
   398 09DE 84 89			sty TMP1 				; backup of the Y offset 
   399 09E0 A8				tay 					; copy the $XY parameter to Y 
   400 09E1 68				pla 					; get the Effect Command value back from the Stack 
   401 09E2 29 0F			and #$0F				; only keep the command index number using the lowest 4 bits 
   402 09E4 0A				asl @					; make a quick and dirty jump table allowing a 4 bytes index 
   403 09E5 0A				asl @ 
   404 09E6 8D EA 09			sta c_index+1				; branch will now match the value of the Effect Command Index Number 
   405 09E9 D0 FE		c_index	bne * 					; also, all jumps will end with a RTS! 
   406 09EB 4C 2B 0A			jmp DUMB_set_effect_cmd_0xy
   407 09EE EA				nop 
   408 09EF 4C 4B 0A			jmp DUMB_set_effect_cmd_1xy 
   409 09F2 EA				nop 
   410 09F3 4C 4C 0A			jmp DUMB_set_effect_cmd_2xy 
   411 09F6 EA				nop
   412 09F7 4C 4D 0A			jmp DUMB_set_effect_cmd_3xy 
   413 09FA EA				nop
   414 09FB 4C 4E 0A			jmp DUMB_set_effect_cmd_4xy 
   415 09FE EA				nop
   416 09FF 4C 59 0A			jmp DUMB_set_effect_cmd_5xy 
   417 0A02 EA				nop
   418 0A03 4C 60 0A			jmp DUMB_set_effect_cmd_6xy 
   419 0A06 EA				nop
   420 0A07 4C 61 0A			jmp DUMB_set_effect_cmd_7xy 
   421 0A0A EA				nop
   422 0A0B 4C 62 0A			jmp DUMB_set_effect_cmd_8xy 
   423 0A0E EA				nop
   424 0A0F 4C 67 0A			jmp DUMB_set_effect_cmd_9xy 
   425 0A12 EA				nop
   426 0A13 4C 6C 0A			jmp DUMB_set_effect_cmd_Axy 
   427 0A16 EA				nop
   428 0A17 4C 6D 0A			jmp DUMB_set_effect_cmd_Bxy 
   429 0A1A EA				nop
   430 0A1B 4C 91 0A			jmp DUMB_set_effect_cmd_Cxy 
   431 0A1E EA				nop
   432 0A1F 4C 92 0A			jmp DUMB_set_effect_cmd_Dxy 
   433 0A22 EA				nop
   434 0A23 4C 97 0A			jmp DUMB_set_effect_cmd_Exy 
   435 0A26 EA				nop
   436 0A27 4C 98 0A			jmp DUMB_set_effect_cmd_Fxy 
   437 0A2A EA				nop
   438
   439 				;-----------------
   440
   441 0A2B			DUMB_set_effect_cmd_0xy 			; Arpeggio Command => 0 = Basenote, x = Basenote + x, y = Basenote + y
   442 0A2B A9 00			lda #0					; initial timer, offset by 2 so the first frame is the original note 
   443 0A2D 9D E1 17			sta CMD_ARPTIMER,x			; if $XY = $00, the Arpeggio command will be skipped entirely  
   444 0A30 98				tya					; get the $XY parameter from Y 
   445 0A31 9D DD 17			sta CMD_ARPEGGIO,x			; the command has been written to the channel variable 
   446 0A34 8A				txa 
   447 0A35 0A				asl @ 
   448 0A36 A8				tay 
   449 0A37			DUMB_set_arpeggio_y
   450 0A37 BD DD 17			lda CMD_ARPEGGIO,x
   451 0A3A 29 0F			and #$0F				; only keep the low 4 bits to get the parameter y 
   452 0A3C 99 F1 17			sta ARPTBL,y 
   453 0A3F C8				iny 
   454 0A40			DUMB_set_arpeggio_x 
   455 0A40 BD DD 17			lda CMD_ARPEGGIO,x
   456 0A43 4A				lsr @					; else, use the parameter x and offset the note once the high 4 bits are shifted 
   457 0A44 4A				lsr @
   458 0A45 4A				lsr @
   459 0A46 4A				lsr @ 
   460 0A47 99 F1 17			sta ARPTBL,y 
   461 0A4A 60				rts 
   462
   463 				;-----------------
   464 					
   465 0A4B			DUMB_set_effect_cmd_1xy 			; Pitch Slide Up
   466
   467 0A4B 60				rts 
   468 					
   469 				;-----------------
   470 					
   471 0A4C			DUMB_set_effect_cmd_2xy 			; Pitch Slide Down
   472
   473 0A4C 60				rts 
   474 					
   475 				;-----------------
   476 					
   477 0A4D			DUMB_set_effect_cmd_3xy 			; Portamento 
   478
   479 0A4D 60				rts 
   480 					
   481 				;-----------------
   482 					
   483 0A4E			DUMB_set_effect_cmd_4xy 			; Vibrato 
   484 0A4E 98				tya 
   485 0A4F 9D D5 17			sta CMD_VIBRATO,x			; save the Vibrato parameter to fetch it when needed
   486 0A52 B9 8F 17			lda vibtabbeg,y				; then get the initial Vibrato offset from the table 
   487 0A55 9D D9 17			sta CMD_VIBOFFSET,x			; and overwrite the previous value using it 
   488 0A58 60				rts 
   489 					
   490 				;-----------------
   491 					
   492 0A59			DUMB_set_effect_cmd_5xy 			; Set Distortion $0Y 
   493 0A59 98				tya 
   494 0A5A 29 0E			and #$0E 				; ignore Bit 0 
   495 0A5C 9D CD 17			sta CMD_DISTORTION,x 			; overwrite the Distortion used for this channel 
   496 0A5F 60				rts 
   497
   498 				;-----------------
   499
   500 0A60			DUMB_set_effect_cmd_6xy				; Set Autofilter Offset $XY 
   501
   502 0A60 60				rts
   503 					
   504 				;-----------------
   505 					
   506 0A61			DUMB_set_effect_cmd_7xy 			; Tremolo 
   507
   508 0A61 60				rts 
   509 					
   510 				;-----------------
   511 					
   512 0A62			DUMB_set_effect_cmd_8xy 			; Set AUDCTL (TODO: Add checks to only let valid channels use specific modes) 
   513 0A62 98				tya 
   514 0A63 9D D1 17			sta CMD_AUDCTL,x 
   515 0A66 60				rts 
   516 					
   517 				;-----------------
   518 					
   519 0A67			DUMB_set_effect_cmd_9xy 			; Finetune $XY 
   520 0A67 98				tya 
   521 0A68 9D E5 17			sta CMD_FINETUNE,x
   522 0A6B 60				rts 
   523 					
   524 				;-----------------
   525 					
   526 0A6C			DUMB_set_effect_cmd_Axy 			; Volume Fade 
   527
   528 0A6C 60				rts 
   529 					
   530 				;-----------------
   531 					
   532 0A6D			DUMB_set_effect_cmd_Bxy 			; Go to Songline $XY 
   533 0A6D AD 31 1F 85 8A AD + 	mwa SONGTBL SONGIDX			; re-initialise Songline Address Table first 
   534 0A77 98				tya
   535 0A78 85 80			sta SONGNUM				; new Songline destination set 
   536 0A7A 0A				asl @ 
   537 0A7B 90 02			bcc no_inc_1 
   538 0A7D E6 8B			inc SONGIDX+1
   539 0A7F			no_inc_1
   540 0A7F 0A				asl @
   541 0A80 90 02			bcc no_inc_2 
   542 0A82 E6 8B			inc SONGIDX+1
   543 0A84			no_inc_2
   544 0A84 65 8A			adc SONGIDX 
   545 0A86 85 8A			sta SONGIDX 
   546 0A88 90 02			bcc no_inc_3
   547 0A8A E6 8B			inc SONGIDX+1
   548 0A8C			no_inc_3 
   549 0A8C A9 01			lda #1 
   550 0A8E 85 82			sta ROWNUM				; next row will be 0, triggering the next songline
   551 0A90 60				rts 
   552 					
   553 				;-----------------
   554 					
   555 0A91			DUMB_set_effect_cmd_Cxy 			; UNDEFINED 
   556
   557 0A91 60				rts 
   558 					
   559 				;-----------------
   560 					
   561 0A92			DUMB_set_effect_cmd_Dxy 			; End Pattern 
   562 0A92 A9 01			lda #1 
   563 0A94 85 82			sta ROWNUM				; next row will be 0, triggering the next songline
   564 0A96 60				rts 
   565 					
   566 				;-----------------
   567 					
   568 0A97			DUMB_set_effect_cmd_Exy 			; UNDEFINED 
   569
   570 0A97 60				rts 
   571 					
   572 				;-----------------
   573 					
   574 0A98			DUMB_set_effect_cmd_Fxy 			; Set Speed $XY 
   575 0A98 84 84			sty TIMER				; reset the speed timer with its value before decay
   576 0A9A 84 85			sty SPEED				; overwrite the speed value currently set 
   577 0A9C 60				rts 
   578
   579 				;-----------------
   580
   581 				;--------------------------------------------------------------------------------------------------; 
   582
   583 				;* This subroutine will assign the correct tuning tables to each channels based on the Distortion, Command and AUDCTL bits 
   584
   585 0A9D			DUMB_play_buffer_registers 
   586 0A9D AD D1 17			lda CMD_AUDCTL+0			; merge the Channel AUDCTL values for the actual AUDCTL register 
   587 0AA0 0D D2 17			ora CMD_AUDCTL+1
   588 0AA3 0D D3 17			ora CMD_AUDCTL+2
   589 0AA6 0D D4 17			ora CMD_AUDCTL+3
   590 0AA9 85 A8			sta SDW_AUDCTL+0
   591 0AAB A2 03			ldx #3					; once again, start from the channel 4, Y is still free to use here! 
   592 0AAD			DUMB_play_buffer_registers_continue 
   593 0AAD BD BD 17			lda CMD_NOTE,x 				; is there a note intended to be played for this channel?
   594 0AB0 10 04			bpl DUMB_play_buffer_process_audc	; if the value is positive, continue below channels jumptable process  
   595 0AB2			DUMB_play_buffer_registers_next 
   596 0AB2 CA				dex 					; decrement the channel index 
   597 0AB3 10 F8			bpl DUMB_play_buffer_registers_continue	; continue until all channels were processed 
   598 0AB5 60				rts 					; finished, all the POKEY registers were updated 
   599
   600 				;-----------------
   601
   602 0AB6			DUMB_play_buffer_process_audc
   603 0AB6 BC CD 17			ldy CMD_DISTORTION,x			; current POKEY distortion set to be used 
   604 0AB9 B9 7F 17			lda DISTORTIONS,y			; get the Distortion using the value offset from the command as well 
   605 0ABC 15 9C			ora VAR_VOLUME,x			; apply the Pattern Volume directly to it 
   606 0ABE 95 A4			sta SDW_AUDC,x 				; write directly to the AUDC Byte
   607 0AC0 8A				txa					; transfer X to Accumulator 
   608 0AC1 0A				asl @					; make a quick and dirty jump table allowing a 2 bytes index 
   609 0AC2 8D C6 0A			sta d_index+1				; branch will match the AUDCTL stuff relative to the channel being used! 
   610 0AC5 D0 FE		d_index	bne * 
   611 0AC7 90 06			bcc DUMB_play_buffer_registers_ch1
   612 0AC9 90 2A			bcc DUMB_play_buffer_registers_ch2
   613 0ACB 90 51			bcc DUMB_play_buffer_registers_ch3
   614 0ACD 90 6A			bcc DUMB_play_buffer_registers_ch4
   615
   616 				;-----------------
   617
   618 0ACF			DUMB_play_buffer_registers_ch1
   619 0ACF BD 3D 18			lda instr_autoflag,x			; get the instrument Autoflag value 
   620 0AD2 29 40			and #%01000000 
   621 0AD4 F0 06			beq DUMB_play_buffer_registers_ch1_a	; if the Auto179mhz flag is not set, ignore this step 
   622 0AD6 A5 A8			lda SDW_AUDCTL+0 			; get the current AUDCTL value from memory 
   623 0AD8 09 40			ora #$40				; apply the value for 1.79mhz in CH1 to it 
   624 0ADA 85 A8			sta SDW_AUDCTL+0			; overwrite the AUDCTL with the updated value 
   625 				;	bne DUMB_play_buffer_process_audf_179mhz
   626 					
   627 0ADC			DUMB_play_buffer_registers_ch1_a 
   628 0ADC BD 3D 18			lda instr_autoflag,x			; get the instrument Autoflag value 
   629 0ADF 29 20			and #%00100000 
   630 0AE1 F0 06			beq DUMB_play_buffer_registers_ch1_b	; if the Autofilter flag is not set, ignore this step 
   631 0AE3 A5 A8			lda SDW_AUDCTL+0 			; get the current AUDCTL value from memory 
   632 0AE5 09 04			ora #$04				; apply the value for Filter in CH1 to it 
   633 0AE7 85 A8			sta SDW_AUDCTL+0			; overwrite the AUDCTL with the updated value 
   634
   635 0AE9			DUMB_play_buffer_registers_ch1_b
   636 0AE9 A5 A8			lda SDW_AUDCTL+0 			; get the current AUDCTL value from memory 
   637 0AEB 29 41			and #$41				; 1.79mhz and/or 15khz mode in CH1? 
   638 0AED F0 7F			beq DUMB_play_buffer_process_audf	; if the value is 0, it's neither of them 
   639 0AEF 29 40			and #$40				; 1.79mhz mode in CH1? 
   640 0AF1 F0 70			beq DUMB_play_buffer_process_audf_15khz	; if the value is 0, it's 15khz mode 
   641 0AF3 D0 63			bne DUMB_play_buffer_process_audf_179mhz; otherwise it's 1.79mhz mode 
   642
   643 				;-----------------
   644
   645 0AF5			DUMB_play_buffer_registers_ch2
   646 0AF5 BD 3D 18			lda instr_autoflag,x			; get the instrument Autoflag value 
   647 0AF8 10 06			bpl DUMB_play_buffer_registers_ch2_a	; if the Auto16-bit flag is not set, ignore this step 
   648 0AFA A5 A8			lda SDW_AUDCTL+0 			; get the current AUDCTL value from memory 
   649 0AFC 09 50			ora #$50				; apply the value for 16-bit in CH2 to it 
   650 0AFE 85 A8			sta SDW_AUDCTL+0			; overwrite the AUDCTL with the updated value 	
   651 				;	jmp DUMB_play_buffer_process_audf_16bit	; finish with the 16-bit procedure without further checks! 
   652
   653 0B00			DUMB_play_buffer_registers_ch2_a 
   654 0B00 BD 3D 18			lda instr_autoflag,x			; get the instrument Autoflag value 
   655 0B03 29 20			and #%00100000 
   656 0B05 F0 06			beq DUMB_play_buffer_registers_ch2_b	; if the Autofilter flag is not set, ignore this step 
   657 0B07 A5 A8			lda SDW_AUDCTL+0 			; get the current AUDCTL value from memory 
   658 0B09 09 02			ora #$02				; apply the value for Filter in CH2 to it 
   659 0B0B 85 A8			sta SDW_AUDCTL+0			; overwrite the AUDCTL with the updated value 
   660
   661 0B0D			DUMB_play_buffer_registers_ch2_b
   662 0B0D A5 A8			lda SDW_AUDCTL+0 			; get the current AUDCTL value from memory 
   663 0B0F 29 51			and #$51				; 16-bit and/or 15khz mode in CH2? 
   664 0B11 F0 5B			beq DUMB_play_buffer_process_audf	; if the value is 0, it's neither of them 
   665 0B13 29 50			and #$50				; 16-bit mode in CH2? 
   666 0B15 F0 4C			beq DUMB_play_buffer_process_audf_15khz	; if the value is 0, it's 15khz mode 
   667 0B17 C9 50			cmp #$50				; is it REALLY 16-bit mode in CH2? 
   668 0B19 90 53			bcc DUMB_play_buffer_process_audf	; if the value is lower, it is NOT! 
   669 0B1B 4C 9C 0B			jmp DUMB_play_buffer_process_audf_16bit	; otherwise, finish with the 16-bit procedure 
   670
   671 				;-----------------
   672
   673 0B1E			DUMB_play_buffer_registers_ch3
   674 0B1E BD 3D 18			lda instr_autoflag,x			; get the instrument Autoflag value 
   675 0B21 29 40			and #%01000000 
   676 0B23 F0 08			beq DUMB_play_buffer_registers_ch3_a	; if the Auto179mhz flag is not set, ignore this step 
   677 0B25 A5 A8			lda SDW_AUDCTL+0 			; get the current AUDCTL value from memory 
   678 0B27 09 20			ora #$20				; apply the value for 1.79mhz in CH3 to it 
   679 0B29 85 A8			sta SDW_AUDCTL+0			; overwrite the AUDCTL with the updated value 
   680 0B2B D0 2B			bne DUMB_play_buffer_process_audf_179mhz
   681 0B2D			DUMB_play_buffer_registers_ch3_a 
   682 0B2D A5 A8			lda SDW_AUDCTL+0 			; get the current AUDCTL value from memory 
   683 0B2F 29 21			and #$21				; 1.79mhz and/or 15khz mode in CH3? 
   684 0B31 F0 3B			beq DUMB_play_buffer_process_audf	; if the value is 0, it's neither of them 
   685 0B33 29 20			and #$20				; 1.79mhz mode in CH3? 
   686 0B35 F0 2C			beq DUMB_play_buffer_process_audf_15khz	; if the value is 0, it's 15khz mode 
   687 0B37 D0 1F			bne DUMB_play_buffer_process_audf_179mhz; otherwise it's 1.79mhz mode 
   688
   689 				;-----------------
   690
   691 0B39			DUMB_play_buffer_registers_ch4
   692 0B39 BD 3D 18			lda instr_autoflag,x			; get the instrument Autoflag value 
   693 0B3C 10 09			bpl DUMB_play_buffer_registers_ch4_a	; if the Auto16-bit flag is not set, ignore this step 
   694 0B3E A5 A8			lda SDW_AUDCTL+0 			; get the current AUDCTL value from memory 
   695 0B40 09 28			ora #$28				; apply the value for 16-bit in CH4 to it 
   696 0B42 85 A8			sta SDW_AUDCTL+0			; overwrite the AUDCTL with the updated value 	
   697 0B44 4C 9C 0B			jmp DUMB_play_buffer_process_audf_16bit	; finish with the 16-bit procedure without further checks!
   698 0B47			DUMB_play_buffer_registers_ch4_a
   699 0B47 A5 A8			lda SDW_AUDCTL+0 			; get the current AUDCTL value from memory 
   700 0B49 29 29			and #$29				; 16-bit and/or 15khz mode in CH4? 
   701 0B4B F0 21			beq DUMB_play_buffer_process_audf	; if the value is 0, it's neither of them 
   702 0B4D 29 28			and #$28				; 16-bit mode in CH4? 
   703 0B4F F0 12			beq DUMB_play_buffer_process_audf_15khz	; if the value is 0, it's 15khz mode 
   704 0B51 C9 28			cmp #$28				; is it REALLY 16-bit mode in CH4? 
   705 0B53 90 19			bcc DUMB_play_buffer_process_audf	; if the value is lower, it is NOT! 
   706 0B55 4C 9C 0B			jmp DUMB_play_buffer_process_audf_16bit	; otherwise, finish with the 16-bit procedure 
   707
   708 				;-----------------
   709
   710 				;* Final AUDF output done here
   711
   712 0B58			DUMB_play_buffer_process_audf_179mhz 		; 1.79mhz mode  
   713 0B58 B9 5F 17			lda FREQ179MHZ,y			; get the lookup table LSB assigned to the Distortion 
   714 0B5B 85 92			sta FREQIDX 				; set the LSB to use for the index 
   715 0B5D C8				iny 
   716 0B5E B9 5F 17			lda FREQ179MHZ,y			; get the lookup table MSB assigned to the Distortion 
   717 0B61 D0 14			bne DUMB_play_buffer_process_audf_a	; unconditional 
   718 0B63			DUMB_play_buffer_process_audf_15khz 		; 15khz mode 
   719 0B63 B9 4F 17			lda FREQ15KHZ,y				; get the lookup table LSB assigned to the Distortion 
   720 0B66 85 92			sta FREQIDX 				; set the LSB to use for the index 
   721 0B68 C8				iny 
   722 0B69 B9 4F 17			lda FREQ15KHZ,y				; get the lookup table MSB assigned to the Distortion 
   723 0B6C D0 09			bne DUMB_play_buffer_process_audf_a	; unconditional 
   724 0B6E			DUMB_play_buffer_process_audf 			; 64khz mode, default 
   725 0B6E B9 3F 17			lda FREQ64KHZ,y				; get the lookup table LSB assigned to the Distortion 
   726 0B71 85 92			sta FREQIDX 				; set the LSB to use for the index 
   727 0B73 C8				iny 
   728 0B74 B9 3F 17			lda FREQ64KHZ,y				; get the lookup table MSB assigned to the Distortion 
   729 0B77			DUMB_play_buffer_process_audf_a
   730 0B77 85 93			sta FREQIDX+1				; set the MSB to use for the index 
   731
   732 0B79			DUMB_play_buffer_process_audf_note
   733 0B79 B4 94			ldy VAR_NOTE,x 				; fetch the note currently in memory 
   734 0B7B 30 1C			bmi DUMB_play_buffer_process_audf_done_a
   735 0B7D B1 92			lda (FREQIDX),y 			; get the note byte from the tuning table 
   736 0B7F B4 98			ldy VAR_FREQ,x				; get the detune offset from memory, and branch depending on the sign it uses
   737 0B81 30 09			bmi DUMB_subtract_freq			; it's a negative value to process, ranging between #$80 and #$FF 
   738
   739 0B83			DUMB_add_freq
   740 0B83 18 75 98			add VAR_FREQ,x				; add the detune offset directly to it 
   741 0B86 90 0F			bcc DUMB_play_buffer_process_audf_done	; if the value did not overflow, there is nothing else to do 
   742 0B88 A9 FF			lda #$FF 				; else, use #$FF as the maximum value 
   743 0B8A B0 0B			bcs DUMB_play_buffer_process_audf_done	; unconditional 
   744 					
   745 0B8C			DUMB_subtract_freq  
   746 0B8C 85 88			sta TMP0				; for reference purpose after the addition 
   747 0B8E 18 75 98			add VAR_FREQ,x				; add the detune offset directly to it 
   748 0B91 C5 88			cmp TMP0 				; compare to the previous value just in case 
   749 0B93 90 02			bcc DUMB_play_buffer_process_audf_done	; if the value did not overflow, there is nothing else to do
   750 0B95 A9 00			lda #0	 				; else, use #0 as the maximum value 
   751 					
   752 0B97			DUMB_play_buffer_process_audf_done
   753 0B97 95 A0			sta SDW_AUDF,x 				; write directly to the AUDF Byte 
   754
   755 0B99			DUMB_play_buffer_process_audf_done_a
   756 0B99 4C B2 0A			jmp DUMB_play_buffer_registers_next 	; once this is done, process the next channel 
   757
   758 				;-----------------
   759 					
   760 				;* Final AUDF output done here (16-bit) 
   761
   762 0B9C			DUMB_play_buffer_process_audf_16bit 
   763 0B9C B9 6F 17			lda FREQ16BIT,y				; get the lookup table LSB assigned to the Distortion 
   764 0B9F 85 92			sta FREQIDX 				; set the LSB to use for the index 
   765 0BA1 C8				iny 
   766 0BA2 B9 6F 17			lda FREQ16BIT,y				; get the lookup table MSB assigned to the Distortion 
   767 0BA5 85 93			sta FREQIDX+1				; set the MSB to use for the index
   768 0BA7 B4 94			ldy VAR_NOTE,x 				; fetch the note currently in memory 
   769 0BA9 B1 92			lda (FREQIDX),y 			; get the note byte from the tuning table 
   770 0BAB 95 A0			sta SDW_AUDF,x 				; write the 16-bit MSB to the AUDF early 
   771 0BAD A5 92			lda FREQIDX 				; get the indirect address LSB
   772 0BAF 69 60			adc #96					; the 16-bit MSB table is always 96 bytes away from the 16-bit LSB table
   773 0BB1 85 92			sta FREQIDX 				; by adding 96 to the indirect address, it will be correctly offset 
   774 0BB3 A5 93			lda FREQIDX+1				; get the indirect address MSB 
   775 0BB5 69 00			adc #0					; carry will be added automatically to adjust the address MSB 
   776 0BB7 85 93			sta FREQIDX+1				; the indirect address MSB is now overwritten the same way 
   777 0BB9 B1 92			lda (FREQIDX),y 			; get the note byte from the tuning table 
   778 0BBB B4 98			ldy VAR_FREQ,x				; get the detune offset from memory, and branch depending on the sign it uses
   779 0BBD 30 09			bmi DUMB_subtract_freq_16bit		; it's a negative value to process, ranging between #$80 and #$FF 
   780
   781 0BBF			DUMB_add_freq_16bit
   782 0BBF 18 75 98			add VAR_FREQ,x				; add the detune offset directly to it 
   783 0BC2 90 0F			bcc DUMB_audf_16bit_done		; if the value did not overflow, there is nothing else to do 
   784 0BC4 F6 A0			inc SDW_AUDF,x				; else, increment the 16-bit MSB by 1 
   785 0BC6 B0 0B			bcs DUMB_audf_16bit_done		; unconditional 
   786 					
   787 0BC8			DUMB_subtract_freq_16bit  
   788 0BC8 85 88			sta TMP0				; for reference purpose after the addition 
   789 0BCA 18 75 98			add VAR_FREQ,x				; add the detune offset directly to it 
   790 0BCD C5 88			cmp TMP0 				; compare to the previous value just in case 
   791 0BCF 90 02			bcc DUMB_audf_16bit_done		; if the value did not overflow, there is nothing else to do
   792 0BD1 D6 A0			dec SDW_AUDF,x				; else, decrement the 16-bit MSB by 1 
   793
   794 0BD3			DUMB_audf_16bit_done 
   795 0BD3 CA				dex 					; dex early! 
   796 0BD4 95 A0			sta SDW_AUDF,x 				; write the 16-bit LSB to the AUDF directly  
   797 0BD6 A9 00			lda #0 
   798 0BD8 95 A4			sta SDW_AUDC,x				; since we're in 16-bit mode, the next channel is muted 
   799 0BDA 4C B2 0A			jmp DUMB_play_buffer_registers_next 	; once this is done, process the next channel 
   800
   801 				;-----------------
   802
   803 				;--------------------------------------------------------------------------------------------------; 
   804
   805 				;* Instrument initialisation and playback routine
   806 				;* This was previously based on the original RMT Instrument routine, but this is no longer the case 
   807 				;* No code was borrowed for this attempt, only the design is loosely inspired by the Famitracker Instrument Structure
   808 				;* The routine itself however is made of original code written from scratch, which is also still work in progress 
   809
   810 0BDD			DUMB_process_instrument 
   811 0BDD BD C1 17			lda CMD_INSTRUMENT,x 			; is there an Instrument already used in the current Channel? 
   812 0BE0 10 22			bpl DUMB_process_instrument_immediate	; if yes, process its data immediately 
   813 0BE2 29 7F			and #INSTRESET				; else, clear the bit used to define the request for Instrument Initialisation 
   814 0BE4 9D C1 17			sta CMD_INSTRUMENT,x			; then, overwrite the value currently in memory with this one 
   815 0BE7 A9 00			lda #0 					; #0 will reset variables, except for the Envelope/Table offsets, managed differently 
   816 0BE9 9D FD 17			sta instr_envelope_flag,x		; reset the Volume Envelope flag 
   817 0BEC 9D 09 18			sta instr_distaudctl_flag,x		; reset the Distortion and AUDCTL Envelope flag 
   818 0BEF 9D 15 18			sta instr_notes_tbl_flag,x		; reset the Notes Table flag 
   819 0BF2 9D 21 18			sta instr_freqs_tbl_flag,x 		; reset the Freqs Table flag 
   820 0BF5 9D 2D 18			sta instr_cmd_flag,x			; reset the Commands Table flag 
   821 0BF8 9D 41 18			sta instr_release,x 			; the Release flag should also be reset when a new Instrument is used 
   822 0BFB 9D 35 18			sta instr_tablenote,x 			; reset the Note Table variable 
   823 0BFE 9D 39 18			sta instr_tablefreq,x 			; reset the Freq Table variable 
   824 0C01 BD C1 17			lda CMD_INSTRUMENT,x 			; the instrument is now ready to use, but first, make sure to load its value again 
   825 0C04			DUMB_process_instrument_immediate  
   826 0C04 0A				asl @ 					; multiply the value by 2 to get the correct Instrument Address Table offset 
   827 0C05 A8				tay 					; copy the value to Y for the next step 
   828 0C06 B9 9F 1F			lda INSTTBL,y 				; get the Instrument Address LSB 
   829 0C09 85 90			sta INSIDX				; write it to the Instrument Index LSB 
   830 0C0B C8				iny 
   831 0C0C B9 9F 1F			lda INSTTBL,y 				; get the Instrument Address MSB 
   832 0C0F 85 91			sta INSIDX+1 				; write it to the Instrument Index MSB 
   833
   834 				;-----------------
   835
   836 				;* Process the Volume Envelope 
   837
   838 0C11			DUMB_process_volume_envelope 
   839 0C11 A0 00			ldy #0 					; Y = 0 
   840 0C13 B1 90			lda (INSIDX),y 				; Instrument Volume Envelope Pointer 
   841 0C15 30 6D			bmi DUMB_process_volume_envelope_done	; if the bit 7 is set, there is no Envelope, skip this part 
   842 0C17 0A				asl @					; multiply by 2 for the address offset 
   843 0C18 A8				tay 
   844 0C19 B9 B5 1F			lda INSTENV,y 				; get the Volume Envelope address 
   845 0C1C 85 8C			sta PTNIDX 				; and write it to the Pattern Index Indirect address to get actual data 
   846 0C1E C8				iny 
   847 0C1F B9 B5 1F			lda INSTENV,y
   848 0C22 85 8D			sta PTNIDX+1 
   849
   850 0C24			DUMB_process_volume_envelope_start 
   851 0C24 BC FD 17			ldy instr_envelope_flag,x 
   852 0C27 D0 16			bne DUMB_process_volume_envelope_sustain; if Y isn't 0, it's already initialised  
   853 0C29 A9 04			lda #4 					; 4 bytes are used to set up Envelopes and Tables, this value is a constant  
   854 0C2B 9D F9 17			sta instr_envelope_idx,x		; initial Envelope offset, for the Start offset 
   855 0C2E B1 8C			lda (PTNIDX),y				; verify the Envelope parameters first thing first 
   856 0C30 9D 01 18			sta instr_envelope_mode,x		; save this variable for later use if needed while we're here 
   857 0C33 10 04			bpl DUMB_process_volume_envelope_good 	; a positive value means there is also a Sustain offset to set up 
   858 0C35 A0 03			ldy #3 					; otherwise, just get the Envelope End offset position 
   859 0C37 D0 25			bne DUMB_process_volume_envelope_not_sus; there is no sustain, hijack the Release branch to finish setting this up 
   860
   861 0C39			DUMB_process_volume_envelope_good
   862 0C39 A9 02			lda #2					; this will be used for the Envelope End offset 
   863 0C3B 9D FD 17			sta instr_envelope_flag,x 		; initial Envelope flag, for the Sustain offset 
   864 0C3E A8				tay 					; overwrite Y to make sure it's using the same offset 
   865
   866 0C3F			DUMB_process_volume_envelope_sustain 
   867 0C3F BD 01 18			lda instr_envelope_mode,x		; is there a Sustain and/or Release to use? 
   868 0C42 30 1E			bmi DUMB_process_volume_envelope_end	; if the value is negative, there is no Sustain, skip ahead directly 
   869 0C44 BD 41 18			lda instr_release,x			; is the Release flag set? Sustain will be skipped in this case 
   870 0C47 D0 09			bne DUMB_process_volume_envelope_release; if the value is not 0, it is most likely set to Release  
   871 0C49 B1 8C			lda (PTNIDX),y 				; get the Envelope Sustain offset for its End position 
   872 0C4B DD F9 17			cmp instr_envelope_idx,x 		; compare to the Envelope offset position currently in use 
   873 0C4E F0 1B			beq DUMB_process_volume_envelope_offset	; if the value is equal, the End position was reached 
   874 0C50 B0 1F			bcs DUMB_process_volume_envelope_fetch	; else, the End position was not reached yet, it couldn't be overshot 
   875 					
   876 0C52			DUMB_process_volume_envelope_release 
   877 0C52 C0 03			cpy #3 					; was Release initialised already? 
   878 0C54 B0 0C			bcs DUMB_process_volume_envelope_end	; if the value is equal or above, it already was, continue 
   879 0C56 A0 02			ldy #2					; else, get the Release Start offset position into Y 
   880 0C58 B1 8C			lda (PTNIDX),y 				; get the Start position for the Release offset 
   881 0C5A 9D F9 17			sta instr_envelope_idx,x 		; update the Envelope offset position with this value 
   882 0C5D C8				iny					; increment Y to be on the correct offset 
   883
   884 0C5E			DUMB_process_volume_envelope_not_sus
   885 0C5E 98				tya 					; then pass it to the Accumulator 
   886 0C5F 9D FD 17			sta instr_envelope_flag,x 		; update the Envelope flag for the Envelope End offset  	
   887 					
   888 0C62			DUMB_process_volume_envelope_end
   889 0C62 B1 8C			lda (PTNIDX),y 				; get the Envelope Release offset for either its Start position
   890 0C64 DD F9 17			cmp instr_envelope_idx,x 		; compare to the Envelope offset position currently in use 
   891 0C67 F0 1B			beq DUMB_process_volume_envelope_done	; if the value is equal, the End position was reached 
   892 0C69 B0 06			bcs DUMB_process_volume_envelope_fetch	; else, the End position was not reached yet, it couldn't be overshot 
   893
   894 0C6B			DUMB_process_volume_envelope_offset 	
   895 0C6B 88				dey 					; decrement Y to get the correct Sustain offset 
   896 0C6C B1 8C			lda (PTNIDX),y 				; get the Start position for the Sustain offset 
   897 0C6E 9D F9 17			sta instr_envelope_idx,x 		; update the Envelope offset position with this value 
   898
   899 0C71			DUMB_process_volume_envelope_fetch 
   900 0C71 BC F9 17			ldy instr_envelope_idx,x		; get the Envelope offset position in Y, which will then be used to fetch values to use  
   901 0C74 FE F9 17			inc instr_envelope_idx,x		; increment the Envelope offset position early once this is done
   902
   903 0C77			DUMB_process_volume_envelope_finalise 
   904 0C77 B1 8C			lda (PTNIDX),y 				; get the Volume from the Envelope at current offset position 
   905 0C79 29 0F			and #$0F				; keep only the low 4 bits, just in case there is Stereo Volume data 
   906 0C7B 1D C5 17			ora CMD_VOLUME,x			; merge with the Pattern Volume 
   907 0C7E A8				tay 					; the combined values will be used as an offset in the Volume Level table
   908 0C7F B9 BF 0E			lda volumetab,y				; retrieve the "actual" Volume Level to use using the combined value 
   909 0C82 95 9C			sta VAR_VOLUME,x 			; save to the Volume Variable, this will be output when the Distortion bits are merged 
   910
   911 0C84			DUMB_process_volume_envelope_done 
   912
   913 				;-----------------
   914
   915 				;* Process the Distortion and AUDCTL Envelope 
   916
   917 0C84			DUMB_process_audctl_envelope 
   918 0C84 A0 01			ldy #1 					; Y = 1 
   919 0C86 B1 90			lda (INSIDX),y 				; Instrument Distortion/AUDCTL Envelope Pointer 
   920 0C88 30 6E			bmi DUMB_process_audctl_envelope_done	; if the bit 7 is set, there is no Envelope, skip this part 
   921 0C8A 0A				asl @					; multiply by 2 for the address offset 
   922 0C8B A8				tay 
   923 0C8C B9 C5 1F			lda INSTAUD,y 				; get the Distortion/AUDCTL Envelope address 
   924 0C8F 85 8C			sta PTNIDX 				; and write it to the Pattern Index Indirect address to get actual data 
   925 0C91 C8				iny 
   926 0C92 B9 C5 1F			lda INSTAUD,y
   927 0C95 85 8D			sta PTNIDX+1 
   928
   929 0C97			DUMB_process_audctl_envelope_start 
   930 0C97 BC 09 18			ldy instr_distaudctl_flag,x 
   931 0C9A D0 16			bne DUMB_process_audctl_envelope_sustain; if Y isn't 0, it's already initialised  
   932 0C9C A9 04			lda #4 					; 4 bytes are used to set up Envelopes and Tables, this value is a constant  
   933 0C9E 9D 05 18			sta instr_distaudctl_idx,x		; initial Envelope offset, for the Start offset 
   934 0CA1 B1 8C			lda (PTNIDX),y				; verify the Envelope parameters first thing first 
   935 0CA3 9D 0D 18			sta instr_distaudctl_mode,x		; save this variable for later use if needed while we're here 
   936 0CA6 10 04			bpl DUMB_process_audctl_envelope_good 	; a positive value means there is also a Sustain offset to set up 
   937 0CA8 A0 03			ldy #3 					; otherwise, just get the Envelope End offset position 
   938 0CAA D0 25			bne DUMB_process_audctl_envelope_not_sus; there is no sustain, hijack the Release branch to finish setting this up 
   939
   940 0CAC			DUMB_process_audctl_envelope_good
   941 0CAC A9 02			lda #2					; this will be used for the Envelope End offset 
   942 0CAE 9D 09 18			sta instr_distaudctl_flag,x 		; initial Envelope flag, for the Sustain offset 
   943 0CB1 A8				tay 					; overwrite Y to make sure it's using the same offset 
   944
   945 0CB2			DUMB_process_audctl_envelope_sustain 
   946 0CB2 BD 0D 18			lda instr_distaudctl_mode,x		; is there a Sustain and/or Release to use? 
   947 0CB5 30 1E			bmi DUMB_process_audctl_envelope_end	; if the value is negative, there is no Sustain, skip ahead directly
   948 0CB7 BD 41 18			lda instr_release,x			; is the Release flag set? Sustain will be skipped in this case 
   949 0CBA D0 09			bne DUMB_process_audctl_envelope_release; if the value is not 0, it is most likely set to Release  
   950 0CBC B1 8C			lda (PTNIDX),y 				; get the Envelope Sustain offset for its End position 
   951 0CBE DD 05 18			cmp instr_distaudctl_idx,x 		; compare to the Envelope offset position currently in use 
   952 0CC1 F0 1B			beq DUMB_process_audctl_envelope_offset	; if the value is equal, the End position was reached 
   953 0CC3 B0 1F			bcs DUMB_process_audctl_envelope_fetch	; else, the End position was not reached yet, it couldn't be overshot 
   954 					
   955 0CC5			DUMB_process_audctl_envelope_release 
   956 0CC5 C0 03			cpy #3 					; was Release initialised already? 
   957 0CC7 B0 0C			bcs DUMB_process_audctl_envelope_end	; if the value is equal or above, it already was, continue 
   958 0CC9 A0 02			ldy #2					; else, get the Release Start offset position into Y 
   959 0CCB B1 8C			lda (PTNIDX),y 				; get the Start position for the Release offset 
   960 0CCD 9D 05 18			sta instr_distaudctl_idx,x 		; update the Envelope offset position with this value 
   961 0CD0 C8				iny					; increment Y to be on the correct offset 
   962
   963 0CD1			DUMB_process_audctl_envelope_not_sus
   964 0CD1 98				tya 					; then pass it to the Accumulator 
   965 0CD2 9D 09 18			sta instr_distaudctl_flag,x 		; update the Envelope flag for the Envelope End offset  	
   966 					
   967 0CD5			DUMB_process_audctl_envelope_end
   968 0CD5 B1 8C			lda (PTNIDX),y 				; get the Envelope Release offset for either its Start position
   969 0CD7 DD 05 18			cmp instr_distaudctl_idx,x 		; compare to the Envelope offset position currently in use 
   970 0CDA F0 1C			beq DUMB_process_audctl_envelope_done	; if the value is equal, the End position was reached 
   971 0CDC B0 06			bcs DUMB_process_audctl_envelope_fetch	; else, the End position was not reached yet, it couldn't be overshot 
   972
   973 0CDE			DUMB_process_audctl_envelope_offset 	
   974 0CDE 88				dey 					; decrement Y to get the correct Sustain offset 
   975 0CDF B1 8C			lda (PTNIDX),y 				; get the Start position for the Sustain offset 
   976 0CE1 9D 05 18			sta instr_distaudctl_idx,x 		; update the Envelope offset position with this value 
   977
   978 0CE4			DUMB_process_audctl_envelope_fetch 
   979 0CE4 BC 05 18			ldy instr_distaudctl_idx,x		; get the Envelope offset position in Y, which will then be used to fetch values to use  
   980 0CE7 FE 05 18			inc instr_distaudctl_idx,x		; increment the Envelope offset position early once this is done
   981
   982 0CEA			DUMB_process_audctl_envelope_finalise 
   983 0CEA B1 8C			lda (PTNIDX),y 				; get the Distortion and AUDCTL from the Envelope at current offset position 
   984 0CEC A8				tay 	
   985 0CED 29 F0			and #$F0 				; keep only the high 4 bits, the Auto AUDCTL bits 
   986 0CEF 9D 3D 18			sta instr_autoflag,x			; save for later when the AUDCTL is being processed 
   987 0CF2 98				tya 
   988 0CF3 29 0E			and #$0E 
   989 0CF5 9D CD 17			sta CMD_DISTORTION,x 			; update the Distortion set by Row commands, Instrument parameters take priority! 
   990
   991 0CF8			DUMB_process_audctl_envelope_done
   992 					
   993 				;----------------- 
   994
   995 				;* Process the Notes Table Envelope 
   996
   997 0CF8			DUMB_process_notes_table 
   998 0CF8 A0 02			ldy #2 					; Y = 2 
   999 0CFA B1 90			lda (INSIDX),y 				; Instrument Notes Table Pointer 
  1000 0CFC 30 7C			bmi DUMB_process_notes_table_done	; if the bit 7 is set, there is no Table, skip this part  
  1001 0CFE 0A				asl @					; multiply by 2 for the address offset 
  1002 0CFF A8				tay 
  1003 0D00 B9 D7 1F			lda INSTNOT,y 				; get the Notes Table address 
  1004 0D03 85 8C			sta PTNIDX 				; and write it to the Pattern Index Indirect address to get actual data 
  1005 0D05 C8				iny 
  1006 0D06 B9 D7 1F			lda INSTNOT,y
  1007 0D09 85 8D			sta PTNIDX+1 
  1008
  1009 0D0B			DUMB_process_notes_table_start 
  1010 0D0B BC 15 18			ldy instr_notes_tbl_flag,x 
  1011 0D0E D0 16			bne DUMB_process_notes_table_sustain	; if Y isn't 0, it's already initialised  
  1012 0D10 A9 04			lda #4 					; 4 bytes are used to set up Envelopes and Tables, this value is a constant  
  1013 0D12 9D 11 18			sta instr_notes_tbl_idx,x		; initial Envelope offset, for the Start offset 
  1014 0D15 B1 8C			lda (PTNIDX),y				; verify the Envelope parameters first thing first 
  1015 0D17 9D 19 18			sta instr_notes_tbl_mode,x		; save this variable for later use if needed while we're here 
  1016 0D1A 10 04			bpl DUMB_process_notes_table_good 	; a positive value means there is also a Sustain offset to set up 
  1017 0D1C A0 03			ldy #3 					; otherwise, just get the Envelope End offset position 
  1018 0D1E D0 25			bne DUMB_process_notes_table_not_sus	; there is no sustain, hijack the Release branch to finish setting this up 
  1019
  1020 0D20			DUMB_process_notes_table_good
  1021 0D20 A9 02			lda #2					; this will be used for the Envelope End offset 
  1022 0D22 9D 15 18			sta instr_notes_tbl_flag,x 		; initial Envelope flag, for the Sustain offset 
  1023 0D25 A8				tay 					; overwrite Y to make sure it's using the same offset 
  1024
  1025 0D26			DUMB_process_notes_table_sustain 
  1026 0D26 BD 19 18			lda instr_notes_tbl_mode,x		; is there a Sustain and/or Release to use? 
  1027 0D29 30 1E			bmi DUMB_process_notes_table_end	; if the value is negative, there is no Sustain, skip ahead directly
  1028 0D2B BD 41 18			lda instr_release,x			; is the Release flag set? Sustain will be skipped in this case 
  1029 0D2E D0 09			bne DUMB_process_notes_table_release	; if the value is not 0, it is most likely set to Release  
  1030 0D30 B1 8C			lda (PTNIDX),y 				; get the Envelope Sustain offset for its End position 
  1031 0D32 DD 11 18			cmp instr_notes_tbl_idx,x 		; compare to the Envelope offset position currently in use 
  1032 0D35 F0 27			beq DUMB_process_notes_table_offset	; if the value is equal, the End position was reached 
  1033 0D37 B0 2B			bcs DUMB_process_notes_table_fetch	; else, the End position was not reached yet, it couldn't be overshot 
  1034 					
  1035 0D39			DUMB_process_notes_table_release 
  1036 0D39 C0 03			cpy #3 					; was Release initialised already? 
  1037 0D3B B0 0C			bcs DUMB_process_notes_table_end	; if the value is equal or above, it already was, continue 
  1038 0D3D A0 02			ldy #2					; else, get the Release Start offset position into Y 
  1039 0D3F B1 8C			lda (PTNIDX),y 				; get the Start position for the Release offset 
  1040 0D41 9D 11 18			sta instr_notes_tbl_idx,x 		; update the Envelope offset position with this value 
  1041 0D44 C8				iny					; increment Y to be on the correct offset 
  1042
  1043 0D45			DUMB_process_notes_table_not_sus
  1044 0D45 98				tya 					; then pass it to the Accumulator 
  1045 0D46 9D 15 18			sta instr_notes_tbl_flag,x 		; update the Envelope flag for the Envelope End offset  	
  1046 					
  1047 0D49			DUMB_process_notes_table_end
  1048 0D49 B1 8C			lda (PTNIDX),y 				; get the Envelope Release offset for either its Start position
  1049 0D4B DD 11 18			cmp instr_notes_tbl_idx,x 		; compare to the Envelope offset position currently in use 
  1050 0D4E F0 02			beq DUMB_process_notes_table_clear	; if the value is equal, the End position was reached 
  1051 0D50 B0 12			bcs DUMB_process_notes_table_fetch	; else, the End position was not reached yet, it couldn't be overshot 
  1052 					
  1053 0D52			DUMB_process_notes_table_clear 
  1054 0D52 BD 19 18			lda instr_notes_tbl_mode,x 
  1055 0D55 29 FE			and #%11111110 
  1056 0D57 9D 19 18			sta instr_notes_tbl_mode,x		; the Table Mode won't stick after the envelope ended with this quick and dirty patch 
  1057 0D5A A9 00			lda #0 
  1058 0D5C F0 19			beq DUMB_process_notes_table_cleared	; unconditional, the Table value will also be set to 0 from here 
  1059
  1060 0D5E			DUMB_process_notes_table_offset 	
  1061 0D5E 88				dey 					; decrement Y to get the correct Sustain offset 
  1062 0D5F B1 8C			lda (PTNIDX),y 				; get the Start position for the Sustain offset 
  1063 0D61 9D 11 18			sta instr_notes_tbl_idx,x 		; update the Envelope offset position with this value 
  1064
  1065 0D64			DUMB_process_notes_table_fetch 
  1066 0D64 BC 11 18			ldy instr_notes_tbl_idx,x		; get the Envelope offset position in Y, which will then be used to fetch values to use  
  1067 0D67 FE 11 18			inc instr_notes_tbl_idx,x		; increment the Envelope offset position early once this is done
  1068
  1069 0D6A			DUMB_process_notes_table_finalise 
  1070 0D6A BD 19 18			lda instr_notes_tbl_mode,x 
  1071 0D6D 29 01			and #%00000001 
  1072 0D6F F0 03			beq DUMB_process_notes_table_finalise_a ; addition will be done from #0, which would be the same as a loading the value 
  1073 0D71 BD 35 18			lda instr_tablenote,x 
  1074 					
  1075 0D74			DUMB_process_notes_table_finalise_a	
  1076 0D74 18				clc 
  1077 0D75 71 8C			adc (PTNIDX),y 				; get the Freq from the table at current offset position 
  1078
  1079 0D77			DUMB_process_notes_table_cleared
  1080 0D77 9D 35 18			sta instr_tablenote,x 
  1081
  1082 0D7A			DUMB_process_notes_table_done
  1083
  1084 				;----------------- 
  1085
  1086 				;* Process the Freqs Table Envelope 
  1087 					
  1088 0D7A			DUMB_process_freqs_table 
  1089 0D7A A0 03			ldy #3 					; Y = 3 
  1090 0D7C B1 90			lda (INSIDX),y 				; Instrument Freqs Table Pointer 
  1091 0D7E 30 7C			bmi DUMB_process_freqs_table_done 	; if the bit 7 is set, there is no Table, skip this part 
  1092 0D80 0A				asl @					; multiply by 2 for the address offset 
  1093 0D81 A8				tay 
  1094 0D82 B9 D9 1F			lda INSTFRE,y 				; get the Freqs Table address 
  1095 0D85 85 8C			sta PTNIDX 				; and write it to the Pattern Index Indirect address to get actual data 
  1096 0D87 C8				iny 
  1097 0D88 B9 D9 1F			lda INSTFRE,y
  1098 0D8B 85 8D			sta PTNIDX+1  
  1099
  1100 0D8D			DUMB_process_freqs_table_start 
  1101 0D8D BC 21 18			ldy instr_freqs_tbl_flag,x 
  1102 0D90 D0 16			bne DUMB_process_freqs_table_sustain	; if Y isn't 0, it's already initialised  
  1103 0D92 A9 04			lda #4 					; 4 bytes are used to set up Envelopes and Tables, this value is a constant  
  1104 0D94 9D 1D 18			sta instr_freqs_tbl_idx,x		; initial Envelope offset, for the Start offset 
  1105 0D97 B1 8C			lda (PTNIDX),y				; verify the Envelope parameters first thing first 
  1106 0D99 9D 25 18			sta instr_freqs_tbl_mode,x		; save this variable for later use if needed while we're here 
  1107 0D9C 10 04			bpl DUMB_process_freqs_table_good 	; a positive value means there is also a Sustain offset to set up 
  1108 0D9E A0 03			ldy #3 					; otherwise, just get the Envelope End offset position 
  1109 0DA0 D0 25			bne DUMB_process_freqs_table_not_sus	; there is no sustain, hijack the Release branch to finish setting this up 
  1110
  1111 0DA2			DUMB_process_freqs_table_good
  1112 0DA2 A9 02			lda #2					; this will be used for the Envelope End offset 
  1113 0DA4 9D 21 18			sta instr_freqs_tbl_flag,x 		; initial Envelope flag, for the Sustain offset 
  1114 0DA7 A8				tay 					; overwrite Y to make sure it's using the same offset 
  1115
  1116 0DA8			DUMB_process_freqs_table_sustain 
  1117 0DA8 BD 25 18			lda instr_freqs_tbl_mode,x		; is there a Sustain and/or Release to use? 
  1118 0DAB 30 1E			bmi DUMB_process_freqs_table_end	; if the value is negative, there is no Sustain, skip ahead directly
  1119 0DAD BD 41 18			lda instr_release,x			; is the Release flag set? Sustain will be skipped in this case 
  1120 0DB0 D0 09			bne DUMB_process_freqs_table_release	; if the value is not 0, it is most likely set to Release  
  1121 0DB2 B1 8C			lda (PTNIDX),y 				; get the Envelope Sustain offset for its End position 
  1122 0DB4 DD 1D 18			cmp instr_freqs_tbl_idx,x 		; compare to the Envelope offset position currently in use 
  1123 0DB7 F0 27			beq DUMB_process_freqs_table_offset	; if the value is equal, the End position was reached 
  1124 0DB9 B0 2B			bcs DUMB_process_freqs_table_fetch	; else, the End position was not reached yet, it couldn't be overshot 
  1125 					
  1126 0DBB			DUMB_process_freqs_table_release 
  1127 0DBB C0 03			cpy #3 					; was Release initialised already? 
  1128 0DBD B0 0C			bcs DUMB_process_freqs_table_end	; if the value is equal or above, it already was, continue 
  1129 0DBF A0 02			ldy #2					; else, get the Release Start offset position into Y 
  1130 0DC1 B1 8C			lda (PTNIDX),y 				; get the Start position for the Release offset 
  1131 0DC3 9D 1D 18			sta instr_freqs_tbl_idx,x 		; update the Envelope offset position with this value 
  1132 0DC6 C8				iny					; increment Y to be on the correct offset 
  1133
  1134 0DC7			DUMB_process_freqs_table_not_sus	
  1135 0DC7 98				tya 					; then pass it to the Accumulator 
  1136 0DC8 9D 21 18			sta instr_freqs_tbl_flag,x 		; update the Envelope flag for the Envelope End offset  	
  1137 					
  1138 0DCB			DUMB_process_freqs_table_end
  1139 0DCB B1 8C			lda (PTNIDX),y 				; get the Envelope Release offset for either its Start position
  1140 0DCD DD 1D 18			cmp instr_freqs_tbl_idx,x 		; compare to the Envelope offset position currently in use 
  1141 0DD0 F0 02			beq DUMB_process_freqs_table_clear	; if the value is equal, the End position was reached 
  1142 0DD2 B0 12			bcs DUMB_process_freqs_table_fetch	; else, the End position was not reached yet, it couldn't be overshot 
  1143 					
  1144 0DD4			DUMB_process_freqs_table_clear 
  1145 0DD4 BD 25 18			lda instr_freqs_tbl_mode,x 
  1146 0DD7 29 FE			and #%11111110 
  1147 0DD9 9D 25 18			sta instr_freqs_tbl_mode,x		; the Table Mode won't stick after the envelope ended with this quick and dirty patch 
  1148 0DDC A9 00			lda #0 
  1149 0DDE F0 19			beq DUMB_process_freqs_table_cleared	; unconditional, the Table value will also be set to 0 from here 
  1150
  1151 0DE0			DUMB_process_freqs_table_offset 	
  1152 0DE0 88				dey 					; decrement Y to get the correct Sustain offset 
  1153 0DE1 B1 8C			lda (PTNIDX),y 				; get the Start position for the Sustain offset 
  1154 0DE3 9D 1D 18			sta instr_freqs_tbl_idx,x 		; update the Envelope offset position with this value 
  1155
  1156 0DE6			DUMB_process_freqs_table_fetch 
  1157 0DE6 BC 1D 18			ldy instr_freqs_tbl_idx,x		; get the Envelope offset position in Y, which will then be used to fetch values to use  
  1158 0DE9 FE 1D 18			inc instr_freqs_tbl_idx,x		; increment the Envelope offset position early once this is done
  1159
  1160 0DEC			DUMB_process_freqs_table_finalise 
  1161 0DEC BD 25 18			lda instr_freqs_tbl_mode,x 
  1162 0DEF 29 01			and #%00000001 
  1163 0DF1 F0 03			beq DUMB_process_freqs_table_finalise_a ; addition will be done from #0, which would be the same as a loading the value 
  1164 0DF3 BD 39 18			lda instr_tablefreq,x 
  1165 					
  1166 0DF6			DUMB_process_freqs_table_finalise_a	
  1167 0DF6 18				clc 
  1168 0DF7 71 8C			adc (PTNIDX),y 				; get the Freq from the table at current offset position 
  1169 					
  1170 0DF9			DUMB_process_freqs_table_cleared
  1171 0DF9 9D 39 18			sta instr_tablefreq,x 
  1172
  1173 0DFC			DUMB_process_freqs_table_done 
  1174
  1175 				;----------------- 
  1176
  1177 				;* Process the Commands Table Envelope 
  1178
  1179 0DFC			DUMB_process_commands_table 
  1180 0DFC A0 04			ldy #4 					; Y = 4 
  1181 0DFE B1 90			lda (INSIDX),y 				; Instrument Commands Table Pointer 
  1182 0E00 10 03			bpl DUMB_process_commands_table_a 
  1183 0E02 4C BE 0E			jmp DUMB_process_commands_table_done	; if the bit 7 is set, there is no Envelope, skip this part 
  1184
  1185 0E05			DUMB_process_commands_table_a
  1186 0E05 0A				asl @					; multiply by 2 for the address offset 
  1187 0E06 A8				tay 
  1188 0E07 B9 E5 1F			lda INSTCMD,y 				; get the Commands Table address 
  1189 0E0A 85 8C			sta PTNIDX 				; and write it to the Pattern Index Indirect address to get actual data 
  1190 0E0C C8				iny 
  1191 0E0D B9 E5 1F			lda INSTCMD,y
  1192 0E10 85 8D			sta PTNIDX+1 
  1193
  1194 0E12			DUMB_process_commands_table_start 
  1195 0E12 BC 2D 18			ldy instr_cmd_flag,x 
  1196 0E15 D0 16			bne DUMB_process_commands_table_sustain	; if Y isn't 0, it's already initialised  
  1197 0E17 A9 04			lda #4 					; 4 bytes are used to set up Envelopes and Tables, this value is a constant  
  1198 0E19 9D 29 18			sta instr_cmd_idx,x			; initial Envelope offset, for the Start offset 
  1199 0E1C B1 8C			lda (PTNIDX),y				; verify the Envelope parameters first thing first 
  1200 0E1E 9D 31 18			sta instr_cmd_mode,x			; save this variable for later use if needed while we're here 
  1201 0E21 10 04			bpl DUMB_process_commands_table_good 	; a positive value means there is also a Sustain offset to set up 
  1202 0E23 A0 03			ldy #3 					; otherwise, just get the Envelope End offset position 
  1203 0E25 D0 25			bne DUMB_process_commands_table_not_sus; there is no sustain, hijack the Release branch to finish setting this up 
  1204
  1205 0E27			DUMB_process_commands_table_good
  1206 0E27 A9 02			lda #2					; this will be used for the Envelope End offset 
  1207 0E29 9D 2D 18			sta instr_cmd_flag,x 			; initial Envelope flag, for the Sustain offset 
  1208 0E2C A8				tay 					; overwrite Y to make sure it's using the same offset 
  1209
  1210 0E2D			DUMB_process_commands_table_sustain 
  1211 0E2D BD 31 18			lda instr_cmd_mode,x			; is there a Sustain and/or Release to use? 
  1212 0E30 30 1E			bmi DUMB_process_commands_table_end	; if the value is negative, there is no Sustain, skip ahead directly 
  1213 0E32 BD 41 18			lda instr_release,x			; is the Release flag set? Sustain will be skipped in this case 
  1214 0E35 D0 09			bne DUMB_process_commands_table_release	; if the value is not 0, it is most likely set to Release  
  1215 0E37 B1 8C			lda (PTNIDX),y 				; get the Envelope Sustain offset for its End position 
  1216 0E39 DD 29 18			cmp instr_cmd_idx,x 			; compare to the Envelope offset position currently in use 
  1217 0E3C F0 1B			beq DUMB_process_commands_table_offset	; if the value is equal, the End position was reached 
  1218 0E3E B0 1F			bcs DUMB_process_commands_table_fetch	; else, the End position was not reached yet, it couldn't be overshot 
  1219 					
  1220 0E40			DUMB_process_commands_table_release 
  1221 0E40 C0 03			cpy #3 					; was Release initialised already? 
  1222 0E42 B0 0C			bcs DUMB_process_commands_table_end	; if the value is equal or above, it already was, continue 
  1223 0E44 A0 02			ldy #2					; else, get the Release Start offset position into Y 
  1224 0E46 B1 8C			lda (PTNIDX),y 				; get the Start position for the Release offset 
  1225 0E48 9D 29 18			sta instr_cmd_idx,x 			; update the Envelope offset position with this value 
  1226 0E4B C8				iny					; increment Y to be on the correct offset 
  1227
  1228 0E4C			DUMB_process_commands_table_not_sus
  1229 0E4C 98				tya 					; then pass it to the Accumulator 
  1230 0E4D 9D 2D 18			sta instr_cmd_flag,x 			; update the Envelope flag for the Envelope End offset  	
  1231 					
  1232 0E50			DUMB_process_commands_table_end
  1233 0E50 B1 8C			lda (PTNIDX),y 				; get the Envelope Release offset for either its Start position
  1234 0E52 DD 29 18			cmp instr_cmd_idx,x 			; compare to the Envelope offset position currently in use 
  1235 0E55 F0 67			beq DUMB_process_commands_table_done	; if the value is equal, the End position was reached 
  1236 0E57 B0 06			bcs DUMB_process_commands_table_fetch	; else, the End position was not reached yet, it couldn't be overshot 
  1237
  1238 0E59			DUMB_process_commands_table_offset 	
  1239 0E59 88				dey 					; decrement Y to get the correct Sustain offset 
  1240 0E5A B1 8C			lda (PTNIDX),y 				; get the Start position for the Sustain offset 
  1241 0E5C 9D 29 18			sta instr_cmd_idx,x 			; update the Envelope offset position with this value 
  1242
  1243 0E5F			DUMB_process_commands_table_fetch 
  1244 0E5F BC 29 18			ldy instr_cmd_idx,x			; get the Envelope offset position in Y, which will then be used to fetch values to use  
  1245 0E62 FE 29 18			inc instr_cmd_idx,x			; increment the Envelope offset position early once this is done
  1246 0E65 FE 29 18			inc instr_cmd_idx,x			; increment again since there are 2 bytes to process 
  1247
  1248 0E68			DUMB_process_commands_table_finalise  
  1249 0E68 B1 8C			lda (PTNIDX),y 				; get the Command from the Envelope at current offset position 
  1250 0E6A 48				pha 
  1251 0E6B C8				iny 
  1252 0E6C B1 8C			lda (PTNIDX),y 				; get the $XY Parameter from the Envelope at current offset position 
  1253 0E6E A8				tay 
  1254 0E6F 68				pla 
  1255 0E70 F0 46			beq DUMB_process_commands_table_zero
  1256 0E72 30 3D			bmi DUMB_process_commands_table_bit7 
  1257 0E74 85 88			sta TMP0 
  1258 0E76 A9 40			lda #%01000000
  1259 0E78 25 88			and TMP0 
  1260 0E7A D0 33			bne DUMB_process_commands_table_bit6 
  1261 0E7C A9 20			lda #%00100000
  1262 0E7E 25 88			and TMP0 
  1263 0E80 D0 2B			bne DUMB_process_commands_table_bit5
  1264 0E82 A9 10			lda #%00010000
  1265 0E84 25 88			and TMP0 
  1266 0E86 D0 23			bne DUMB_process_commands_table_bit4 
  1267 0E88 A9 08			lda #%00001000
  1268 0E8A 25 88			and TMP0 
  1269 0E8C D0 1B			bne DUMB_process_commands_table_bit3 
  1270 0E8E A9 04			lda #%00000100
  1271 0E90 25 88			and TMP0 
  1272 0E92 D0 13			bne DUMB_process_commands_table_bit2 
  1273 0E94 A9 02			lda #%00000010
  1274 0E96 25 88			and TMP0 
  1275 0E98 D0 08			bne DUMB_process_commands_table_bit1
  1276 0E9A A9 01			lda #%00000001
  1277 0E9C 25 88			and TMP0 
  1278 0E9E F0 1E			beq DUMB_process_commands_table_done	 
  1279 					
  1280 0EA0			DUMB_process_commands_table_bit0
  1281
  1282 0EA0 B0 1C			bcs DUMB_process_commands_table_done 
  1283
  1284 0EA2			DUMB_process_commands_table_bit1  
  1285 0EA2 98				tya 
  1286 0EA3 95 98			sta VAR_FREQ,x 
  1287 0EA5 B0 17			bcs DUMB_process_commands_table_done 
  1288
  1289 0EA7			DUMB_process_commands_table_bit2
  1290
  1291 0EA7 B0 15			bcs DUMB_process_commands_table_done 
  1292
  1293 0EA9			DUMB_process_commands_table_bit3
  1294
  1295 0EA9 B0 13			bcs DUMB_process_commands_table_done 
  1296
  1297 0EAB			DUMB_process_commands_table_bit4
  1298
  1299 0EAB B0 11			bcs DUMB_process_commands_table_done 
  1300
  1301 0EAD			DUMB_process_commands_table_bit5
  1302
  1303 0EAD B0 0F			bcs DUMB_process_commands_table_done 
  1304
  1305 0EAF			DUMB_process_commands_table_bit6
  1306
  1307 0EAF B0 0D			bcs DUMB_process_commands_table_done 
  1308 					
  1309 0EB1			DUMB_process_commands_table_bit7 
  1310 0EB1 98				tya 
  1311 0EB2 95 A0			sta SDW_AUDF,x 
  1312 0EB4 A9 FF			lda #$FF 
  1313 0EB6 30 04			bmi DUMB_process_commands_table_ff		; unconditional 
  1314
  1315 0EB8			DUMB_process_commands_table_zero
  1316 0EB8 98				tya 
  1317 0EB9 18				clc 
  1318 0EBA 75 94			adc VAR_NOTE,x 
  1319
  1320 0EBC			DUMB_process_commands_table_ff 
  1321 0EBC 95 94			sta VAR_NOTE,x
  1322
  1323 0EBE			DUMB_process_commands_table_done 
  1324
  1325 				;-----------------
  1326 					
  1327 0EBE			DUMB_process_instrument_done
  1328 					
  1329 0EBE 60				rts
  1330
  1331 				;-----------------
  1332
  1333 				;--------------------------------------------------------------------------------------------------;
  1334
  1335 				;* Tuning tables could just be dropped here I suppose...
  1336 				;* These were generated using DUMB Soundchip Toolbox with the -bruteforce and -precision 0.0001 parameters 
  1337 				;* Also, the A-4 tuning of 444.8958Hz was used in NTSC, equivalent PAL tables will use 440.8375Hz instead 
  1338
  1339 				;	.align $100				; probably not necessary anymore... 
  1340 0EBF				icl 'DUMB Data.asm'
Source: DUMB Data.asm
     1 				;* It may be possible to reduce this table by half the size it is... 
     2 				;* This was something I did for the older RMT Patch16 code, so the option is still valuable... 
     3
     4 0EBF			volumetab
     5 0EBF 00 00 00 00 00 00 + 	dta $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
     6 0ECF 00 00 00 00 00 00 + 	dta $00,$00,$00,$00,$00,$00,$00,$00,$01,$01,$01,$01,$01,$01,$01,$01
     7 0EDF 00 00 00 00 01 01 + 	dta $00,$00,$00,$00,$01,$01,$01,$01,$01,$01,$01,$01,$02,$02,$02,$02
     8 0EEF 00 00 00 01 01 01 + 	dta $00,$00,$00,$01,$01,$01,$01,$01,$02,$02,$02,$02,$02,$03,$03,$03
     9 0EFF 00 00 01 01 01 01 + 	dta $00,$00,$01,$01,$01,$01,$02,$02,$02,$02,$03,$03,$03,$03,$04,$04
    10 0F0F 00 00 01 01 01 02 + 	dta $00,$00,$01,$01,$01,$02,$02,$02,$03,$03,$03,$04,$04,$04,$05,$05
    11 0F1F 00 00 01 01 02 02 + 	dta $00,$00,$01,$01,$02,$02,$02,$03,$03,$04,$04,$04,$05,$05,$06,$06
    12 0F2F 00 00 01 01 02 02 + 	dta $00,$00,$01,$01,$02,$02,$03,$03,$04,$04,$05,$05,$06,$06,$07,$07
    13 0F3F 00 01 01 02 02 03 + 	dta $00,$01,$01,$02,$02,$03,$03,$04,$04,$05,$05,$06,$06,$07,$07,$08
    14 0F4F 00 01 01 02 02 03 + 	dta $00,$01,$01,$02,$02,$03,$04,$04,$05,$05,$06,$07,$07,$08,$08,$09
    15 0F5F 00 01 01 02 03 03 + 	dta $00,$01,$01,$02,$03,$03,$04,$05,$05,$06,$07,$07,$08,$09,$09,$0A
    16 0F6F 00 01 01 02 03 04 + 	dta $00,$01,$01,$02,$03,$04,$04,$05,$06,$07,$07,$08,$09,$0A,$0A,$0B
    17 0F7F 00 01 02 02 03 04 + 	dta $00,$01,$02,$02,$03,$04,$05,$06,$06,$07,$08,$09,$0A,$0A,$0B,$0C
    18 0F8F 00 01 02 03 03 04 + 	dta $00,$01,$02,$03,$03,$04,$05,$06,$07,$08,$09,$0A,$0A,$0B,$0C,$0D
    19 0F9F 00 01 02 03 04 05 + 	dta $00,$01,$02,$03,$04,$05,$06,$07,$07,$08,$09,$0A,$0B,$0C,$0D,$0E
    20 0FAF 00 01 02 03 04 05 + 	dta $00,$01,$02,$03,$04,$05,$06,$07,$08,$09,$0A,$0B,$0C,$0D,$0E,$0F
    21
    22 				;-----------------
    23
    24 				;--------------------------------------------------------------------------------------------------;
    25
    26 				;* Tuning Tables, used for Distortions based on AUDCTL and Channel Index Number 
    27 				;* TODO: Optimise everything related to lookup better, and find a way to remove redundant data 
    28
    29 				;---------------------------------------------------------------------------------------------------------------------------------------------;
    30 0FBF			DISTORTION_2 
    31 				;---------------------------------------------------------------------------------------------------------------------------------------------;
    32
    33 0FBF			TBL_DIST_2_15KHZ
    34 0FBF 0E 0D 0D 0C 0B 0A + 	dta $0E, $0D, $0D, $0C, $0B, $0A, $0A, $09, $09, $08, $08, $07
    35 0FCB 07 06 06 05 05 05 + 	dta $07, $06, $06, $05, $05, $05, $04, $04, $04, $04, $03, $03
    36 0FD7 03 03 02 02 02 02 + 	dta $03, $03, $02, $02, $02, $02, $02, $02, $01, $01, $01, $01
    37 0FE3 01 01 01 01 01 00 + 	dta $01, $01, $01, $01, $01, $00, $00, $00, $00, $00, $00, $00
    38 0FEF 00 00 00 00 00 00 + 	dta $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
    39 0FFB 00 00 00 00 00 00 + 	dta $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
    40 1007 00 00 00 00 00 00 + 	dta $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
    41 1013 00 00 00 00 00 00 + 	dta $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
    42
    43 101F			TBL_DIST_2_64KHZ
    44 101F 3E 3A 37 33 30 2E + 	dta $3E, $3A, $37, $33, $30, $2E, $2B, $29, $26, $24, $22, $20
    45 102B 1F 1C 1B 19 18 16 + 	dta $1F, $1C, $1B, $19, $18, $16, $15, $14, $13, $12, $10, $10
    46 1037 0F 0E 0D 0C 0B 0B + 	dta $0F, $0E, $0D, $0C, $0B, $0B, $0A, $09, $09, $08, $08, $07
    47 1043 07 06 06 06 05 05 + 	dta $07, $06, $06, $06, $05, $05, $05, $04, $04, $04, $03, $03
    48 104F 03 03 02 02 02 02 + 	dta $03, $03, $02, $02, $02, $02, $02, $02, $01, $01, $01, $01
    49 105B 01 01 01 01 01 00 + 	dta $01, $01, $01, $01, $01, $00, $00, $00, $00, $00, $00, $00
    50 1067 00 00 00 00 00 00 + 	dta $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
    51 1073 00 00 00 00 00 00 + 	dta $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
    52
    53 107F			TBL_DIST_2_179MHZ
    54 107F FF FF FF FF FF FF + 	dta $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF
    55 108B FF FF FF FF FF FF + 	dta $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF
    56 1097 FF FF FF FF FF FF + 	dta $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $F1, $E3
    57 10A3 D6 CA BE B4 A9 A0 + 	dta $D6, $CA, $BE, $B4, $A9, $A0, $96, $8E, $85, $7E, $76, $70
    58 10AF 69 63 5D 58 53 4E + 	dta $69, $63, $5D, $58, $53, $4E, $49, $45, $41, $3D, $39, $36
    59 10BB 33 2F 2D 2A 27 25 + 	dta $33, $2F, $2D, $2A, $27, $25, $23, $20, $1E, $1C, $1A, $19
    60 10C7 17 16 14 13 12 10 + 	dta $17, $16, $14, $13, $12, $10, $0F, $0E, $0D, $0C, $0B, $0A
    61 10D3 0A 09 08 07 07 06 + 	dta $0A, $09, $08, $07, $07, $06, $06, $05, $05, $04, $04, $03
    62
    63 10DF			TBL_DIST_2_16BIT_MSB
    64 10DF 06 06 06 05 05 05 + 	dta $06, $06, $06, $05, $05, $05, $04, $04, $04, $04, $03, $03
    65 10EB 03 03 03 02 02 02 + 	dta $03, $03, $03, $02, $02, $02, $02, $02, $02, $02, $01, $01
    66 10F7 01 01 01 01 01 01 + 	dta $01, $01, $01, $01, $01, $01, $01, $01, $01, $00, $00, $00
    67 1103 00 00 00 00 00 00 + 	dta $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
    68 110F 00 00 00 00 00 00 + 	dta $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
    69 111B 00 00 00 00 00 00 + 	dta $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
    70 1127 00 00 00 00 00 00 + 	dta $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
    71 1133 00 00 00 00 00 00 + 	dta $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
    72 					
    73 113F			TBL_DIST_2_16BIT_LSB
    74 113F CB 69 0C B5 63 15 + 	dta $CB, $69, $0C, $B5, $63, $15, $CC, $86, $45, $07, $CD, $96
    75 114B 62 31 03 D7 AE 87 + 	dta $62, $31, $03, $D7, $AE, $87, $62, $40, $1F, $00, $E3, $C7
    76 1157 AD 95 7E 68 53 40 + 	dta $AD, $95, $7E, $68, $53, $40, $2E, $1C, $0C, $FD, $EE, $E0
    77 1163 D3 C7 BB B1 A6 9D + 	dta $D3, $C7, $BB, $B1, $A6, $9D, $93, $8B, $82, $7B, $73, $6D
    78 116F 66 60 5A 55 50 4B + 	dta $66, $60, $5A, $55, $50, $4B, $46, $42, $3E, $3A, $36, $33
    79 117B 30 2C 2A 27 24 22 + 	dta $30, $2C, $2A, $27, $24, $22, $20, $1D, $1B, $19, $17, $16
    80 1187 14 13 11 10 0F 0D + 	dta $14, $13, $11, $10, $0F, $0D, $0C, $0B, $0A, $09, $08, $07
    81 1193 07 06 05 04 04 03 + 	dta $07, $06, $05, $04, $04, $03, $03, $02, $02, $01, $01, $00
    82
    83 				;---------------------------------------------------------------------------------------------------------------------------------------------;
    84 119F			DISTORTION_4 
    85 				;---------------------------------------------------------------------------------------------------------------------------------------------;
    86 					
    87
    88
    89 				;---------------------------------------------------------------------------------------------------------------------------------------------;
    90 119F			DISTORTION_A 
    91 				;---------------------------------------------------------------------------------------------------------------------------------------------;
    92
    93 119F			TBL_DIST_A_15KHZ
    94 119F FF FF FF FF FF FF + 	dta $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FB
    95 11AB EC DF D2 C7 BB B1 + 	dta $EC, $DF, $D2, $C7, $BB, $B1, $A7, $9D, $95, $8C, $84, $7D
    96 11B7 76 6F 69 63 5D 58 + 	dta $76, $6F, $69, $63, $5D, $58, $53, $4E, $4A, $46, $42, $3E
    97 11C3 3A 37 34 31 2E 2B + 	dta $3A, $37, $34, $31, $2E, $2B, $29, $27, $24, $22, $20, $1E
    98 11CF 1D 1B 19 18 17 15 + 	dta $1D, $1B, $19, $18, $17, $15, $14, $13, $12, $11, $10, $0F
    99 11DB 0E 0D 0C 0B 0B 0A + 	dta $0E, $0D, $0C, $0B, $0B, $0A, $09, $09, $08, $08, $07, $07
   100 11E7 06 06 06 05 05 05 + 	dta $06, $06, $06, $05, $05, $05, $04, $04, $04, $03, $03, $03
   101 11F3 03 03 02 02 02 02 + 	dta $03, $03, $02, $02, $02, $02, $02, $01, $01, $01, $01, $01
   102
   103 11FF			TBL_DIST_A_64KHZ
   104 11FF FF FF FF FF FF FF + 	dta $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF
   105 120B FF FF FF FF FF FF + 	dta $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF
   106 1217 FF FF FF FF FF FF + 	dta $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF
   107 1223 F1 E3 D6 CA BF B4 + 	dta $F1, $E3, $D6, $CA, $BF, $B4, $AA, $A0, $97, $8F, $87, $7F
   108 122F 78 71 6B 65 5F 5A + 	dta $78, $71, $6B, $65, $5F, $5A, $54, $50, $4B, $47, $43, $3F
   109 123B 3B 38 35 32 2F 2C + 	dta $3B, $38, $35, $32, $2F, $2C, $2A, $27, $25, $23, $21, $1F
   110 1247 1D 1C 1A 18 17 16 + 	dta $1D, $1C, $1A, $18, $17, $16, $14, $13, $12, $11, $10, $0F
   111 1253 0E 0D 0C 0C 0B 0A + 	dta $0E, $0D, $0C, $0C, $0B, $0A, $0A, $09, $09, $08, $07, $07
   112
   113 125F			TBL_DIST_A_179MHZ
   114 125F FF FF FF FF FF FF + 	dta $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF
   115 126B FF FF FF FF FF FF + 	dta $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF
   116 1277 FF FF FF FF FF FF + 	dta $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF
   117 1283 FF FF FF FF FF FF + 	dta $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF
   118 128F FF FF FF FF FF FF + 	dta $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF
   119 129B FF FF FF FF FF FF + 	dta $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF
   120 12A7 FF FF FF FF FF FF + 	dta $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF
   121 12B3 FF FF FF FF FF FF + 	dta $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $F7, $E9, $DC
   122 					
   123 12BF			TBL_DIST_A_16BIT_MSB
   124 12BF D3 C7 BC B1 A7 9E + 	dta $D3, $C7, $BC, $B1, $A7, $9E, $95, $8D, $85, $7D, $76, $6F
   125 12CB 69 63 5E 58 53 4F + 	dta $69, $63, $5E, $58, $53, $4F, $4A, $46, $42, $3E, $3B, $37
   126 12D7 34 31 2F 2C 29 27 + 	dta $34, $31, $2F, $2C, $29, $27, $25, $23, $21, $1F, $1D, $1B
   127 12E3 1A 18 17 16 14 13 + 	dta $1A, $18, $17, $16, $14, $13, $12, $11, $10, $0F, $0E, $0D
   128 12EF 0D 0C 0B 0B 0A 09 + 	dta $0D, $0C, $0B, $0B, $0A, $09, $09, $08, $08, $07, $07, $06
   129 12FB 06 06 05 05 05 04 + 	dta $06, $06, $05, $05, $05, $04, $04, $04, $04, $03, $03, $03
   130 1307 03 03 02 02 02 02 + 	dta $03, $03, $02, $02, $02, $02, $02, $02, $02, $01, $01, $01
   131 1313 01 01 01 01 01 01 + 	dta $01, $01, $01, $01, $01, $01, $01, $01, $01, $00, $00, $00
   132 					
   133 131F			TBL_DIST_A_16BIT_LSB
   134 131F 67 89 55 C3 C8 5D + 	dta $67, $89, $55, $C3, $C8, $5D, $7A, $15, $2A, $B0, $A2, $F9
   135 132B B0 C1 27 DE E1 2B + 	dta $B0, $C1, $27, $DE, $E1, $2B, $B9, $87, $91, $D5, $4D, $F9
   136 1337 D4 DD 10 6B ED 92 + 	dta $D4, $DD, $10, $6B, $ED, $92, $59, $40, $45, $67, $A3, $F9
   137 1343 67 EB 85 32 F3 C6 + 	dta $67, $EB, $85, $32, $F3, $C6, $A9, $9D, $9F, $B0, $CE, $F9
   138 134F 30 72 BF 16 76 DF + 	dta $30, $72, $BF, $16, $76, $DF, $51, $CB, $4C, $D4, $64, $F9
   139 135B 94 35 DC 87 37 EC + 	dta $94, $35, $DC, $87, $37, $EC, $A5, $62, $23, $E7, $AE, $79
   140 1367 47 17 EA C0 98 73 + 	dta $47, $17, $EA, $C0, $98, $73, $4F, $2D, $0E, $F0, $D4, $B9
   141 1373 A0 88 72 5D 49 36 + 	dta $A0, $88, $72, $5D, $49, $36, $24, $13, $03, $F4, $E6, $D9
   142
   143 				;---------------------------------------------------------------------------------------------------------------------------------------------;
   144 137F			DISTORTION_C 
   145 				;---------------------------------------------------------------------------------------------------------------------------------------------;
   146
   147 137F			TBL_DIST_C_15KHZ
   148 137F BC B2 A8 9E 96 8D + 	dta $BC, $B2, $A8, $9E, $96, $8D, $85, $7E, $76, $70, $6A, $64
   149 138B 5D 58 53 4E 4B 46 + 	dta $5D, $58, $53, $4E, $4B, $46, $42, $3E, $3A, $37, $34, $32
   150 1397 2E 2B 29 26 25 23 + 	dta $2E, $2B, $29, $26, $25, $23, $21, $1F, $1C, $1B, $1A, $19
   151 13A3 17 15 14 14 12 11 + 	dta $17, $15, $14, $14, $12, $11, $10, $0F, $0F, $0D, $0C, $0C
   152 13AF 0B 0A 0A 0A 08 08 + 	dta $0B, $0A, $0A, $0A, $08, $08, $07, $07, $06, $06, $06, $05
   153 13BB 05 05 05 05 03 03 + 	dta $05, $05, $05, $05, $03, $03, $03, $03, $03, $03, $02, $02
   154 13C7 02 02 02 01 01 01 + 	dta $02, $02, $02, $01, $01, $01, $01, $01, $01, $01, $01, $01
   155 13D3 00 00 00 00 00 00 + 	dta $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
   156
   157 13DF			TBL_DIST_C_64KHZ 
   158 13DF FF F3 E4 D8 CD C0 + 	dta $FF, $F3, $E4, $D8, $CD, $C0, $B5, $AB, $A2, $99, $91, $88
   159 13EB 7F 79 73 6C 66 60 + 	dta $7F, $79, $73, $6C, $66, $60, $5A, $55, $F2, $E6, $D7, $CB
   160 13F7 BF B6 AA A1 98 8F + 	dta $BF, $B6, $AA, $A1, $98, $8F, $89, $80, $7A, $71, $6B, $65
   161 1403 5F 5C 56 50 4D 47 + 	dta $5F, $5C, $56, $50, $4D, $47, $44, $41, $3E, $38, $35, $32
   162 140F 2F 2F 29 29 26 23 + 	dta $2F, $2F, $29, $29, $26, $23, $20, $20, $20, $1A, $1A, $1A
   163 141B 17 17 14 14 11 11 + 	dta $17, $17, $14, $14, $11, $11, $11, $11, $11, $0B, $0B, $0B
   164 1427 0B 0B 0B 08 08 08 + 	dta $0B, $0B, $0B, $08, $08, $08, $08, $08, $08, $05, $05, $05
   165 1433 05 05 05 05 05 05 + 	dta $05, $05, $05, $05, $05, $05, $05, $05, $02, $02, $02, $02
   166
   167 143F			TBL_DIST_C_179MHZ 
   168 143F FF FF FF FF FF FF + 	dta $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF
   169 144B FF FF FF FF FF FF + 	dta $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF
   170 1457 FF FF FF FF FF FF + 	dta $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF
   171 1463 FF FF FF FF FF FF + 	dta $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF
   172 146F FF FF FF FF FF FF + 	dta $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $F9, $EB
   173 147B DE D0 C6 BB AF A5 + 	dta $DE, $D0, $C6, $BB, $AF, $A5, $9A, $93, $8A, $82, $7B, $73
   174 1487 6D 66 61 5A 55 F8 + 	dta $6D, $66, $61, $5A, $55, $F8, $E9, $E0, $D1, $C5, $B9, $AD
   175 1493 A4 9B 95 89 80 7A + 	dta $A4, $9B, $95, $89, $80, $7A, $71, $6E, $68, $62, $5C, $53
   176
   177 149F			TBL_DIST_C_16BIT_MSB
   178 149F 54 4F 4B 47 43 3F + 	dta $54, $4F, $4B, $47, $43, $3F, $3B, $38, $35, $32, $2F, $2C
   179 14AB 2A 27 25 23 21 1F + 	dta $2A, $27, $25, $23, $21, $1F, $1D, $1C, $1A, $19, $17, $16
   180 14B7 15 13 12 11 10 0F + 	dta $15, $13, $12, $11, $10, $0F, $0E, $0E, $0D, $0C, $0B, $0B
   181 14C3 0A 09 09 08 08 07 + 	dta $0A, $09, $09, $08, $08, $07, $07, $07, $06, $06, $05, $05
   182 14CF 05 04 04 04 04 03 + 	dta $05, $04, $04, $04, $04, $03, $03, $03, $03, $03, $02, $02
   183 14DB 02 02 02 02 02 01 + 	dta $02, $02, $02, $02, $02, $01, $01, $01, $01, $01, $01, $01
   184 14E7 01 01 01 01 01 00 + 	dta $01, $01, $01, $01, $01, $00, $00, $00, $00, $00, $00, $00
   185 14F3 00 00 00 00 00 00 + 	dta $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
   186 					
   187 14FF			TBL_DIST_C_16BIT_LSB
   188 14FF 8C CD 50 18 19 53 + 	dta $8C, $CD, $50, $18, $19, $53, $C6, $6C, $3F, $42, $72, $C6
   189 150B 41 E3 A3 87 89 A6 + 	dta $41, $E3, $A3, $87, $89, $A6, $E1, $31, $9C, $1F, $B7, $5E
   190 1517 1D EE CE C0 C1 D1 + 	dta $1D, $EE, $CE, $C0, $C1, $D1, $ED, $15, $4C, $8C, $D8, $2D
   191 1523 8B F2 65 DE 5D E5 + 	dta $8B, $F2, $65, $DE, $5D, $E5, $73, $07, $A1, $41, $E7, $93
   192 152F 42 F7 AF 6A 2B EF + 	dta $42, $F7, $AF, $6A, $2B, $EF, $B6, $80, $4D, $1D, $F0, $C6
   193 153B 9F 78 54 30 12 F4 + 	dta $9F, $78, $54, $30, $12, $F4, $D6, $BE, $A3, $8B, $76, $5E
   194 1547 4C 37 28 13 04 F5 + 	dta $4C, $37, $28, $13, $04, $F5, $E6, $DD, $CE, $C2, $B6, $AA
   195 1553 A1 98 92 86 7D 77 + 	dta $A1, $98, $92, $86, $7D, $77, $6E, $6B, $65, $5F, $59, $50
   196
   197 				;---------------------------------------------------------------------------------------------------------------------------------------------;
   198 155F			DISTORTION_E 
   199 				;---------------------------------------------------------------------------------------------------------------------------------------------;
   200
   201 155F			TBL_DIST_E_15KHZ
   202 155F BC B2 A8 9E 96 8D + 	dta $BC, $B2, $A8, $9E, $96, $8D, $85, $7E, $76, $70, $6A, $64
   203 156B 5D 58 53 4E 4B 46 + 	dta $5D, $58, $53, $4E, $4B, $46, $42, $3E, $3A, $37, $34, $32
   204 1577 2E 2B 29 26 25 23 + 	dta $2E, $2B, $29, $26, $25, $23, $21, $1F, $1C, $1B, $1A, $19
   205 1583 17 15 14 14 12 11 + 	dta $17, $15, $14, $14, $12, $11, $10, $0F, $0F, $0D, $0C, $0C
   206 158F 0B 0A 0A 0A 08 08 + 	dta $0B, $0A, $0A, $0A, $08, $08, $07, $07, $06, $06, $06, $05
   207 159B 05 05 05 05 03 03 + 	dta $05, $05, $05, $05, $03, $03, $03, $03, $03, $03, $02, $02
   208 15A7 02 02 02 01 01 01 + 	dta $02, $02, $02, $01, $01, $01, $01, $01, $01, $01, $01, $01
   209 15B3 00 00 00 00 00 00 + 	dta $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
   210
   211 15BF			TBL_DIST_E_64KHZ
   212 15BF FF F3 E4 D8 CD C0 + 	dta $FF, $F3, $E4, $D8, $CD, $C0, $B5, $AB, $A2, $99, $91, $88
   213 15CB 7F 79 73 6C 66 60 + 	dta $7F, $79, $73, $6C, $66, $60, $5A, $55, $51, $4C, $48, $43
   214 15D7 3F 3C 39 34 33 30 + 	dta $3F, $3C, $39, $34, $33, $30, $2D, $2A, $28, $25, $24, $21
   215 15E3 1F 1E 1C 1B 19 16 + 	dta $1F, $1E, $1C, $1B, $19, $16, $16, $15, $12, $12, $12, $10
   216 15EF 0F 0F 0D 0D 0C 0C + 	dta $0F, $0F, $0D, $0D, $0C, $0C, $0A, $0A, $0A, $0A, $07, $07
   217 15FB 07 07 06 06 06 06 + 	dta $07, $07, $06, $06, $06, $06, $06, $06, $03, $03, $03, $03
   218 1607 03 03 03 03 03 03 + 	dta $03, $03, $03, $03, $03, $03, $03, $03, $01, $01, $01, $01
   219 1613 01 01 01 01 01 01 + 	dta $01, $01, $01, $01, $01, $01, $00, $00, $00, $00, $00, $00
   220
   221 161F			TBL_DIST_E_179MHZ	
   222 161F FF FF FF FF FF FF + 	dta $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF
   223 162B FF FF FF FF FF FF + 	dta $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF
   224 1637 FF FF FF FF FF FF + 	dta $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF
   225 1643 FF FF FF FF FF FF + 	dta $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF
   226 164F FF FF FF FF FF FF + 	dta $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $F9, $EB
   227 165B DE D0 C6 BB AF A5 + 	dta $DE, $D0, $C6, $BB, $AF, $A5, $9A, $93, $8A, $82, $7B, $73
   228 1667 6D 66 61 5A 55 52 + 	dta $6D, $66, $61, $5A, $55, $52, $4B, $48, $43, $3F, $3C, $37
   229 1673 34 31 2D 2B 28 27 + 	dta $34, $31, $2D, $2B, $28, $27, $25, $22, $21, $1E, $1C, $19
   230
   231 167F			TBL_DIST_E_16BIT_MSB
   232 167F 1C 1A 19 17 16 15 + 	dta $1C, $1A, $19, $17, $16, $15, $13, $12, $11, $10, $0F, $0E
   233 168B 0E 0D 0C 0B 0B 0A + 	dta $0E, $0D, $0C, $0B, $0B, $0A, $09, $09, $08, $08, $07, $07
   234 1697 07 06 06 05 05 05 + 	dta $07, $06, $06, $05, $05, $05, $04, $04, $04, $04, $03, $03
   235 16A3 03 03 03 02 02 02 + 	dta $03, $03, $03, $02, $02, $02, $02, $02, $02, $02, $01, $01
   236 16AF 01 01 01 01 01 01 + 	dta $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $00, $00
   237 16BB 00 00 00 00 00 00 + 	dta $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
   238 16C7 00 00 00 00 00 00 + 	dta $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
   239 16D3 00 00 00 00 00 00 + 	dta $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
   240 					
   241 16DF			TBL_DIST_E_16BIT_LSB
   242 16DF 2A 95 15 AD 59 18 + 	dta $2A, $95, $15, $AD, $59, $18, $E9, $CA, $BB, $BC, $CC, $E8
   243 16EB 11 47 87 D3 29 89 + 	dta $11, $47, $87, $D3, $29, $89, $F1, $61, $DA, $5B, $E3, $71
   244 16F7 05 A0 40 E6 91 41 + 	dta $05, $A0, $40, $E6, $91, $41, $F5, $AD, $69, $2A, $EE, $B5
   245 1703 7F 4C 1C EF C5 9D + 	dta $7F, $4C, $1C, $EF, $C5, $9D, $77, $53, $31, $11, $F3, $D7
   246 170F BC A4 8A 74 5F 4B + 	dta $BC, $A4, $8A, $74, $5F, $4B, $38, $26, $15, $05, $F6, $E8
   247 171B DB CD C3 B8 AC A2 + 	dta $DB, $CD, $C3, $B8, $AC, $A2, $97, $90, $87, $7F, $78, $70
   248 1727 6A 63 5E 57 52 4F + 	dta $6A, $63, $5E, $57, $52, $4F, $48, $45, $40, $3C, $39, $34
   249 1733 31 2E 2A 28 25 24 + 	dta $31, $2E, $2A, $28, $25, $24, $22, $1F, $1E, $1B, $19, $16
   250
   251 				;---------------------------------------------------------------------------------------------------------------------------------------------;
   252
   253 				;* Distortions and Tuning Tables Addresses 
   254 				;* Usage depends on the Channel Index Number and AUDCTL bits 
   255
   256 173F			FREQTBL
   257 173F			FREQ64KHZ
   258 173F FF 11			dta a(TBL_DIST_A_64KHZ) 
   259 1741 1F 10			dta a(TBL_DIST_2_64KHZ) 
   260 1743 FF 11			dta a(TBL_DIST_A_64KHZ) 
   261 1745 FF 11			dta a(TBL_DIST_A_64KHZ) 
   262 1747 FF 11			dta a(TBL_DIST_A_64KHZ) 
   263 1749 FF 11			dta a(TBL_DIST_A_64KHZ)  
   264 174B DF 13			dta a(TBL_DIST_C_64KHZ)  
   265 174D BF 15			dta a(TBL_DIST_E_64KHZ) 
   266 174F			FREQ15KHZ
   267 174F 9F 11			dta a(TBL_DIST_A_15KHZ)  
   268 1751 BF 0F			dta a(TBL_DIST_2_15KHZ)  
   269 1753 9F 11			dta a(TBL_DIST_A_15KHZ)  
   270 1755 9F 11			dta a(TBL_DIST_A_15KHZ)  
   271 1757 9F 11			dta a(TBL_DIST_A_15KHZ)  
   272 1759 9F 11			dta a(TBL_DIST_A_15KHZ)  
   273 175B 7F 13			dta a(TBL_DIST_C_15KHZ)  
   274 175D 7F 13			dta a(TBL_DIST_C_15KHZ) 
   275 175F			FREQ179MHZ
   276 175F 5F 12			dta a(TBL_DIST_A_179MHZ) 
   277 1761 7F 10			dta a(TBL_DIST_2_179MHZ) 
   278 1763 5F 12			dta a(TBL_DIST_A_179MHZ) 
   279 1765 5F 12			dta a(TBL_DIST_A_179MHZ) 
   280 1767 5F 12			dta a(TBL_DIST_A_179MHZ) 
   281 1769 5F 12			dta a(TBL_DIST_A_179MHZ) 
   282 176B 3F 14			dta a(TBL_DIST_C_179MHZ) 
   283 176D 1F 16			dta a(TBL_DIST_E_179MHZ) 
   284 176F			FREQ16BIT
   285 176F BF 12			dta a(TBL_DIST_A_16BIT_MSB) 
   286 1771 DF 10			dta a(TBL_DIST_2_16BIT_MSB) 
   287 1773 BF 12			dta a(TBL_DIST_A_16BIT_MSB) 
   288 1775 BF 12			dta a(TBL_DIST_A_16BIT_MSB) 
   289 1777 BF 12			dta a(TBL_DIST_A_16BIT_MSB) 
   290 1779 BF 12			dta a(TBL_DIST_A_16BIT_MSB) 
   291 177B 9F 14			dta a(TBL_DIST_C_16BIT_MSB) 
   292 177D 7F 16			dta a(TBL_DIST_E_16BIT_MSB) 
   293 					
   294 				;-----------------
   295
   296 				;* Distortions as their true AUDC value 
   297
   298 177F			DISTORTIONS
   299 177F 00 00		DIST_0	dta $00,$00
   300 1781 20 00		DIST_2	dta $20,$00
   301 1783 40 00		DIST_4	dta $40,$00
   302 1785 A0 00		DIST_6	dta $A0,$00
   303 1787 80 00		DIST_8	dta $80,$00
   304 1789 A0 00		DIST_A	dta $A0,$00
   305 178B C0 00		DIST_C	dta $C0,$00
   306 178D C0 00		DIST_E	dta $C0,$00
   307
   308 				;-----------------
   309
   310 				;--------------------------------------------------------------------------------------------------;
   311
   312 				;* Vibrato table also copied from RMT for tests...
   313
   314 178F			vibtabbeg 
   315 178F 00 01 05 0B			dta 0,vib1-vib0,vib2-vib0,vib3-vib0
   316 1793 00			vib0	dta 0
   317 1794 01 FF FF 01		vib1	dta 1,-1,-1,1
   318 1798 01 00 FF FF 00 01	vib2	dta 1,0,-1,-1,0,1
   319 179E 01 01 00 FF FF FF + vib3	dta 1,1,0,-1,-1,-1,-1,0,1,1
   320 17A8			vibtabnext
   321 17A8 00				dta vib0-vib0+0
   322 17A9 02 03 04 01			dta vib1-vib0+1,vib1-vib0+2,vib1-vib0+3,vib1-vib0+0
   323 17AD 06 07 08 09 0A 05		dta vib2-vib0+1,vib2-vib0+2,vib2-vib0+3,vib2-vib0+4,vib2-vib0+5,vib2-vib0+0
   324 17B3 0C 0D 0E 0F 10 11 + 	dta vib3-vib0+1,vib3-vib0+2,vib3-vib0+3,vib3-vib0+4,vib3-vib0+5,vib3-vib0+6,vib3-vib0+7,vib3-vib0+8,vib3-vib0+9,vib3-vib0+0
   325
   326 				;-----------------
   327
   328 				;--------------------------------------------------------------------------------------------------;
   329
   330 				;* Pattern variables, used for several things such as Notes, Volume, Effect Commands, etc 
   331
   332 17BD			DUMB_VARIABLES 
   333 17BD 00 00 00 00		CMD_NOTE		dta $00,$00,$00,$00			;* Note Index and Note Command 
   334 17C1 00 00 00 00		CMD_INSTRUMENT		dta $00,$00,$00,$00			;* Instrument Index and Instrument Command 
   335 17C5 00 00 00 00		CMD_VOLUME		dta $00,$00,$00,$00			;* Channel Volume Value 
   336 17C9 00 00 00 00		CMD_PAUSE		dta $00,$00,$00,$00			;* Row Pause Timer, wait n number of rows before the next one 
   337 17CD 00 00 00 00		CMD_DISTORTION		dta $00,$00,$00,$00			;* Current Channel Distortion Parameter 
   338 17D1 00 00 00 00		CMD_AUDCTL		dta $00,$00,$00,$00			;* Current Channel AUDCTL Parameter 
   339 17D5 00 00 00 00		CMD_VIBRATO		dta $00,$00,$00,$00			;* Current Channel Vibrato Parameter 
   340 17D9 00 00 00 00		CMD_VIBOFFSET		dta $00,$00,$00,$00			;* Current Channel Vibrato Offset
   341 17DD 00 00 00 00		CMD_ARPEGGIO		dta $00,$00,$00,$00			;* Current Channel Arpeggio Parameter 
   342 17E1 00 00 00 00		CMD_ARPTIMER		dta $00,$00,$00,$00			;* Current Channel Arpeggio Timer  
   343 17E5 00 00 00 00		CMD_FINETUNE		dta $00,$00,$00,$00			;* Current Channel Finetune Parameter 
   344 17E9 00 00 00 00		PTNROW_LSB		dta $00,$00,$00,$00			;* Current Row Index LSB 
   345 17ED 00 00 00 00		PTNROW_MSB		dta $00,$00,$00,$00			;* Current Row Index MSB 
   346 17F1 00 00 00 00 00 00 + ARPTBL			dta $00,$00,$00,$00,$00,$00,$00,$00	;* Arpeggio table buffer TODO: Find a better method for this 
   347
   348 				;* Instrument variables, most of these would take priority over the Pattern variables 
   349
   350 17F9 00 00 00 00		instr_envelope_idx	dta $00,$00,$00,$00 
   351 17FD 00 00 00 00		instr_envelope_flag	dta $00,$00,$00,$00 
   352 1801 00 00 00 00		instr_envelope_mode	dta $00,$00,$00,$00 
   353 1805 00 00 00 00		instr_distaudctl_idx	dta $00,$00,$00,$00 
   354 1809 00 00 00 00		instr_distaudctl_flag	dta $00,$00,$00,$00 
   355 180D 00 00 00 00		instr_distaudctl_mode	dta $00,$00,$00,$00 
   356 1811 00 00 00 00		instr_notes_tbl_idx	dta $00,$00,$00,$00
   357 1815 00 00 00 00		instr_notes_tbl_flag	dta $00,$00,$00,$00
   358 1819 00 00 00 00		instr_notes_tbl_mode	dta $00,$00,$00,$00
   359 181D 00 00 00 00		instr_freqs_tbl_idx	dta $00,$00,$00,$00
   360 1821 00 00 00 00		instr_freqs_tbl_flag	dta $00,$00,$00,$00 
   361 1825 00 00 00 00		instr_freqs_tbl_mode	dta $00,$00,$00,$00
   362 1829 00 00 00 00		instr_cmd_idx		dta $00,$00,$00,$00 
   363 182D 00 00 00 00		instr_cmd_flag		dta $00,$00,$00,$00 
   364 1831 00 00 00 00		instr_cmd_mode		dta $00,$00,$00,$00 
   365 1835 00 00 00 00		instr_tablenote		dta $00,$00,$00,$00
   366 1839 00 00 00 00		instr_tablefreq		dta $00,$00,$00,$00
   367 183D 00 00 00 00		instr_autoflag		dta $00,$00,$00,$00
   368 1841 00 00 00 00		instr_release		dta $00,$00,$00,$00 
   369 1845			DUMB_VARIABLES_END
   370
   371 				;-----------------
   372
   373 				;--------------------------------------------------------------------------------------------------;
   374
   375 				; and that's all... I guess 
   376
  1341
  1342 				;-----------------
  1343
  1344 				;--------------------------------------------------------------------------------------------------;
  1345
    29 				;	org PLAYER
    30 1845			PLAYER 
    31 1845			start       
    32 1845 A2 00			ldx #0				; disable playfield and the black colour value
    33 1847 8E 2F 02			stx SDMCTL			; write to Shadow Direct Memory Access Control address
    34 184A 20 49 19			jsr wait_vblank			; wait for vblank before continuing
    35 184D 8E C8 02			stx COLOR4			; Shadow COLBK (background colour)
    36 1850 8E C6 02			stx COLOR2			; Shadow COLPF2 (playfield colour 2)
    37 1853 A2 0F			ldx #$F				; white colour value
    38 1855 8E C5 02			stx COLOR1			; Shadow COLPF1 (Playfield colour 1), font colour
    39 1858 A9 00 8D 30 02 A9 + 	mwa #dlist SDLSTL		; Start Address of the Display List
    40 1862			module_init 
    41 1862 20 00 08			jsr DUMBMUSICDRIVER		; Init returns... absolutely nothing (for now)... 
    42 1865 A0 01			ldy #1				; 1xVBI speed is hardcoded for the time being 
    43 1867 B9 20 1F			lda tabpp-1,y			; load from the line counter spacing table
    44 186A 8D F9 18			sta acpapx2			; lines between each play
    45 186D A2 22			ldx #$22			; DMA enable, normal playfield
    46 186F 8E 2F 02			stx SDMCTL			; write to Shadow Direct Memory Access Control address
    47 1872 A2 3C			ldx #60				; load into index x a 60 frames buffer
    48 1874			wait_init   
    49 1874 20 49 19			jsr wait_vblank			; wait for vblank => 1 frame
    50 1877 CA				dex				; decrement index x
    51 1878 D0 FA			bne wait_init			; repeat until x = 0, total wait time is ~1 second
    52 187A A9 BC 85 FE A9 1B + 	mwa #line_01 DISPLAY 
    53 1882 A9 08			lda >DUMBMUSICDRIVER
    54 1884 A0 0A			ldy #10
    55 1886 20 63 19			jsr printhex_direct	
    56 1889 A9 00			lda <DUMBMUSICDRIVER 
    57 188B A0 0C			ldy #12 
    58 188D 20 63 19			jsr printhex_direct
    59 1890 A9 18			lda >PLAYER
    60 1892 A0 15			ldy #21
    61 1894 20 63 19			jsr printhex_direct	
    62 1897 A9 45			lda <PLAYER 
    63 1899 A0 17			ldy #23 
    64 189B 20 63 19			jsr printhex_direct 
    65 189E A9 1F			lda >MODULE
    66 18A0 A0 22			ldy #34
    67 18A2 20 63 19			jsr printhex_direct	
    68 18A5 A9 27			lda <MODULE
    69 18A7 A0 24			ldy #36 
    70 18A9 20 63 19			jsr printhex_direct
    71 18AC A2 9C			ldx #156			; default value for all regions 
    72 18AE 8E E7 18			stx ppap			; value used for screen synchronisation
    73 18B1 78				sei				; Set Interrupt Disable Status
    74 18B2 AD 22 02 8D 25 1F + 	mwa VVBLKI oldvbi		; vbi address backup
    75 18BE A9 1B 8D 22 02 A9 + 	mwa #vbi VVBLKI			; write our own vbi address to it
    76 18C8 A9 40 8D 0E D4		mva #$40 NMIEN			; enable vbi interrupts 
    77 18CD			wait_sync
    78 18CD AD 0B D4			lda VCOUNT			; current scanline, manipulated this way stabilises the timing
    79 18D0 C9 08			cmp #VLINE			; is it equal? 
    80 18D2 D0 F9			bne wait_sync			; nope, repeat 
    81
    82 				;--------------------------------------------------------------------------------------------------;
    83
    84 				; main loop, code runs from here after initialisation
    85
    86 18D4			loop
    87 18D4 A0 69			ldy #RASTERBAR			; custom rasterbar colour
    88 18D6			acpapx1
    89 18D6 AD EF 18			lda spap
    90 18D9 A2 00			ldx #0
    91 = 18DA			cku	equ *-1
    92 18DB D0 1B			bne keepup
    93 18DD AD 0B D4			lda VCOUNT			; vertical line counter synchro
    94 18E0 AA				tax
    95 18E1 38 E9 08			sub #VLINE
    96 = 18E3			lastpap	equ *-1
    97 18E4 B0 02 69 FF			scs:adc #$ff
    98 = 18E7			ppap	equ *-1
    99 18E8 8D F2 18			sta dpap
   100 18EB 8E E3 18			stx lastpap
   101 18EE A9 00			lda #0
   102 = 18EF			spap	equ *-1
   103 18F0 38 E9 00			sub #0
   104 = 18F2			dpap	equ *-1
   105 18F3 8D EF 18			sta spap
   106 18F6 B0 DE			bcs acpapx1
   107 18F8			keepup
   108 18F8 69 FF			adc #$ff
   109 = 18F9			acpapx2	equ *-1
   110 18FA 8D EF 18			sta spap
   111 18FD A2 00			ldx #0
   112 18FF B0 01 E8			scs:inx
   113 1902 8E DA 18			stx cku
   114 1905			play_loop
   115 				;	sty WSYNC			; horizontal sync
   116 1905 8C 1A D0			sty COLBK			; background colour 
   117 1908 8C 0B D2			sty POTGO			; reset paddles for counting scanlines from 0 
   118 190B 20 03 08			jsr DUMBMUSICDRIVER+3		; DUMB_play, (setpokey + 1 play) 
   119 190E AD 00 D2			lda POKEY			; POT0 is used as a scanline counter here 
   120 1911 8D BA 19			sta SCANLINE_COUNTER 		; this value will be displayed during the next VBI 
   121 1914 A0 00			ldy #$00			; black colour value
   122 1916 8C 1A D0			sty COLBK			; background colour
   123 1919 F0 B9			beq loop			; unconditional
   124
   125 				;--------------------------------------------------------------------------------------------------;
   126
   127 				; VBI loop
   128
   129 191B			vbi
   130 191B AD 09 D2			lda KBCODE			; Keyboard Code
   131 191E C9 1C			cmp #$1C			; ESCape key?
   132 1920 D0 1E			bne continue			; nope => loop
   133 1922			stopmusic 
   134 1922 20 09 08			jsr DUMBMUSICDRIVER+9		; DUMB_silence, stop the Driver and reset the POKEY registers 
   135 1925 AD 25 1F 8D 22 02 + 	mwa oldvbi VVBLKI		; restore the old vbi address
   136 1931 A2 00			ldx #$00			; disable playfield 
   137 1933 8E 2F 02			stx SDMCTL			; write to Direct Memory Access (DMA) Control register
   138 1936 CA				dex				; underflow to #$FF
   139 1937 8E FC 02			stx CH				; write to the CH register, #$FF means no key pressed
   140 193A 20 49 19			jsr wait_vblank			; wait for vblank before continuing
   141 193D 6C 0A 00			jmp (DOSVEC)			; return to DOS, or Self Test by default
   142 1940			continue
   143 1940 20 89 19			jsr print_debug 		; stuff 	
   144 1943			return_from_vbi 
   145 1943 68				pla				; since we're in our own vbi routine, pulling all values manually is required
   146 1944 A8				tay
   147 1945 68				pla
   148 1946 AA				tax
   149 1947 68				pla
   150 1948 40				rti				; return from interrupt
   151
   152 				;--------------------------------------------------------------------------------------------------;
   153
   154 				; wait for vblank subroutine
   155
   156 1949			wait_vblank 
   157 1949 A5 14			lda RTCLOK+2			; load the real time frame counter to accumulator
   158 194B			wait        
   159 194B C5 14			cmp RTCLOK+2			; compare to itself
   160 194D F0 FC			beq wait			; equal means it vblank hasn't began
   161 194F 60				rts
   162 					
   163 				;-----------------
   164
   165 				; Print text from data tables, useful for many things 
   166
   167 1950			printinfo 
   168 1950 8C 5D 19			sty charbuffer
   169 1953 A0 00			ldy #0
   170 1955			do_printinfo
   171 1955 BD FF FF		        lda $ffff,x
   172 = 1956			infosrc equ *-2
   173 1958 91 FE			sta (DISPLAY),y
   174 195A E8				inx
   175 195B C8				iny 
   176 195C C0 00			cpy #0
   177 = 195D			charbuffer equ *-1
   178 195E D0 F5			bne do_printinfo 
   179 1960 60				rts
   180
   181 				;-----------------
   182
   183 				; Print hex characters for several things, useful for displaying all sort of debugging infos
   184 					
   185 1961			printhex
   186 1961 A0 00			ldy #0
   187 1963			printhex_direct     ; workaround to allow being addressed with y in different subroutines
   188 1963 48				pha
   189 1964 4A 4A 4A 4A			:4 lsr @
   190 					;beq ph1    ; comment out if you want to hide the leftmost zeroes
   191 1968 AA				tax
   192 1969 BD 79 19			lda hexchars,x
   193 196C			ph1	
   194 196C 91 FE C8		        sta (DISPLAY),y+
   195 196F 68				pla
   196 1970 29 0F			and #$f
   197 1972 AA				tax
   198 1973 BD 79 19 91 FE		mva hexchars,x (DISPLAY),y
   199 1978 60				rts
   200 1979			hexchars 
   201 1979 10 11 12 13 14 15 +         dta d"0123456789ABCDEF"
   202
   203 				;-----------------
   204
   205 				;* Print most infos on screen
   206
   207 1989			print_debug
   208 1989 A9 5C 85 FE A9 1C + 	mwa #line_05 DISPLAY 
   209 					
   210 				;* Global Infos 
   211
   212 1991 A5 80			lda SONGNUM
   213 1993 A0 24			ldy #36
   214 1995 20 63 19			jsr printhex_direct 
   215 1998 A5 82			lda ROWNUM 
   216 					
   217 199A 49 FF			eor #$FF 
   218 199C 38				sec  
   219 199D 65 83			adc ROWMAX 
   220 					
   221 199F A0 4C			ldy #76
   222 19A1 20 63 19			jsr printhex_direct
   223 19A4 A5 85			lda SPEED
   224 19A6 A0 74			ldy #116
   225 19A8 20 63 19			jsr printhex_direct
   226 19AB A5 A8			lda SDW_AUDCTL
   227 19AD A0 9C			ldy #156
   228 19AF 20 63 19			jsr printhex_direct
   229 19B2 A5 A9			lda SDW_SKCTL
   230 19B4 A0 C4			ldy #196
   231 19B6 20 63 19			jsr printhex_direct
   232 19B9 A9 00			lda #0 
   233 = 19BA				SCANLINE_COUNTER equ *-1 
   234 19BB CD D1 1A			cmp PEAK_SCANLINE 
   235 19BE 90 03			bcc no_cpu_pike 
   236 19C0 8D D1 1A			sta PEAK_SCANLINE
   237 19C3			no_cpu_pike
   238 19C3 A0 EC			ldy #236 
   239 19C5 20 63 19			jsr printhex_direct 
   240
   241 				;* Notes 
   242 				 
   243 19C8 A5 94			lda VAR_NOTE+0
   244 19CA A0 0D			ldy #13
   245 19CC 20 63 19			jsr printhex_direct
   246 19CF A5 95			lda VAR_NOTE+1
   247 19D1 A0 11			ldy #17
   248 19D3 20 63 19			jsr printhex_direct
   249 19D6 A5 96			lda VAR_NOTE+2
   250 19D8 A0 15			ldy #21
   251 19DA 20 63 19			jsr printhex_direct
   252 19DD A5 97			lda VAR_NOTE+3
   253 19DF A0 19			ldy #25
   254 19E1 20 63 19			jsr printhex_direct 
   255 					
   256 				;* Freqs
   257
   258 19E4 A5 A0			lda SDW_AUDF+0
   259 19E6 A0 35			ldy #53
   260 19E8 20 63 19			jsr printhex_direct
   261 19EB A5 A1			lda SDW_AUDF+1
   262 19ED A0 39			ldy #57
   263 19EF 20 63 19			jsr printhex_direct
   264 19F2 A5 A2			lda SDW_AUDF+2
   265 19F4 A0 3D			ldy #61
   266 19F6 20 63 19			jsr printhex_direct
   267 19F9 A5 A3			lda SDW_AUDF+3
   268 19FB A0 41			ldy #65
   269 19FD 20 63 19			jsr printhex_direct 
   270 					
   271 				;* Distortions
   272
   273 1A00 A5 A4			lda SDW_AUDC+0
   274 1A02 29 F0			and #$F0
   275 1A04 A0 5E			ldy #94
   276 1A06 20 63 19			jsr printhex_direct
   277 1A09 A9 00			lda #0 
   278 1A0B 91 FE			sta (DISPLAY),y
   279 1A0D A5 A5			lda SDW_AUDC+1
   280 1A0F 29 F0			and #$F0
   281 1A11 A0 62			ldy #98
   282 1A13 20 63 19			jsr printhex_direct
   283 1A16 A9 00			lda #0 
   284 1A18 91 FE			sta (DISPLAY),y
   285 1A1A A5 A6			lda SDW_AUDC+2
   286 1A1C 29 F0			and #$F0
   287 1A1E A0 66			ldy #102
   288 1A20 20 63 19			jsr printhex_direct
   289 1A23 A9 00			lda #0 
   290 1A25 91 FE			sta (DISPLAY),y
   291 1A27 A5 A7			lda SDW_AUDC+3
   292 1A29 29 F0			and #$F0
   293 1A2B A0 6A			ldy #106
   294 1A2D 20 63 19			jsr printhex_direct 
   295 1A30 A9 00			lda #0 
   296 1A32 91 FE			sta (DISPLAY),y
   297 					
   298 				;* Volumes
   299
   300 1A34 A5 A4			lda SDW_AUDC+0
   301 1A36 29 0F			and #$0F
   302 1A38 A0 85			ldy #133
   303 1A3A 20 63 19			jsr printhex_direct
   304 1A3D 88				dey
   305 1A3E A9 00			lda #0 
   306 1A40 91 FE			sta (DISPLAY),y
   307 1A42 A5 A5			lda SDW_AUDC+1
   308 1A44 29 0F			and #$0F
   309 1A46 A0 89			ldy #137
   310 1A48 20 63 19			jsr printhex_direct
   311 1A4B 88				dey
   312 1A4C A9 00			lda #0 
   313 1A4E 91 FE			sta (DISPLAY),y
   314 1A50 A5 A6			lda SDW_AUDC+2
   315 1A52 29 0F			and #$0F
   316 1A54 A0 8D			ldy #141
   317 1A56 20 63 19			jsr printhex_direct
   318 1A59 88				dey
   319 1A5A A9 00			lda #0 
   320 1A5C 91 FE			sta (DISPLAY),y
   321 1A5E A5 A7			lda SDW_AUDC+3
   322 1A60 29 0F			and #$0F
   323 1A62 A0 91			ldy #145
   324 1A64 20 63 19			jsr printhex_direct
   325 1A67 88				dey
   326 1A68 A9 00			lda #0 
   327 1A6A 91 FE			sta (DISPLAY),y
   328 					
   329 				;* Pauses 
   330 				 
   331 1A6C AD C9 17			lda CMD_PAUSE+0
   332 1A6F A0 AD			ldy #173
   333 1A71 20 63 19			jsr printhex_direct
   334 1A74 AD CA 17			lda CMD_PAUSE+1
   335 1A77 A0 B1			ldy #177
   336 1A79 20 63 19			jsr printhex_direct
   337 1A7C AD CB 17			lda CMD_PAUSE+2
   338 1A7F A0 B5			ldy #181
   339 1A81 20 63 19			jsr printhex_direct
   340 1A84 AD CC 17			lda CMD_PAUSE+3
   341 1A87 A0 B9			ldy #185
   342 1A89 20 63 19			jsr printhex_direct 
   343 					
   344 				;* Instruments 
   345 				 
   346 1A8C AD C1 17			lda CMD_INSTRUMENT+0
   347 1A8F A0 D5			ldy #213
   348 1A91 20 63 19			jsr printhex_direct
   349 1A94 AD C2 17			lda CMD_INSTRUMENT+1
   350 1A97 A0 D9			ldy #217
   351 1A99 20 63 19			jsr printhex_direct
   352 1A9C AD C3 17			lda CMD_INSTRUMENT+2
   353 1A9F A0 DD			ldy #221
   354 1AA1 20 63 19			jsr printhex_direct
   355 1AA4 AD C4 17			lda CMD_INSTRUMENT+3
   356 1AA7 A0 E1			ldy #225
   357 1AA9 20 63 19			jsr printhex_direct
   358
   359 1AAC A9 4C 85 FE A9 1D + 	mwa #line_0C DISPLAY 
   360 					
   361 				;* Finetunes 
   362 				 
   363 1AB4 A5 98			lda VAR_FREQ+0
   364 1AB6 A0 0D			ldy #13
   365 1AB8 20 63 19			jsr printhex_direct
   366 1ABB A5 99			lda VAR_FREQ+1
   367 1ABD A0 11			ldy #17
   368 1ABF 20 63 19			jsr printhex_direct
   369 1AC2 A5 9A			lda VAR_FREQ+2
   370 1AC4 A0 15			ldy #21
   371 1AC6 20 63 19			jsr printhex_direct
   372 1AC9 A5 9B			lda VAR_FREQ+3
   373 1ACB A0 19			ldy #25
   374 1ACD 20 63 19			jsr printhex_direct 
   375 					
   376 				;* Peak Scanlines Count 
   377
   378 1AD0 A9 00			lda #0 
   379 = 1AD1				PEAK_SCANLINE equ *-1 
   380 1AD2 A0 24			ldy #36 
   381 1AD4 20 63 19			jsr printhex_direct 
   382
   383 				;* Vibrato Command 
   384 				 
   385 1AD7 AD D5 17			lda CMD_VIBRATO+0
   386 1ADA A0 35			ldy #53
   387 1ADC 20 63 19			jsr printhex_direct
   388 1ADF AD D6 17			lda CMD_VIBRATO+1
   389 1AE2 A0 39			ldy #57
   390 1AE4 20 63 19			jsr printhex_direct
   391 1AE7 AD D7 17			lda CMD_VIBRATO+2
   392 1AEA A0 3D			ldy #61
   393 1AEC 20 63 19			jsr printhex_direct
   394 1AEF AD D8 17			lda CMD_VIBRATO+3
   395 1AF2 A0 41			ldy #65
   396 1AF4 20 63 19			jsr printhex_direct 
   397 					
   398 				;* Vibrato Offset 
   399 				 
   400 1AF7 AD D9 17			lda CMD_VIBOFFSET+0
   401 1AFA A0 5D			ldy #93
   402 1AFC 20 63 19			jsr printhex_direct
   403 1AFF AD DA 17			lda CMD_VIBOFFSET+1
   404 1B02 A0 61			ldy #97
   405 1B04 20 63 19			jsr printhex_direct
   406 1B07 AD DB 17			lda CMD_VIBOFFSET+2
   407 1B0A A0 65			ldy #101
   408 1B0C 20 63 19			jsr printhex_direct
   409 1B0F AD DC 17			lda CMD_VIBOFFSET+3
   410 1B12 A0 69			ldy #105
   411 1B14 20 63 19			jsr printhex_direct 
   412 					
   413 				;* Arpeggio Command
   414 				 
   415 1B17 AD DD 17			lda CMD_ARPEGGIO+0
   416 1B1A A0 85			ldy #133
   417 1B1C 20 63 19			jsr printhex_direct
   418 1B1F AD DE 17			lda CMD_ARPEGGIO+1
   419 1B22 A0 89			ldy #137
   420 1B24 20 63 19			jsr printhex_direct
   421 1B27 AD DF 17			lda CMD_ARPEGGIO+2
   422 1B2A A0 8D			ldy #141
   423 1B2C 20 63 19			jsr printhex_direct
   424 1B2F AD E0 17			lda CMD_ARPEGGIO+3
   425 1B32 A0 91			ldy #145
   426 1B34 20 63 19			jsr printhex_direct 
   427 					
   428 				;* Arpeggio Timer
   429 				 
   430 1B37 AD E1 17			lda CMD_ARPTIMER+0
   431 1B3A A0 AD			ldy #173
   432 1B3C 20 63 19			jsr printhex_direct
   433 1B3F 88				dey
   434 1B40 A9 00			lda #0 
   435 1B42 91 FE			sta (DISPLAY),y
   436 1B44 AD E2 17			lda CMD_ARPTIMER+1
   437 1B47 A0 B1			ldy #177
   438 1B49 20 63 19			jsr printhex_direct
   439 1B4C 88				dey
   440 1B4D A9 00			lda #0 
   441 1B4F 91 FE			sta (DISPLAY),y
   442 1B51 AD E3 17			lda CMD_ARPTIMER+2
   443 1B54 A0 B5			ldy #181
   444 1B56 20 63 19			jsr printhex_direct
   445 1B59 88				dey
   446 1B5A A9 00			lda #0 
   447 1B5C 91 FE			sta (DISPLAY),y
   448 1B5E AD E4 17			lda CMD_ARPTIMER+3
   449 1B61 A0 B9			ldy #185
   450 1B63 20 63 19			jsr printhex_direct 
   451 1B66 88				dey
   452 1B67 A9 00			lda #0 
   453 1B69 91 FE			sta (DISPLAY),y
   454 					
   455 				/*	
   456 				;* Autofilter
   457
   458 					lda CMD_AUTOFILTER+0
   459 					ldy #213
   460 					jsr printhex_direct
   461 					lda CMD_AUTOFILTER+1
   462 					ldy #217
   463 					jsr printhex_direct 
   464 				*/
   464
   465
   466 1B6B 60				rts
   467
   468 				;-----------------
   469
   470 				;--------------------------------------------------------------------------------------------------;
   471
   472 				; text strings, each line holds 40 characters, line 5 is toggled with the SHIFT key 
   473
   474 				;	dta d"|    - DUMB MUSIC DRIVER DEBUGGER -    |"
   475
   476 1B6C			LINES 
   477 1B6C 51				dta $51
   478 1B6D 52 52 52 52 52 52 + 	:38 dta $52
   479 1B93 45				dta $45
   480 1B94 7C 00 00 24 35 2D + line_00	dta d"|  DUMB MUSIC DRIVER v0.1 BY VINSCOOL  |"
   481 1BBC 7C 00 24 32 29 36 + line_01	dta d"| DRIVER $???? INIT $???? MODULE $???? |"
   482 1BE4 7C 00 00 00 00 00 + line_02	dta d"|                                      |"
   483 1C0C 7C 00 00 00 00 00 + line_03	dta d"|                                      |"
   484 1C34 7C 00 00 00 00 00 + line_04	dta d"|           CH1 CH2 CH3 CH4 ",$51,$52,$52,$52,$52,$52,$52,$52,$52,$52,$45,$7C
   485 1C5C 7C 00 2E 2F 34 25 + line_05	dta d"| NOTE       ??  ??  ??  ?? |ORDER  ??||"
   486 1C84 7C 00 26 32 25 31 + line_06	dta d"| FREQ       ??  ??  ??  ?? |ROW    ??||"
   487 1CAC 7C 00 24 29 33 34 + line_07	dta d"| DISTORTION  ?   ?   ?   ? |SPEED  ??||"
   488 1CD4 7C 00 36 2F 2C 35 + line_09	dta d"| VOLUME      ?   ?   ?   ? |AUDCTL ??||"
   489 1CFC 7C 00 30 21 35 33 + line_0A	dta d"| PAUSE      ??  ??  ??  ?? |SKCTL  ??||"
   490 1D24 7C 00 29 2E 33 34 + line_0B	dta d"| INSTRUMENT ??  ??  ??  ?? |RASTER ??||"
   491 1D4C 7C 00 26 29 2E 25 + line_0C	dta d"| FINETUNE   ??  ??  ??  ?? |PEAK   ??||"
   492 1D74 7C 00 36 29 22 32 + line_0D	dta d"| VIBRATO    ??  ??  ??  ?? ",$5A,$52,$52,$52,$52,$52,$52,$52,$52,$52,$43,$7C
   493 1D9C 7C 00 36 29 22 2F + line_0E	dta d"| VIBOFFSET  ??  ??  ??  ??            |"
   494 1DC4 7C 00 21 32 30 25 + line_0F	dta d"| ARPEGGIO   ??  ??  ??  ??            |"
   495 1DEC 7C 00 21 32 30 34 + line_10	dta d"| ARPTIMER    ?   ?   ?   ?            |"
   496 1E14 7C 00 00 00 00 00 + line_11	dta d"|                                      |"
   497 1E3C 7C 00 00 00 00 00 + line_12	dta d"|                                      |"
   498 1E64 7C 00 00 00 00 00 + line_13	dta d"|                                      |"
   499 1E8C 7C 00 00 00 00 00 + line_14	dta d"|                                      |"
   500 1EB4 5A				dta $5A
   501 1EB5 52 52 52 52 52 52 + 	:38 dta $52
   502 1EDB 43				dta $43
   503 1EDC			LINESEND
   504
   505 				;--------------------------------------------------------------------------------------------------;
   506
   507 				; Display list
   508 1EDC				.align $100
   509 1F00			dlist 
   510 1F00-1F26> 70 70 70 70 + 	dta $70,$70,$70,$70,$70,$70 		; empty lines on top of the display 
   511 1F06 42 6C 1B			dta $42,a(LINES)			; ANTIC mode 2, memory address set to the first line 
   512 1F09 02 02 02 02 02 02 + 	:((LINESEND - LINES - 1) / 40) dta $02	; insert all the remaining lines directly below  
   513 1F1E 41 00 1F			dta $41,a(dlist)			; Jump and wait for vblank, return to dlist 
   514
   515 				;--------------------------------------------------------------------------------------------------;
   516
   517 				; line counter spacing table for instrument speed from 1 to 4
   518
   519 1F21			tabpp       
   520 1F21 9C 4E 34 27			dta 156,78,52,39
   521 1F25			oldvbi	
   522 1F25 00 00			dta a(0)			; vbi address backup
   523 02E0-02E1> 45 18			run start			; set the run address 
   524 1F27			PLAYER_END
   525
   526 1F27			MODULE
   527 1F27				icl 'DUMB Module.asm'		; example DUMB Module, the ORG address could be defined anywhere 
Source: DUMB Module.asm
     1 				;* --- Dumb Unless Made Better ---
     2 				;*
     3 				;* DUMB Module Format - Prototype 2 
     4 				;* By VinsCool 
     5 				;* 
     6 				;* Inspired by the Raster Music Tracker Module Format, created by Raster/CPU
     7 				;* I've learned how to code with your work, Raster, thank you for everything, and Rest in Peace! 
     8 				;* 
     9 				;* This is work in progress, so this file WILL be changed very often! 
    10 				;* Many things will be tweaked for as often as is may be necessary
    11 				;* The Module data will be thoroughly designed, in order to make the format as flexible as possible 
    12 				;*  
    13 				;* Let's begin the Dumb Module construction now shall we! 
    14 				;--------------------------------------------------------------------------------------------------;
    15
    16 				;-----------------
    17
    18 				;--------------------------------------------------------------------------------------------------;
    19 				;* DUMB Module Header  
    20 				;--------------------------------------------------------------------------------------------------;
    21
    22 				;* The DUMB Module format begins with a relatively simple header structure 
    23 				;* All Module parameters will be defined here, as well as additional file metadata, if desired (maybe) 
    24 				;* At the moment, most of this is unfinished, many ambitious goals that may need to be toned down as well 
    25 				;* Most of the ideas so far are meant to be used for making the DUMB Module format as flexible as possible 
    26 				;* Several things may be tweaked, removed, or changed entirely, so the header structure may change very often 
    27
    28 				;	org MODULE 						; The module address could be set anywhere  
    29 1F27			DUMB	
    30 1F27-3438> 24 35 2D 22		dta d"DUMB"						; 4 bytes identifier 
    31 1F2B			VERSION	
    32 1F2B 00				dta $00							; Module version number 
    33 1F2C			REGION	
    34 1F2C 01				dta $01							; Module Region ($00 for PAL, $01 for NTSC) 
    35 1F2D			MAXTLEN	
    36 1F2D 20				dta $20							; Maximal pattern length 
    37 1F2E			SONGLEN 
    38 1F2E 18				dta [SONGLNE_END - SONGLNE] / 4				; Total Number of Songlines 
    39 1F2F			INITSPD	
    40 1F2F 09				dta $09 						; Initial Module Speed 
    41 1F30			VBISPD	
    42 1F30 01				dta $01							; xVBI Speed, up to $0F maximum, high speeds need more CPU cycles 
    43 					
    44 				;-----------------
    45
    46 				;--------------------------------------------------------------------------------------------------;
    47 				;* DUMB Module Address Tables  
    48 				;--------------------------------------------------------------------------------------------------;
    49
    50 				;* Songline Address Table, for all channels used in a DUMB Module 
    51 				;* There is no hard limitation regarding how many channels may be used in a module 
    52 				;* This would allow very flexible adjustments if for example a project used only 3 channels 
    53 				;* In this case, there would be no use for a 4th channel, which may save a significant amount of memory 
    54
    55 1F31			SONGTBL	
    56 1F31 EF 1F			dta a(SONGLNE) 
    57
    58 				;-----------------
    59
    60 				;* Pattern Address Tables, for all channels used in a DUMB Module 
    61 				;* Each channel may be assigned to its own table, if desired 
    62 				;* There is no hard limitation regarding how the Pattern data is shared across channels either 
    63
    64 1F33			PTNTBL
    65 1F33 86 20			dta a(PTN_00) 
    66 1F35 87 20			dta a(PTN_01) 
    67 1F37 8A 20			dta a(PTN_02)  
    68 1F39 8A 20			dta a(PTN_03) 
    69 1F3B 8A 20			dta a(PTN_04) 
    70 1F3D E5 20			dta a(PTN_05) 
    71 1F3F 40 21			dta a(PTN_06) 
    72 1F41 8A 21			dta a(PTN_07) 
    73 1F43 D4 21			dta a(PTN_08) 
    74 1F45 26 22			dta a(PTN_09) 
    75 1F47 5F 22			dta a(PTN_0A) 
    76 1F49 9B 22			dta a(PTN_0B) 
    77 1F4B D7 22			dta a(PTN_0C) 
    78 1F4D 13 23			dta a(PTN_0D) 
    79
    80 1F4F 4F 23			dta a(PTN_0E) 
    81 1F51 A4 23			dta a(PTN_0F) 
    82 1F53 FF 23			dta a(PTN_10) 
    83 1F55 49 24			dta a(PTN_11) 
    84 1F57 93 24			dta a(PTN_12) 
    85 1F59 E5 24			dta a(PTN_13) 
    86 					
    87 1F5B 1E 25			dta a(PTN_14) 
    88 1F5D 75 25			dta a(PTN_15) 
    89 1F5F D0 25			dta a(PTN_16) 
    90 1F61 1A 26			dta a(PTN_17) 
    91 1F63 64 26			dta a(PTN_18) 
    92 1F65 B6 26			dta a(PTN_19)
    93 					
    94 1F67 EF 26			dta a(PTN_1A) 
    95 1F69 46 27			dta a(PTN_1B) 
    96 1F6B A1 27			dta a(PTN_1C) 
    97 1F6D EB 27			dta a(PTN_1D) 
    98 1F6F 35 28			dta a(PTN_1E) 
    99 1F71 87 28			dta a(PTN_1F)
   100 					
   101 1F73 C0 28			dta a(PTN_20) 
   102 1F75 3E 29			dta a(PTN_21) 
   103 1F77 B9 29			dta a(PTN_22) 
   104 1F79 29 2A			dta a(PTN_23) 
   105 1F7B 99 2A			dta a(PTN_24) 
   106 1F7D 17 2B			dta a(PTN_25)
   107 					
   108 1F7F 8F 2B			dta a(PTN_26) 
   109 1F81 0D 2C			dta a(PTN_27) 
   110 1F83 88 2C			dta a(PTN_28) 
   111 1F85 F8 2C			dta a(PTN_29) 
   112 1F87 68 2D			dta a(PTN_2A) 
   113 1F89 E6 2D			dta a(PTN_2B) 
   114 					
   115 1F8B 5E 2E			dta a(PTN_2C) 
   116 1F8D DC 2E			dta a(PTN_2D) 
   117 1F8F 57 2F			dta a(PTN_2E) 
   118 1F91 C7 2F			dta a(PTN_2F) 
   119 1F93 37 30			dta a(PTN_30) 
   120 1F95 B5 30			dta a(PTN_31) 
   121 					
   122 1F97 2D 31			dta a(PTN_32) 
   123 1F99 8D 31			dta a(PTN_33) 
   124 1F9B ED 31			dta a(PTN_34) 
   125 1F9D 4D 32			dta a(PTN_35) 
   126
   127
   128 				;-----------------
   129
   130 				;* Instrument Address Tables, for all channels used in a DUMB Module 
   131
   132 1F9F			INSTTBL 
   133 1F9F 4F 20			dta a(pickbass_c) 
   134 1FA1 54 20			dta a(pulse_drum_2) 
   135 1FA3 59 20			dta a(pulse_snare) 
   136 1FA5 5E 20			dta a(shaker_cut) 
   137 1FA7 63 20			dta a(shaker) 
   138 1FA9 68 20			dta a(pickbass_a) 
   139 1FAB 6D 20			dta a(some_kind_of_flute_no_vib) 
   140 1FAD 72 20			dta a(distortion_a_lead_2_pwm)
   141 1FAF 77 20			dta a(distortion_a_lead_2_pwm_set)
   142 1FB1 7C 20			dta a(distortion_a_bell_64khz_pwm_set) 
   143 1FB3 81 20			dta a(distortion_c_179_arp) 
   144 					
   145 1FB5			INSTENV
   146 1FB5 B0 32			dta a(pickbass_c_vol) 
   147 1FB7 CA 32			dta a(pulse_drum_2_vol) 
   148 1FB9 DA 32			dta a(pulse_snare_vol) 
   149 1FBB F4 32			dta a(shaker_cut_vol) 
   150 1FBD FB 32			dta a(shaker_vol) 
   151 1FBF 0B 33			dta a(some_kind_of_flute_no_vib_vol) 
   152 1FC1 16 33			dta a(distortion_a_lead_2_pwm_vol)
   153 1FC3 2C 33			dta a(distortion_a_bell_64khz_pwm_set_vol) 
   154
   155 1FC5			INSTAUD
   156 1FC5 37 33			dta a(pickbass_c_aud) 
   157 1FC7 3D 33			dta a(pulse_drum_2_aud) 
   158 1FC9 4D 33			dta a(pulse_snare_aud) 
   159 1FCB 67 33			dta a(shaker_cut_aud) 
   160 1FCD 6E 33			dta a(shaker_aud) 
   161 1FCF 7E 33			dta a(pickbass_a_aud) 
   162 1FD1 84 33			dta a(some_kind_of_flute_no_vib_aud) 
   163 1FD3 8C 33			dta a(distortion_a_lead_2_pwm_aud)
   164 1FD5 92 33			dta a(distortion_c_179_arp_aud) 
   165 					
   166 1FD7			INSTNOT
   167 1FD7 98 33			dta a(some_kind_of_flute_no_vib_notes) 
   168
   169 1FD9			INSTFRE
   170 1FD9 9F 33			dta a(pickbass_c_freqs) 
   171 1FDB A4 33			dta a(pulse_drum_2_freqs) 
   172 1FDD B4 33			dta a(pulse_snare_freqs) 
   173 1FDF CE 33			dta a(shaker_cut_freqs) 
   174 1FE1 D5 33			dta a(shaker_freqs) 
   175 1FE3 E5 33			dta a(some_kind_of_flute_no_vib_freqs) 
   176 					
   177 1FE5			INSTCMD 
   178 1FE5 ED 33			dta a(pickbass_c_cmd) 
   179 1FE7 F3 33			dta a(some_kind_of_flute_no_vib_cmd) 
   180 1FE9 FD 33			dta a(distortion_a_lead_2_pwm_cmd)
   181 1FEB 05 34			dta a(distortion_a_lead_2_pwm_set_cmd) 
   182 1FED 29 34			dta a(distortion_a_bell_64khz_pwm_set_cmd) 
   183 					
   184 				;-----------------
   185
   186 				;--------------------------------------------------------------------------------------------------;
   187 				;* DUMB Module Data Tables 
   188 				;--------------------------------------------------------------------------------------------------;
   189
   190 				;* Songline Data, the length and the number of channels used are defined by the DUMB Module Header 
   191 				;* 1 byte is used for each Pattern Index Number, which may also be unique to a channel, if desired 
   192 				;* Pattern Index numbers between $00 and $FE may be used, while $FF is reserved for Empty Patterns 
   193 				;* This should make the Songline structure very flexible, hopefully 
   194
   195 1FEF			SONGLNE 
   196 1FEF 04 01 0A 20			dta $04,$01,$0A,$20
   197 1FF3 05 00 0A 21			dta $05,$00,$0A,$21
   198 1FF7 06 00 0B 22			dta $06,$00,$0B,$22
   199 1FFB 07 00 0B 23			dta $07,$00,$0B,$23
   200 1FFF 08 00 0A 24			dta $08,$00,$0A,$24
   201 2003 09 00 0A 25			dta $09,$00,$0A,$25 
   202
   203 2007 0E 26 0C 2C			dta $0E,$26,$0C,$2C
   204 200B 0F 27 0C 2D			dta $0F,$27,$0C,$2D
   205 200F 10 28 0D 2E			dta $10,$28,$0D,$2E
   206 2013 11 29 0D 2F			dta $11,$29,$0D,$2F
   207 2017 12 2A 0C 30			dta $12,$2A,$0C,$30
   208 201B 13 2B 0C 31			dta $13,$2B,$0C,$31 
   209
   210 201F 32 01 0A 20			dta $32,$01,$0A,$20
   211 2023 33 00 0A 21			dta $33,$00,$0A,$21
   212 2027 32 00 0A 20			dta $32,$00,$0A,$20
   213 202B 33 00 0A 21			dta $33,$00,$0A,$21
   214 202F 34 00 0B 22			dta $34,$00,$0B,$22
   215 2033 35 00 0B 23			dta $35,$00,$0B,$23
   216 2037 34 00 0B 22			dta $34,$00,$0B,$22
   217 203B 35 00 0B 23			dta $35,$00,$0B,$23
   218 203F 32 00 0A 24			dta $32,$00,$0A,$24
   219 2043 33 00 0A 25			dta $33,$00,$0A,$25
   220 2047 32 00 0A 24			dta $32,$00,$0A,$24
   221 204B 33 00 0A 25			dta $33,$00,$0A,$25
   222
   223 				/*
   224 					dta $01,$14,$0C,$1A
   225 					dta $00,$15,$0C,$1B
   226 					dta $00,$16,$0D,$1C
   227 					dta $00,$17,$0D,$1D
   228 					dta $00,$18,$0C,$1E
   229 					dta $00,$19,$0C,$1F 
   230 				*/
   230
   231
   232 204F			SONGLNE_END
   233
   234 				;-----------------
   235
   236 				;--------------------------------------------------------------------------------------------------; 
   237
   238 				;* Instrument Data Pointers, 5 bytes per instrument 
   239 				;* In order: Volume Envelope, Distortion/AUDCTL Envelope, Notes Table, Freqs Table, Commands Table 
   240
   241 204F			pickbass_c
   242 204F 00 00 FF FF 00		dta $00,$00,$FF,$FF,$00
   243 2054			pulse_drum_2 
   244 2054 01 01 FF FF FF		dta $01,$01,$FF,$FF,$FF
   245 2059			pulse_snare 
   246 2059 02 02 FF FF FF		dta $02,$02,$FF,$FF,$FF 
   247 205E			shaker_cut 
   248 205E 03 03 FF FF FF		dta $03,$03,$FF,$FF,$FF
   249 2063			shaker 
   250 2063 04 04 FF FF FF		dta $04,$04,$FF,$FF,$FF
   251 2068			pickbass_a
   252 2068 00 05 FF FF 00		dta $00,$05,$FF,$FF,$00
   253 206D			some_kind_of_flute_no_vib 
   254 206D 05 06 FF FF 01		dta $05,$06,$FF,$FF,$01
   255 2072			distortion_a_lead_2_pwm
   256 2072 06 07 FF FF 02		dta $06,$07,$FF,$FF,$02 
   257 2077			distortion_a_lead_2_pwm_set
   258 2077 06 07 FF FF 03		dta $06,$07,$FF,$FF,$03 
   259 207C			distortion_a_bell_64khz_pwm_set 
   260 207C 07 07 FF FF 04		dta $07,$07,$FF,$FF,$04 
   261 2081			distortion_c_179_arp 
   262 2081 06 08 FF FF 00		dta $06,$08,$FF,$FF,$00 
   263
   264 				;----------------- 
   265
   266 				;--------------------------------------------------------------------------------------------------;
   267
   268 				;* Row data used in patterns, indexed using the Pattern pointers 
   269 				;* The current format is not quite optimised at the moment, but it will become as flexible as possible 
   270 				;* Due to the way Patterns are constructed, "jumping" to a specific Row Number is not yet possible, unfortunately 
   271 				;* This may or may not be addressed in a future format revision, since this really isn't a big problem anyway 
   272 				;* Other than that, there is no hard limit related to the pattern length, unlike the RMT Module format 
   273 				;* The number of bytes per pattern is not technically limited, but the actual pattern length is capped at 256 Rows 
   274 				;* 256 Rows is be more than enough anyway, that was chosen only because that's also the highest number a single byte could count 
   275
   276 2086			PTN_00 
   277 2086				END_PATTERN 
Macro: END_PATTERN [Source: DUMB Module.inc]
     2 2086 00				.BYTE $00			; Pattern End 
Source: DUMB Module.asm
   278
   279 2087			PTN_01 
   280 2087				ROW OFF 
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    63 2087 40							.BYTE NOTE 
    64 2088 FF							.BYTE $FF	; no, this is NOT a PAUSE command! 
Source: DUMB Module.asm
   281 2089				END_PATTERN 
Macro: END_PATTERN [Source: DUMB Module.inc]
     2 2089 00				.BYTE $00			; Pattern End 
Source: DUMB Module.asm
   282 					
   283 				/*	
   284 					ROW C_0 $01 vF CMDF $07 
   285 					ROW C_0 $03 v2
   286 					ROW C_0 $04 v6
   287 					ROW C_0 $02 vF	
   288 					ROW C_0 $01 vF 
   289 					ROW C_0 $03 v2
   290 					ROW C_0 $02 vF
   291 					ROW C_0 $03 v2
   292 					ROW C_0 $01 vF 
   293 					ROW C_0 $03 v2
   294 					ROW C_0 $04 v6
   295 					ROW C_0 $02 vF
   296 					ROW C_0 $01 vF 
   297 					ROW C_0 $03 v2
   298 					ROW C_0 $02 vF
   299 					ROW C_0 $03 v2
   300 					ROW C_0 $01 vF 
   301 					ROW C_0 $03 v2
   302 					ROW C_0 $04 v6
   303 					ROW C_0 $02 vF	
   304 					ROW C_0 $01 vF 
   305 					ROW C_0 $03 v2
   306 					ROW C_0 $02 vF
   307 					ROW C_0 $03 v2	
   308 					ROW C_0 $01 vF 
   309 					ROW C_0 $03 v2
   310 					ROW C_0 $04 v6
   311 					ROW C_0 $02 vF	
   312 					ROW C_0 $01 vF 
   313 					ROW C_0 $03 v2
   314 					ROW C_0 $02 vF
   315 					ROW C_0 $03 v2	
   316 					ROW C_0 $01 vF 
   317 					ROW C_0 $02 vF 
   318 					ROW C_0 $04 v6
   319 					ROW C_0 $02 vF 
   320 					ROW C_0 $01 vF 
   321 					ROW C_0 $03 v2
   322 					ROW C_0 $02 vF
   323 					ROW C_0 $03 v2
   324 				*/
   324
   325 					
   326 208A			PTN_02 
   327 				/*
   328 					ROW F_2 $00 vF 
   329 					ROW PAUSE+1 
   330 					ROW F_2 $00 vF 
   331 					ROW PAUSE+1 	
   332 					ROW C_2 $00 vF 
   333 					ROW PAUSE 
   334 					ROW Cs2 $00 vF 
   335 					ROW PAUSE+1 
   336 					ROW Cs2 $00 vF 
   337 					ROW PAUSE+1 	
   338 					ROW As1 $00 vF 
   339 					ROW PAUSE 
   340 					ROW Ds2 $00 vF 
   341 					ROW PAUSE+1 
   342 					ROW Ds2 $00 vF 
   343 					ROW PAUSE+1 	
   344 					ROW F_2 $00 vF 
   345 					ROW PAUSE 
   346 					ROW Gs2 $00 vF 
   347 					ROW PAUSE+1 
   348 					ROW Gs2 $00 vF 
   349 					ROW PAUSE+1 	
   350 					ROW As2 $00 vF 
   351 					ROW PAUSE 
   352 					ROW C_3 $05 vF 
   353 					ROW PAUSE+1 
   354 					ROW Gs2 $00 vF 
   355 					ROW PAUSE+1 	
   356 					ROW G_2 $00 vF 
   357 					ROW PAUSE 
   358 				*/
   358
   359 					
   360 208A			PTN_03 
   361 				/*
   362 					ROW F_2 $00 vF 
   363 					ROW PAUSE+1 
   364 					ROW F_2 $00 vF 
   365 					ROW PAUSE+1 	
   366 					ROW C_2 $00 vF 
   367 					ROW PAUSE 
   368 					ROW Cs2 $00 vF 
   369 					ROW PAUSE+1 
   370 					ROW Cs2 $00 vF 
   371 					ROW PAUSE+1 	
   372 					ROW As1 $00 vF 
   373 					ROW PAUSE 
   374 					ROW Ds2 $00 vF 
   375 					ROW PAUSE+1 
   376 					ROW Ds2 $00 vF 
   377 					ROW PAUSE+1 	
   378 					ROW F_2 $00 vF 
   379 					ROW PAUSE 
   380 					ROW Gs2 $00 vF 
   381 					ROW PAUSE+1 
   382 					ROW Gs2 $00 vF 
   383 					ROW PAUSE+1 	
   384 					ROW As2 $00 vF 
   385 					ROW PAUSE 
   386 					ROW G_2 $00 vF 
   387 					ROW PAUSE+1 
   388 					ROW Gs2 $00 vF 
   389 					ROW PAUSE+1 	
   390 					ROW G_2 $00 vF 
   391 					ROW PAUSE 
   392 				*/
   392
   393 					
   394 208A			PTN_04
   395 208A				ROW C_3 $06 vF CMDF $09 CMD0 $00 CMD4 $00
Macro: ROW [Source: DUMB Module.inc]
    21 = 0009						argnum = 9	; up to 9 arguments may be valid 
   181 208A 7E						.BYTE NOTE + INSTRUMENT + VOLUME + COMMAND_1 + COMMAND_2 + COMMAND_3
   182 208B 24						.BYTE C_3 
   183 208C 86						.BYTE $06 + INSTRINIT
   184 208D F0						.BYTE VF
   185 208E 0F						.BYTE CMDF 
   186 208F 09						.BYTE $09
   187 2090 00						.BYTE CMD0
   188 2091 00						.BYTE $00 
   189 2092 04						.BYTE CMD4
   190 2093 00						.BYTE $00
Source: DUMB Module.asm
   396 2094				ROW As3 $06 vF
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2094 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2095 2E							.BYTE AS3 
   111 2096 86							.BYTE $06 + INSTRINIT
   112 2097 F0							.BYTE VF 
Source: DUMB Module.asm
   397 2098				ROW A_3 $06 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2098 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2099 2D							.BYTE A_3 
   111 209A 86							.BYTE $06 + INSTRINIT
   112 209B F0							.BYTE VF 
Source: DUMB Module.asm
   398 209C				ROW ___ ___ v6 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 209C 10							.BYTE VOLUME 
    83 209D 60							.BYTE V6 
Source: DUMB Module.asm
   399 209E				ROW F_3 $06 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 209E 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 209F 29							.BYTE F_3 
   111 20A0 86							.BYTE $06 + INSTRINIT
   112 20A1 F0							.BYTE VF 
Source: DUMB Module.asm
   400 20A2				ROW PAUSE+1
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 20A2 81							.BYTE PAUSE+1	; PAUSE+1 is a Row Pause Command
Source: DUMB Module.asm
   401 20A3				ROW ___ ___ v6 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 20A3 10							.BYTE VOLUME 
    83 20A4 60							.BYTE V6 
Source: DUMB Module.asm
   402 20A5				ROW G_3 $06 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 20A5 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 20A6 2B							.BYTE G_3 
   111 20A7 86							.BYTE $06 + INSTRINIT
   112 20A8 F0							.BYTE VF 
Source: DUMB Module.asm
   403 20A9				ROW E_3 $06 vF
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 20A9 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 20AA 28							.BYTE E_3 
   111 20AB 86							.BYTE $06 + INSTRINIT
   112 20AC F0							.BYTE VF 
Source: DUMB Module.asm
   404 20AD				ROW D_3 $06 vF
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 20AD 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 20AE 26							.BYTE D_3 
   111 20AF 86							.BYTE $06 + INSTRINIT
   112 20B0 F0							.BYTE VF 
Source: DUMB Module.asm
   405 20B1				ROW ___ ___ v6 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 20B1 10							.BYTE VOLUME 
    83 20B2 60							.BYTE V6 
Source: DUMB Module.asm
   406 20B3				ROW C_3 $06 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 20B3 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 20B4 24							.BYTE C_3 
   111 20B5 86							.BYTE $06 + INSTRINIT
   112 20B6 F0							.BYTE VF 
Source: DUMB Module.asm
   407 20B7				ROW D_3 $06 vF
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 20B7 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 20B8 26							.BYTE D_3 
   111 20B9 86							.BYTE $06 + INSTRINIT
   112 20BA F0							.BYTE VF 
Source: DUMB Module.asm
   408 20BB				ROW PAUSE+1
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 20BB 81							.BYTE PAUSE+1	; PAUSE+1 is a Row Pause Command
Source: DUMB Module.asm
   409 20BC				ROW ___ ___ v6
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 20BC 10							.BYTE VOLUME 
    83 20BD 60							.BYTE V6 
Source: DUMB Module.asm
   410 20BE				ROW ___ ___ v2
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 20BE 10							.BYTE VOLUME 
    83 20BF 20							.BYTE V2 
Source: DUMB Module.asm
   411 20C0				ROW C_3 $06 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 20C0 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 20C1 24							.BYTE C_3 
   111 20C2 86							.BYTE $06 + INSTRINIT
   112 20C3 F0							.BYTE VF 
Source: DUMB Module.asm
   412 20C4				ROW ___ ___ v6
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 20C4 10							.BYTE VOLUME 
    83 20C5 60							.BYTE V6 
Source: DUMB Module.asm
   413 20C6				ROW D_3 $06 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 20C6 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 20C7 26							.BYTE D_3 
   111 20C8 86							.BYTE $06 + INSTRINIT
   112 20C9 F0							.BYTE VF 
Source: DUMB Module.asm
   414 20CA				ROW ___ ___ v6
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 20CA 10							.BYTE VOLUME 
    83 20CB 60							.BYTE V6 
Source: DUMB Module.asm
   415 20CC				ROW F_3 $06 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 20CC 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 20CD 29							.BYTE F_3 
   111 20CE 86							.BYTE $06 + INSTRINIT
   112 20CF F0							.BYTE VF 
Source: DUMB Module.asm
   416 20D0				ROW ___ ___ v6
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 20D0 10							.BYTE VOLUME 
    83 20D1 60							.BYTE V6 
Source: DUMB Module.asm
   417 20D2				ROW AS3 $06 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 20D2 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 20D3 2E							.BYTE AS3 
   111 20D4 86							.BYTE $06 + INSTRINIT
   112 20D5 F0							.BYTE VF 
Source: DUMB Module.asm
   418 20D6				ROW ___ ___ v6
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 20D6 10							.BYTE VOLUME 
    83 20D7 60							.BYTE V6 
Source: DUMB Module.asm
   419 20D8				ROW A_3 $06 vF
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 20D8 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 20D9 2D							.BYTE A_3 
   111 20DA 86							.BYTE $06 + INSTRINIT
   112 20DB F0							.BYTE VF 
Source: DUMB Module.asm
   420 20DC				ROW G_3 $06 vF
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 20DC 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 20DD 2B							.BYTE G_3 
   111 20DE 86							.BYTE $06 + INSTRINIT
   112 20DF F0							.BYTE VF 
Source: DUMB Module.asm
   421 20E0				ROW PAUSE+1
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 20E0 81							.BYTE PAUSE+1	; PAUSE+1 is a Row Pause Command
Source: DUMB Module.asm
   422 20E1				ROW ___ ___ v6
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 20E1 10							.BYTE VOLUME 
    83 20E2 60							.BYTE V6 
Source: DUMB Module.asm
   423 20E3				ROW ___ ___ v2
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 20E3 10							.BYTE VOLUME 
    83 20E4 20							.BYTE V2 
Source: DUMB Module.asm
   424 					
   425 20E5			PTN_05
   426 20E5				ROW C_3 $06 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 20E5 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 20E6 24							.BYTE C_3 
   111 20E7 86							.BYTE $06 + INSTRINIT
   112 20E8 F0							.BYTE VF 
Source: DUMB Module.asm
   427 20E9				ROW As3 $06 vF
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 20E9 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 20EA 2E							.BYTE AS3 
   111 20EB 86							.BYTE $06 + INSTRINIT
   112 20EC F0							.BYTE VF 
Source: DUMB Module.asm
   428 20ED				ROW A_3 $06 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 20ED 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 20EE 2D							.BYTE A_3 
   111 20EF 86							.BYTE $06 + INSTRINIT
   112 20F0 F0							.BYTE VF 
Source: DUMB Module.asm
   429 20F1				ROW ___ ___ v6 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 20F1 10							.BYTE VOLUME 
    83 20F2 60							.BYTE V6 
Source: DUMB Module.asm
   430 20F3				ROW F_3 $06 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 20F3 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 20F4 29							.BYTE F_3 
   111 20F5 86							.BYTE $06 + INSTRINIT
   112 20F6 F0							.BYTE VF 
Source: DUMB Module.asm
   431 20F7				ROW PAUSE+1
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 20F7 81							.BYTE PAUSE+1	; PAUSE+1 is a Row Pause Command
Source: DUMB Module.asm
   432 20F8				ROW ___ ___ v6 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 20F8 10							.BYTE VOLUME 
    83 20F9 60							.BYTE V6 
Source: DUMB Module.asm
   433 20FA				ROW G_3 $06 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 20FA 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 20FB 2B							.BYTE G_3 
   111 20FC 86							.BYTE $06 + INSTRINIT
   112 20FD F0							.BYTE VF 
Source: DUMB Module.asm
   434 20FE				ROW E_3 $06 vF
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 20FE 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 20FF 28							.BYTE E_3 
   111 2100 86							.BYTE $06 + INSTRINIT
   112 2101 F0							.BYTE VF 
Source: DUMB Module.asm
   435 2102				ROW D_3 $06 vF
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2102 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2103 26							.BYTE D_3 
   111 2104 86							.BYTE $06 + INSTRINIT
   112 2105 F0							.BYTE VF 
Source: DUMB Module.asm
   436 2106				ROW ___ ___ v6 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 2106 10							.BYTE VOLUME 
    83 2107 60							.BYTE V6 
Source: DUMB Module.asm
   437 2108				ROW C_3 $06 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2108 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2109 24							.BYTE C_3 
   111 210A 86							.BYTE $06 + INSTRINIT
   112 210B F0							.BYTE VF 
Source: DUMB Module.asm
   438 210C				ROW D_3 $06 vF
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 210C 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 210D 26							.BYTE D_3 
   111 210E 86							.BYTE $06 + INSTRINIT
   112 210F F0							.BYTE VF 
Source: DUMB Module.asm
   439 2110				ROW PAUSE+1
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 2110 81							.BYTE PAUSE+1	; PAUSE+1 is a Row Pause Command
Source: DUMB Module.asm
   440 2111				ROW ___ ___ v6
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 2111 10							.BYTE VOLUME 
    83 2112 60							.BYTE V6 
Source: DUMB Module.asm
   441 2113				ROW ___ ___ v2
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 2113 10							.BYTE VOLUME 
    83 2114 20							.BYTE V2 
Source: DUMB Module.asm
   442 2115				ROW F_3 $06 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2115 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2116 29							.BYTE F_3 
   111 2117 86							.BYTE $06 + INSTRINIT
   112 2118 F0							.BYTE VF 
Source: DUMB Module.asm
   443 2119				ROW G_3 $06 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2119 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 211A 2B							.BYTE G_3 
   111 211B 86							.BYTE $06 + INSTRINIT
   112 211C F0							.BYTE VF 
Source: DUMB Module.asm
   444 211D				ROW A_3 $06 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 211D 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 211E 2D							.BYTE A_3 
   111 211F 86							.BYTE $06 + INSTRINIT
   112 2120 F0							.BYTE VF 
Source: DUMB Module.asm
   445 2121				ROW ___ ___ v6
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 2121 10							.BYTE VOLUME 
    83 2122 60							.BYTE V6 
Source: DUMB Module.asm
   446 2123				ROW As3 $06 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2123 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2124 2E							.BYTE AS3 
   111 2125 86							.BYTE $06 + INSTRINIT
   112 2126 F0							.BYTE VF 
Source: DUMB Module.asm
   447 2127				ROW ___ ___ v6
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 2127 10							.BYTE VOLUME 
    83 2128 60							.BYTE V6 
Source: DUMB Module.asm
   448 2129				ROW C_4 $06 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2129 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 212A 30							.BYTE C_4 
   111 212B 86							.BYTE $06 + INSTRINIT
   112 212C F0							.BYTE VF 
Source: DUMB Module.asm
   449 212D				ROW ___ ___ v6
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 212D 10							.BYTE VOLUME 
    83 212E 60							.BYTE V6 
Source: DUMB Module.asm
   450 212F				ROW D_4 $06 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 212F 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2130 32							.BYTE D_4 
   111 2131 86							.BYTE $06 + INSTRINIT
   112 2132 F0							.BYTE VF 
Source: DUMB Module.asm
   451 2133				ROW ___ ___ v6
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 2133 10							.BYTE VOLUME 
    83 2134 60							.BYTE V6 
Source: DUMB Module.asm
   452 2135				ROW As3 $06 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2135 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2136 2E							.BYTE AS3 
   111 2137 86							.BYTE $06 + INSTRINIT
   112 2138 F0							.BYTE VF 
Source: DUMB Module.asm
   453 2139				ROW A_3 $06 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2139 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 213A 2D							.BYTE A_3 
   111 213B 86							.BYTE $06 + INSTRINIT
   112 213C F0							.BYTE VF 
Source: DUMB Module.asm
   454 213D				ROW PAUSE 
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 213D 80							.BYTE PAUSE	; PAUSE is a Row Pause Command
Source: DUMB Module.asm
   455 213E				ROW ___ ___ v6
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 213E 10							.BYTE VOLUME 
    83 213F 60							.BYTE V6 
Source: DUMB Module.asm
   456 					
   457 2140			PTN_06 
   458 2140				ROW G_3 $06 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2140 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2141 2B							.BYTE G_3 
   111 2142 86							.BYTE $06 + INSTRINIT
   112 2143 F0							.BYTE VF 
Source: DUMB Module.asm
   459 2144				ROW PAUSE+3 
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 2144 83							.BYTE PAUSE+3	; PAUSE+3 is a Row Pause Command
Source: DUMB Module.asm
   460 2145				ROW ___ ___ v6
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 2145 10							.BYTE VOLUME 
    83 2146 60							.BYTE V6 
Source: DUMB Module.asm
   461 2147				ROW ___ ___ v2
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 2147 10							.BYTE VOLUME 
    83 2148 20							.BYTE V2 
Source: DUMB Module.asm
   462 2149				ROW PAUSE 	
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 2149 80							.BYTE PAUSE	; PAUSE is a Row Pause Command
Source: DUMB Module.asm
   463 214A				ROW E_3 $06 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 214A 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 214B 28							.BYTE E_3 
   111 214C 86							.BYTE $06 + INSTRINIT
   112 214D F0							.BYTE VF 
Source: DUMB Module.asm
   464 214E				ROW ___ ___ v6	
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 214E 10							.BYTE VOLUME 
    83 214F 60							.BYTE V6 
Source: DUMB Module.asm
   465 2150				ROW F_3 $06 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2150 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2151 29							.BYTE F_3 
   111 2152 86							.BYTE $06 + INSTRINIT
   112 2153 F0							.BYTE VF 
Source: DUMB Module.asm
   466 2154				ROW E_3 $06 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2154 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2155 28							.BYTE E_3 
   111 2156 86							.BYTE $06 + INSTRINIT
   112 2157 F0							.BYTE VF 
Source: DUMB Module.asm
   467 2158				ROW ___ ___ v6
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 2158 10							.BYTE VOLUME 
    83 2159 60							.BYTE V6 
Source: DUMB Module.asm
   468 215A				ROW D_3 $06 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 215A 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 215B 26							.BYTE D_3 
   111 215C 86							.BYTE $06 + INSTRINIT
   112 215D F0							.BYTE VF 
Source: DUMB Module.asm
   469 215E				ROW C_3 $06 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 215E 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 215F 24							.BYTE C_3 
   111 2160 86							.BYTE $06 + INSTRINIT
   112 2161 F0							.BYTE VF 
Source: DUMB Module.asm
   470 2162				ROW ___ ___ v6	
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 2162 10							.BYTE VOLUME 
    83 2163 60							.BYTE V6 
Source: DUMB Module.asm
   471 2164				ROW D_3 $06 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2164 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2165 26							.BYTE D_3 
   111 2166 86							.BYTE $06 + INSTRINIT
   112 2167 F0							.BYTE VF 
Source: DUMB Module.asm
   472 2168				ROW PAUSE+3 
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 2168 83							.BYTE PAUSE+3	; PAUSE+3 is a Row Pause Command
Source: DUMB Module.asm
   473 2169				ROW ___ ___ v6
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 2169 10							.BYTE VOLUME 
    83 216A 60							.BYTE V6 
Source: DUMB Module.asm
   474 216B				ROW ___ ___ v2
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 216B 10							.BYTE VOLUME 
    83 216C 20							.BYTE V2 
Source: DUMB Module.asm
   475 216D				ROW PAUSE 
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 216D 80							.BYTE PAUSE	; PAUSE is a Row Pause Command
Source: DUMB Module.asm
   476 216E				ROW G_3 $06 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 216E 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 216F 2B							.BYTE G_3 
   111 2170 86							.BYTE $06 + INSTRINIT
   112 2171 F0							.BYTE VF 
Source: DUMB Module.asm
   477 2172				ROW A_3 $06 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2172 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2173 2D							.BYTE A_3 
   111 2174 86							.BYTE $06 + INSTRINIT
   112 2175 F0							.BYTE VF 
Source: DUMB Module.asm
   478 2176				ROW As3 $06 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2176 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2177 2E							.BYTE AS3 
   111 2178 86							.BYTE $06 + INSTRINIT
   112 2179 F0							.BYTE VF 
Source: DUMB Module.asm
   479 217A				ROW C_4 $06 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 217A 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 217B 30							.BYTE C_4 
   111 217C 86							.BYTE $06 + INSTRINIT
   112 217D F0							.BYTE VF 
Source: DUMB Module.asm
   480 217E				ROW ___ ___ v6
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 217E 10							.BYTE VOLUME 
    83 217F 60							.BYTE V6 
Source: DUMB Module.asm
   481 2180				ROW As3 $06 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2180 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2181 2E							.BYTE AS3 
   111 2182 86							.BYTE $06 + INSTRINIT
   112 2183 F0							.BYTE VF 
Source: DUMB Module.asm
   482 2184				ROW A_3 $06 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2184 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2185 2D							.BYTE A_3 
   111 2186 86							.BYTE $06 + INSTRINIT
   112 2187 F0							.BYTE VF 
Source: DUMB Module.asm
   483 2188				ROW ___ ___ v6
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 2188 10							.BYTE VOLUME 
    83 2189 60							.BYTE V6 
Source: DUMB Module.asm
   484 					
   485 218A			PTN_07
   486 218A				ROW G_3 $06 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 218A 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 218B 2B							.BYTE G_3 
   111 218C 86							.BYTE $06 + INSTRINIT
   112 218D F0							.BYTE VF 
Source: DUMB Module.asm
   487 218E				ROW PAUSE+3 
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 218E 83							.BYTE PAUSE+3	; PAUSE+3 is a Row Pause Command
Source: DUMB Module.asm
   488 218F				ROW ___ ___ v6
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 218F 10							.BYTE VOLUME 
    83 2190 60							.BYTE V6 
Source: DUMB Module.asm
   489 2191				ROW ___ ___ v2
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 2191 10							.BYTE VOLUME 
    83 2192 20							.BYTE V2 
Source: DUMB Module.asm
   490 2193				ROW PAUSE 	
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 2193 80							.BYTE PAUSE	; PAUSE is a Row Pause Command
Source: DUMB Module.asm
   491 2194				ROW E_3 $06 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2194 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2195 28							.BYTE E_3 
   111 2196 86							.BYTE $06 + INSTRINIT
   112 2197 F0							.BYTE VF 
Source: DUMB Module.asm
   492 2198				ROW ___ ___ v6	
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 2198 10							.BYTE VOLUME 
    83 2199 60							.BYTE V6 
Source: DUMB Module.asm
   493 219A				ROW F_3 $06 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 219A 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 219B 29							.BYTE F_3 
   111 219C 86							.BYTE $06 + INSTRINIT
   112 219D F0							.BYTE VF 
Source: DUMB Module.asm
   494 219E				ROW E_3 $06 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 219E 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 219F 28							.BYTE E_3 
   111 21A0 86							.BYTE $06 + INSTRINIT
   112 21A1 F0							.BYTE VF 
Source: DUMB Module.asm
   495 21A2				ROW ___ ___ v6
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 21A2 10							.BYTE VOLUME 
    83 21A3 60							.BYTE V6 
Source: DUMB Module.asm
   496 21A4				ROW D_3 $06 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 21A4 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 21A5 26							.BYTE D_3 
   111 21A6 86							.BYTE $06 + INSTRINIT
   112 21A7 F0							.BYTE VF 
Source: DUMB Module.asm
   497 21A8				ROW C_3 $06 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 21A8 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 21A9 24							.BYTE C_3 
   111 21AA 86							.BYTE $06 + INSTRINIT
   112 21AB F0							.BYTE VF 
Source: DUMB Module.asm
   498 21AC				ROW ___ ___ v6	
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 21AC 10							.BYTE VOLUME 
    83 21AD 60							.BYTE V6 
Source: DUMB Module.asm
   499 21AE				ROW D_3 $06 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 21AE 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 21AF 26							.BYTE D_3 
   111 21B0 86							.BYTE $06 + INSTRINIT
   112 21B1 F0							.BYTE VF 
Source: DUMB Module.asm
   500 21B2				ROW PAUSE+3 
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 21B2 83							.BYTE PAUSE+3	; PAUSE+3 is a Row Pause Command
Source: DUMB Module.asm
   501 21B3				ROW ___ ___ v6
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 21B3 10							.BYTE VOLUME 
    83 21B4 60							.BYTE V6 
Source: DUMB Module.asm
   502 21B5				ROW ___ ___ v2
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 21B5 10							.BYTE VOLUME 
    83 21B6 20							.BYTE V2 
Source: DUMB Module.asm
   503 21B7				ROW PAUSE 
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 21B7 80							.BYTE PAUSE	; PAUSE is a Row Pause Command
Source: DUMB Module.asm
   504 21B8				ROW G_3 $06 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 21B8 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 21B9 2B							.BYTE G_3 
   111 21BA 86							.BYTE $06 + INSTRINIT
   112 21BB F0							.BYTE VF 
Source: DUMB Module.asm
   505 21BC				ROW A_3 $06 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 21BC 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 21BD 2D							.BYTE A_3 
   111 21BE 86							.BYTE $06 + INSTRINIT
   112 21BF F0							.BYTE VF 
Source: DUMB Module.asm
   506 21C0				ROW As3 $06 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 21C0 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 21C1 2E							.BYTE AS3 
   111 21C2 86							.BYTE $06 + INSTRINIT
   112 21C3 F0							.BYTE VF 
Source: DUMB Module.asm
   507 21C4				ROW G_3 $06 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 21C4 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 21C5 2B							.BYTE G_3 
   111 21C6 86							.BYTE $06 + INSTRINIT
   112 21C7 F0							.BYTE VF 
Source: DUMB Module.asm
   508 21C8				ROW ___ ___ v6
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 21C8 10							.BYTE VOLUME 
    83 21C9 60							.BYTE V6 
Source: DUMB Module.asm
   509 21CA				ROW A_3 $06 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 21CA 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 21CB 2D							.BYTE A_3 
   111 21CC 86							.BYTE $06 + INSTRINIT
   112 21CD F0							.BYTE VF 
Source: DUMB Module.asm
   510 21CE				ROW ___ ___ v6
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 21CE 10							.BYTE VOLUME 
    83 21CF 60							.BYTE V6 
Source: DUMB Module.asm
   511 21D0				ROW F_3 $06 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 21D0 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 21D1 29							.BYTE F_3 
   111 21D2 86							.BYTE $06 + INSTRINIT
   112 21D3 F0							.BYTE VF 
Source: DUMB Module.asm
   512
   513 21D4			PTN_08
   514 21D4				ROW C_3 $06 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 21D4 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 21D5 24							.BYTE C_3 
   111 21D6 86							.BYTE $06 + INSTRINIT
   112 21D7 F0							.BYTE VF 
Source: DUMB Module.asm
   515 21D8				ROW As3 $06 vF
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 21D8 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 21D9 2E							.BYTE AS3 
   111 21DA 86							.BYTE $06 + INSTRINIT
   112 21DB F0							.BYTE VF 
Source: DUMB Module.asm
   516 21DC				ROW A_3 $06 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 21DC 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 21DD 2D							.BYTE A_3 
   111 21DE 86							.BYTE $06 + INSTRINIT
   112 21DF F0							.BYTE VF 
Source: DUMB Module.asm
   517 21E0				ROW ___ ___ v6 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 21E0 10							.BYTE VOLUME 
    83 21E1 60							.BYTE V6 
Source: DUMB Module.asm
   518 21E2				ROW F_3 $06 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 21E2 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 21E3 29							.BYTE F_3 
   111 21E4 86							.BYTE $06 + INSTRINIT
   112 21E5 F0							.BYTE VF 
Source: DUMB Module.asm
   519 21E6				ROW PAUSE
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 21E6 80							.BYTE PAUSE	; PAUSE is a Row Pause Command
Source: DUMB Module.asm
   520 21E7				ROW ___ ___ v6
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 21E7 10							.BYTE VOLUME 
    83 21E8 60							.BYTE V6 
Source: DUMB Module.asm
   521 21E9				ROW ___ ___ v2 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 21E9 10							.BYTE VOLUME 
    83 21EA 20							.BYTE V2 
Source: DUMB Module.asm
   522 21EB				ROW G_3 $06 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 21EB 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 21EC 2B							.BYTE G_3 
   111 21ED 86							.BYTE $06 + INSTRINIT
   112 21EE F0							.BYTE VF 
Source: DUMB Module.asm
   523 21EF				ROW E_3 $06 vF
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 21EF 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 21F0 28							.BYTE E_3 
   111 21F1 86							.BYTE $06 + INSTRINIT
   112 21F2 F0							.BYTE VF 
Source: DUMB Module.asm
   524 21F3				ROW D_3 $06 vF
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 21F3 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 21F4 26							.BYTE D_3 
   111 21F5 86							.BYTE $06 + INSTRINIT
   112 21F6 F0							.BYTE VF 
Source: DUMB Module.asm
   525 21F7				ROW ___ ___ v6 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 21F7 10							.BYTE VOLUME 
    83 21F8 60							.BYTE V6 
Source: DUMB Module.asm
   526 21F9				ROW C_3 $06 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 21F9 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 21FA 24							.BYTE C_3 
   111 21FB 86							.BYTE $06 + INSTRINIT
   112 21FC F0							.BYTE VF 
Source: DUMB Module.asm
   527 21FD				ROW D_3 $06 vF
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 21FD 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 21FE 26							.BYTE D_3 
   111 21FF 86							.BYTE $06 + INSTRINIT
   112 2200 F0							.BYTE VF 
Source: DUMB Module.asm
   528 2201				ROW PAUSE+1
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 2201 81							.BYTE PAUSE+1	; PAUSE+1 is a Row Pause Command
Source: DUMB Module.asm
   529 2202				ROW ___ ___ v6
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 2202 10							.BYTE VOLUME 
    83 2203 60							.BYTE V6 
Source: DUMB Module.asm
   530 2204				ROW ___ ___ v2
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 2204 10							.BYTE VOLUME 
    83 2205 20							.BYTE V2 
Source: DUMB Module.asm
   531 2206				ROW C_3 $06 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2206 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2207 24							.BYTE C_3 
   111 2208 86							.BYTE $06 + INSTRINIT
   112 2209 F0							.BYTE VF 
Source: DUMB Module.asm
   532 220A				ROW ___ ___ v6
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 220A 10							.BYTE VOLUME 
    83 220B 60							.BYTE V6 
Source: DUMB Module.asm
   533 220C				ROW E_3 $06 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 220C 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 220D 28							.BYTE E_3 
   111 220E 86							.BYTE $06 + INSTRINIT
   112 220F F0							.BYTE VF 
Source: DUMB Module.asm
   534 2210				ROW F_3 $06 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2210 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2211 29							.BYTE F_3 
   111 2212 86							.BYTE $06 + INSTRINIT
   112 2213 F0							.BYTE VF 
Source: DUMB Module.asm
   535 2214				ROW PAUSE
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 2214 80							.BYTE PAUSE	; PAUSE is a Row Pause Command
Source: DUMB Module.asm
   536 2215				ROW ___ ___ v6 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 2215 10							.BYTE VOLUME 
    83 2216 60							.BYTE V6 
Source: DUMB Module.asm
   537 2217				ROW E_3 $06 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2217 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2218 28							.BYTE E_3 
   111 2219 86							.BYTE $06 + INSTRINIT
   112 221A F0							.BYTE VF 
Source: DUMB Module.asm
   538 221B				ROW ___ ___ v6 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 221B 10							.BYTE VOLUME 
    83 221C 60							.BYTE V6 
Source: DUMB Module.asm
   539 221D				ROW D_3 $06 vF
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 221D 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 221E 26							.BYTE D_3 
   111 221F 86							.BYTE $06 + INSTRINIT
   112 2220 F0							.BYTE VF 
Source: DUMB Module.asm
   540 2221				ROW PAUSE+2
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 2221 82							.BYTE PAUSE+2	; PAUSE+2 is a Row Pause Command
Source: DUMB Module.asm
   541 2222				ROW ___ ___ v6
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 2222 10							.BYTE VOLUME 
    83 2223 60							.BYTE V6 
Source: DUMB Module.asm
   542 2224				ROW ___ ___ v2
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 2224 10							.BYTE VOLUME 
    83 2225 20							.BYTE V2 
Source: DUMB Module.asm
   543
   544 2226			PTN_09
   545 2226				ROW C_3 $06 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2226 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2227 24							.BYTE C_3 
   111 2228 86							.BYTE $06 + INSTRINIT
   112 2229 F0							.BYTE VF 
Source: DUMB Module.asm
   546 222A				ROW ___ ___ v6
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 222A 10							.BYTE VOLUME 
    83 222B 60							.BYTE V6 
Source: DUMB Module.asm
   547 222C				ROW As3 $06 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 222C 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 222D 2E							.BYTE AS3 
   111 222E 86							.BYTE $06 + INSTRINIT
   112 222F F0							.BYTE VF 
Source: DUMB Module.asm
   548 2230				ROW ___ ___ v6
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 2230 10							.BYTE VOLUME 
    83 2231 60							.BYTE V6 
Source: DUMB Module.asm
   549 2232				ROW C_4 $06 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2232 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2233 30							.BYTE C_4 
   111 2234 86							.BYTE $06 + INSTRINIT
   112 2235 F0							.BYTE VF 
Source: DUMB Module.asm
   550 2236				ROW As3 $06 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2236 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2237 2E							.BYTE AS3 
   111 2238 86							.BYTE $06 + INSTRINIT
   112 2239 F0							.BYTE VF 
Source: DUMB Module.asm
   551 223A				ROW PAUSE 
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 223A 80							.BYTE PAUSE	; PAUSE is a Row Pause Command
Source: DUMB Module.asm
   552 223B				ROW ___ ___ v6
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 223B 10							.BYTE VOLUME 
    83 223C 60							.BYTE V6 
Source: DUMB Module.asm
   553 223D				ROW A_3 $06 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 223D 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 223E 2D							.BYTE A_3 
   111 223F 86							.BYTE $06 + INSTRINIT
   112 2240 F0							.BYTE VF 
Source: DUMB Module.asm
   554 2241				ROW PAUSE 
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 2241 80							.BYTE PAUSE	; PAUSE is a Row Pause Command
Source: DUMB Module.asm
   555 2242				ROW ___ ___ v6	
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 2242 10							.BYTE VOLUME 
    83 2243 60							.BYTE V6 
Source: DUMB Module.asm
   556 2244				ROW G_3 $06 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2244 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2245 2B							.BYTE G_3 
   111 2246 86							.BYTE $06 + INSTRINIT
   112 2247 F0							.BYTE VF 
Source: DUMB Module.asm
   557 2248				ROW ___ ___ v6
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 2248 10							.BYTE VOLUME 
    83 2249 60							.BYTE V6 
Source: DUMB Module.asm
   558 224A				ROW F_3 $06 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 224A 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 224B 29							.BYTE F_3 
   111 224C 86							.BYTE $06 + INSTRINIT
   112 224D F0							.BYTE VF 
Source: DUMB Module.asm
   559 224E				ROW ___ ___ v6	
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 224E 10							.BYTE VOLUME 
    83 224F 60							.BYTE V6 
Source: DUMB Module.asm
   560 2250				ROW A_3 $06 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2250 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2251 2D							.BYTE A_3 
   111 2252 86							.BYTE $06 + INSTRINIT
   112 2253 F0							.BYTE VF 
Source: DUMB Module.asm
   561 2254				ROW G_3 $06 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2254 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2255 2B							.BYTE G_3 
   111 2256 86							.BYTE $06 + INSTRINIT
   112 2257 F0							.BYTE VF 
Source: DUMB Module.asm
   562 2258				ROW PAUSE+6 
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 2258 86							.BYTE PAUSE+6	; PAUSE+6 is a Row Pause Command
Source: DUMB Module.asm
   563 2259				ROW ___ ___ v6
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 2259 10							.BYTE VOLUME 
    83 225A 60							.BYTE V6 
Source: DUMB Module.asm
   564 225B				ROW PAUSE+4
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 225B 84							.BYTE PAUSE+4	; PAUSE+4 is a Row Pause Command
Source: DUMB Module.asm
   565 225C				ROW ___ ___ v2
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 225C 10							.BYTE VOLUME 
    83 225D 20							.BYTE V2 
Source: DUMB Module.asm
   566 225E				END_PATTERN 
Macro: END_PATTERN [Source: DUMB Module.inc]
     2 225E 00				.BYTE $00			; Pattern End 
Source: DUMB Module.asm
   567 					
   568 225F			PTN_0A
   569 225F				ROW C_2 $00 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 225F 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2260 18							.BYTE C_2 
   111 2261 80							.BYTE $00 + INSTRINIT
   112 2262 F0							.BYTE VF 
Source: DUMB Module.asm
   570 2263				ROW PAUSE+1
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 2263 81							.BYTE PAUSE+1	; PAUSE+1 is a Row Pause Command
Source: DUMB Module.asm
   571 2264				ROW C_2 $00 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2264 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2265 18							.BYTE C_2 
   111 2266 80							.BYTE $00 + INSTRINIT
   112 2267 F0							.BYTE VF 
Source: DUMB Module.asm
   572 2268				ROW PAUSE+1
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 2268 81							.BYTE PAUSE+1	; PAUSE+1 is a Row Pause Command
Source: DUMB Module.asm
   573 2269				ROW C_2 $00 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2269 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 226A 18							.BYTE C_2 
   111 226B 80							.BYTE $00 + INSTRINIT
   112 226C F0							.BYTE VF 
Source: DUMB Module.asm
   574 226D				ROW PAUSE
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 226D 80							.BYTE PAUSE	; PAUSE is a Row Pause Command
Source: DUMB Module.asm
   575 226E				ROW D_2 $00 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 226E 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 226F 1A							.BYTE D_2 
   111 2270 80							.BYTE $00 + INSTRINIT
   112 2271 F0							.BYTE VF 
Source: DUMB Module.asm
   576 2272				ROW PAUSE+1
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 2272 81							.BYTE PAUSE+1	; PAUSE+1 is a Row Pause Command
Source: DUMB Module.asm
   577 2273				ROW As1 $00 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2273 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2274 16							.BYTE AS1 
   111 2275 80							.BYTE $00 + INSTRINIT
   112 2276 F0							.BYTE VF 
Source: DUMB Module.asm
   578 2277				ROW PAUSE+1
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 2277 81							.BYTE PAUSE+1	; PAUSE+1 is a Row Pause Command
Source: DUMB Module.asm
   579 2278				ROW A_1 $00 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2278 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2279 15							.BYTE A_1 
   111 227A 80							.BYTE $00 + INSTRINIT
   112 227B F0							.BYTE VF 
Source: DUMB Module.asm
   580 227C				ROW PAUSE
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 227C 80							.BYTE PAUSE	; PAUSE is a Row Pause Command
Source: DUMB Module.asm
   581 227D				ROW G_1 $00 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 227D 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 227E 13							.BYTE G_1 
   111 227F 80							.BYTE $00 + INSTRINIT
   112 2280 F0							.BYTE VF 
Source: DUMB Module.asm
   582 2281				ROW PAUSE+1
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 2281 81							.BYTE PAUSE+1	; PAUSE+1 is a Row Pause Command
Source: DUMB Module.asm
   583 2282				ROW G_1 $00 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2282 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2283 13							.BYTE G_1 
   111 2284 80							.BYTE $00 + INSTRINIT
   112 2285 F0							.BYTE VF 
Source: DUMB Module.asm
   584 2286				ROW PAUSE+1
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 2286 81							.BYTE PAUSE+1	; PAUSE+1 is a Row Pause Command
Source: DUMB Module.asm
   585 2287				ROW F_1 $00 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2287 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2288 11							.BYTE F_1 
   111 2289 80							.BYTE $00 + INSTRINIT
   112 228A F0							.BYTE VF 
Source: DUMB Module.asm
   586 228B				ROW PAUSE
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 228B 80							.BYTE PAUSE	; PAUSE is a Row Pause Command
Source: DUMB Module.asm
   587 228C				ROW As1 $00 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 228C 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 228D 16							.BYTE AS1 
   111 228E 80							.BYTE $00 + INSTRINIT
   112 228F F0							.BYTE VF 
Source: DUMB Module.asm
   588 2290				ROW PAUSE+1
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 2290 81							.BYTE PAUSE+1	; PAUSE+1 is a Row Pause Command
Source: DUMB Module.asm
   589 2291				ROW C_2 $00 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2291 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2292 18							.BYTE C_2 
   111 2293 80							.BYTE $00 + INSTRINIT
   112 2294 F0							.BYTE VF 
Source: DUMB Module.asm
   590 2295				ROW PAUSE+1
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 2295 81							.BYTE PAUSE+1	; PAUSE+1 is a Row Pause Command
Source: DUMB Module.asm
   591 2296				ROW D_2 $00 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2296 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2297 1A							.BYTE D_2 
   111 2298 80							.BYTE $00 + INSTRINIT
   112 2299 F0							.BYTE VF 
Source: DUMB Module.asm
   592 229A				END_PATTERN
Macro: END_PATTERN [Source: DUMB Module.inc]
     2 229A 00				.BYTE $00			; Pattern End 
Source: DUMB Module.asm
   593
   594 229B			PTN_0B
   595 229B				ROW C_2 $00 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 229B 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 229C 18							.BYTE C_2 
   111 229D 80							.BYTE $00 + INSTRINIT
   112 229E F0							.BYTE VF 
Source: DUMB Module.asm
   596 229F				ROW PAUSE+1
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 229F 81							.BYTE PAUSE+1	; PAUSE+1 is a Row Pause Command
Source: DUMB Module.asm
   597 22A0				ROW C_2 $00 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 22A0 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 22A1 18							.BYTE C_2 
   111 22A2 80							.BYTE $00 + INSTRINIT
   112 22A3 F0							.BYTE VF 
Source: DUMB Module.asm
   598 22A4				ROW PAUSE+1
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 22A4 81							.BYTE PAUSE+1	; PAUSE+1 is a Row Pause Command
Source: DUMB Module.asm
   599 22A5				ROW C_2 $00 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 22A5 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 22A6 18							.BYTE C_2 
   111 22A7 80							.BYTE $00 + INSTRINIT
   112 22A8 F0							.BYTE VF 
Source: DUMB Module.asm
   600 22A9				ROW PAUSE
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 22A9 80							.BYTE PAUSE	; PAUSE is a Row Pause Command
Source: DUMB Module.asm
   601 22AA				ROW F_2 $00 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 22AA 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 22AB 1D							.BYTE F_2 
   111 22AC 80							.BYTE $00 + INSTRINIT
   112 22AD F0							.BYTE VF 
Source: DUMB Module.asm
   602 22AE				ROW PAUSE+1
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 22AE 81							.BYTE PAUSE+1	; PAUSE+1 is a Row Pause Command
Source: DUMB Module.asm
   603 22AF				ROW As2 $00 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 22AF 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 22B0 22							.BYTE AS2 
   111 22B1 80							.BYTE $00 + INSTRINIT
   112 22B2 F0							.BYTE VF 
Source: DUMB Module.asm
   604 22B3				ROW PAUSE+1
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 22B3 81							.BYTE PAUSE+1	; PAUSE+1 is a Row Pause Command
Source: DUMB Module.asm
   605 22B4				ROW A_2 $00 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 22B4 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 22B5 21							.BYTE A_2 
   111 22B6 80							.BYTE $00 + INSTRINIT
   112 22B7 F0							.BYTE VF 
Source: DUMB Module.asm
   606 22B8				ROW PAUSE
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 22B8 80							.BYTE PAUSE	; PAUSE is a Row Pause Command
Source: DUMB Module.asm
   607 22B9				ROW G_2 $00 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 22B9 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 22BA 1F							.BYTE G_2 
   111 22BB 80							.BYTE $00 + INSTRINIT
   112 22BC F0							.BYTE VF 
Source: DUMB Module.asm
   608 22BD				ROW PAUSE+1
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 22BD 81							.BYTE PAUSE+1	; PAUSE+1 is a Row Pause Command
Source: DUMB Module.asm
   609 22BE				ROW F_2 $00 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 22BE 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 22BF 1D							.BYTE F_2 
   111 22C0 80							.BYTE $00 + INSTRINIT
   112 22C1 F0							.BYTE VF 
Source: DUMB Module.asm
   610 22C2				ROW PAUSE+1
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 22C2 81							.BYTE PAUSE+1	; PAUSE+1 is a Row Pause Command
Source: DUMB Module.asm
   611 22C3				ROW E_2 $00 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 22C3 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 22C4 1C							.BYTE E_2 
   111 22C5 80							.BYTE $00 + INSTRINIT
   112 22C6 F0							.BYTE VF 
Source: DUMB Module.asm
   612 22C7				ROW PAUSE
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 22C7 80							.BYTE PAUSE	; PAUSE is a Row Pause Command
Source: DUMB Module.asm
   613 22C8				ROW D_2 $00 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 22C8 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 22C9 1A							.BYTE D_2 
   111 22CA 80							.BYTE $00 + INSTRINIT
   112 22CB F0							.BYTE VF 
Source: DUMB Module.asm
   614 22CC				ROW PAUSE+1
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 22CC 81							.BYTE PAUSE+1	; PAUSE+1 is a Row Pause Command
Source: DUMB Module.asm
   615 22CD				ROW F_2 $00 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 22CD 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 22CE 1D							.BYTE F_2 
   111 22CF 80							.BYTE $00 + INSTRINIT
   112 22D0 F0							.BYTE VF 
Source: DUMB Module.asm
   616 22D1				ROW PAUSE+1
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 22D1 81							.BYTE PAUSE+1	; PAUSE+1 is a Row Pause Command
Source: DUMB Module.asm
   617 22D2				ROW E_2 $00 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 22D2 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 22D3 1C							.BYTE E_2 
   111 22D4 80							.BYTE $00 + INSTRINIT
   112 22D5 F0							.BYTE VF 
Source: DUMB Module.asm
   618 22D6				END_PATTERN
Macro: END_PATTERN [Source: DUMB Module.inc]
     2 22D6 00				.BYTE $00			; Pattern End 
Source: DUMB Module.asm
   619 					
   620 22D7			PTN_0C
   621 22D7				ROW E_2 $00 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 22D7 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 22D8 1C							.BYTE E_2 
   111 22D9 80							.BYTE $00 + INSTRINIT
   112 22DA F0							.BYTE VF 
Source: DUMB Module.asm
   622 22DB				ROW PAUSE+1
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 22DB 81							.BYTE PAUSE+1	; PAUSE+1 is a Row Pause Command
Source: DUMB Module.asm
   623 22DC				ROW E_2 $00 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 22DC 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 22DD 1C							.BYTE E_2 
   111 22DE 80							.BYTE $00 + INSTRINIT
   112 22DF F0							.BYTE VF 
Source: DUMB Module.asm
   624 22E0				ROW PAUSE+1
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 22E0 81							.BYTE PAUSE+1	; PAUSE+1 is a Row Pause Command
Source: DUMB Module.asm
   625 22E1				ROW E_2 $00 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 22E1 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 22E2 1C							.BYTE E_2 
   111 22E3 80							.BYTE $00 + INSTRINIT
   112 22E4 F0							.BYTE VF 
Source: DUMB Module.asm
   626 22E5				ROW PAUSE
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 22E5 80							.BYTE PAUSE	; PAUSE is a Row Pause Command
Source: DUMB Module.asm
   627 22E6				ROW Fs2 $00 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 22E6 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 22E7 1E							.BYTE FS2 
   111 22E8 80							.BYTE $00 + INSTRINIT
   112 22E9 F0							.BYTE VF 
Source: DUMB Module.asm
   628 22EA				ROW PAUSE+1
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 22EA 81							.BYTE PAUSE+1	; PAUSE+1 is a Row Pause Command
Source: DUMB Module.asm
   629 22EB				ROW D_2 $00 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 22EB 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 22EC 1A							.BYTE D_2 
   111 22ED 80							.BYTE $00 + INSTRINIT
   112 22EE F0							.BYTE VF 
Source: DUMB Module.asm
   630 22EF				ROW PAUSE+1
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 22EF 81							.BYTE PAUSE+1	; PAUSE+1 is a Row Pause Command
Source: DUMB Module.asm
   631 22F0				ROW Cs2 $00 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 22F0 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 22F1 19							.BYTE CS2 
   111 22F2 80							.BYTE $00 + INSTRINIT
   112 22F3 F0							.BYTE VF 
Source: DUMB Module.asm
   632 22F4				ROW PAUSE
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 22F4 80							.BYTE PAUSE	; PAUSE is a Row Pause Command
Source: DUMB Module.asm
   633 22F5				ROW B_1 $00 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 22F5 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 22F6 17							.BYTE B_1 
   111 22F7 80							.BYTE $00 + INSTRINIT
   112 22F8 F0							.BYTE VF 
Source: DUMB Module.asm
   634 22F9				ROW PAUSE+1
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 22F9 81							.BYTE PAUSE+1	; PAUSE+1 is a Row Pause Command
Source: DUMB Module.asm
   635 22FA				ROW B_1 $00 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 22FA 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 22FB 17							.BYTE B_1 
   111 22FC 80							.BYTE $00 + INSTRINIT
   112 22FD F0							.BYTE VF 
Source: DUMB Module.asm
   636 22FE				ROW PAUSE+1
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 22FE 81							.BYTE PAUSE+1	; PAUSE+1 is a Row Pause Command
Source: DUMB Module.asm
   637 22FF				ROW A_1 $00 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 22FF 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2300 15							.BYTE A_1 
   111 2301 80							.BYTE $00 + INSTRINIT
   112 2302 F0							.BYTE VF 
Source: DUMB Module.asm
   638 2303				ROW PAUSE
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 2303 80							.BYTE PAUSE	; PAUSE is a Row Pause Command
Source: DUMB Module.asm
   639 2304				ROW D_2 $00 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2304 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2305 1A							.BYTE D_2 
   111 2306 80							.BYTE $00 + INSTRINIT
   112 2307 F0							.BYTE VF 
Source: DUMB Module.asm
   640 2308				ROW PAUSE+1
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 2308 81							.BYTE PAUSE+1	; PAUSE+1 is a Row Pause Command
Source: DUMB Module.asm
   641 2309				ROW E_2 $00 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2309 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 230A 1C							.BYTE E_2 
   111 230B 80							.BYTE $00 + INSTRINIT
   112 230C F0							.BYTE VF 
Source: DUMB Module.asm
   642 230D				ROW PAUSE+1
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 230D 81							.BYTE PAUSE+1	; PAUSE+1 is a Row Pause Command
Source: DUMB Module.asm
   643 230E				ROW Fs2 $00 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 230E 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 230F 1E							.BYTE FS2 
   111 2310 80							.BYTE $00 + INSTRINIT
   112 2311 F0							.BYTE VF 
Source: DUMB Module.asm
   644 2312				END_PATTERN
Macro: END_PATTERN [Source: DUMB Module.inc]
     2 2312 00				.BYTE $00			; Pattern End 
Source: DUMB Module.asm
   645
   646 2313			PTN_0D 	
   647 2313				ROW E_2 $00 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2313 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2314 1C							.BYTE E_2 
   111 2315 80							.BYTE $00 + INSTRINIT
   112 2316 F0							.BYTE VF 
Source: DUMB Module.asm
   648 2317				ROW PAUSE+1
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 2317 81							.BYTE PAUSE+1	; PAUSE+1 is a Row Pause Command
Source: DUMB Module.asm
   649 2318				ROW E_2 $00 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2318 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2319 1C							.BYTE E_2 
   111 231A 80							.BYTE $00 + INSTRINIT
   112 231B F0							.BYTE VF 
Source: DUMB Module.asm
   650 231C				ROW PAUSE+1
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 231C 81							.BYTE PAUSE+1	; PAUSE+1 is a Row Pause Command
Source: DUMB Module.asm
   651 231D				ROW E_2 $00 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 231D 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 231E 1C							.BYTE E_2 
   111 231F 80							.BYTE $00 + INSTRINIT
   112 2320 F0							.BYTE VF 
Source: DUMB Module.asm
   652 2321				ROW PAUSE
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 2321 80							.BYTE PAUSE	; PAUSE is a Row Pause Command
Source: DUMB Module.asm
   653 2322				ROW A_2 $00 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2322 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2323 21							.BYTE A_2 
   111 2324 80							.BYTE $00 + INSTRINIT
   112 2325 F0							.BYTE VF 
Source: DUMB Module.asm
   654 2326				ROW PAUSE+1
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 2326 81							.BYTE PAUSE+1	; PAUSE+1 is a Row Pause Command
Source: DUMB Module.asm
   655 2327				ROW D_3 $05 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2327 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2328 26							.BYTE D_3 
   111 2329 85							.BYTE $05 + INSTRINIT
   112 232A F0							.BYTE VF 
Source: DUMB Module.asm
   656 232B				ROW PAUSE+1
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 232B 81							.BYTE PAUSE+1	; PAUSE+1 is a Row Pause Command
Source: DUMB Module.asm
   657 232C				ROW Cs3 $05 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 232C 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 232D 25							.BYTE CS3 
   111 232E 85							.BYTE $05 + INSTRINIT
   112 232F F0							.BYTE VF 
Source: DUMB Module.asm
   658 2330				ROW PAUSE
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 2330 80							.BYTE PAUSE	; PAUSE is a Row Pause Command
Source: DUMB Module.asm
   659 2331				ROW B_2 $00 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2331 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2332 23							.BYTE B_2 
   111 2333 80							.BYTE $00 + INSTRINIT
   112 2334 F0							.BYTE VF 
Source: DUMB Module.asm
   660 2335				ROW PAUSE+1
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 2335 81							.BYTE PAUSE+1	; PAUSE+1 is a Row Pause Command
Source: DUMB Module.asm
   661 2336				ROW A_2 $00 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2336 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2337 21							.BYTE A_2 
   111 2338 80							.BYTE $00 + INSTRINIT
   112 2339 F0							.BYTE VF 
Source: DUMB Module.asm
   662 233A				ROW PAUSE+1
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 233A 81							.BYTE PAUSE+1	; PAUSE+1 is a Row Pause Command
Source: DUMB Module.asm
   663 233B				ROW Gs2 $00 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 233B 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 233C 20							.BYTE GS2 
   111 233D 80							.BYTE $00 + INSTRINIT
   112 233E F0							.BYTE VF 
Source: DUMB Module.asm
   664 233F				ROW PAUSE
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 233F 80							.BYTE PAUSE	; PAUSE is a Row Pause Command
Source: DUMB Module.asm
   665 2340				ROW Fs2 $00 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2340 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2341 1E							.BYTE FS2 
   111 2342 80							.BYTE $00 + INSTRINIT
   112 2343 F0							.BYTE VF 
Source: DUMB Module.asm
   666 2344				ROW PAUSE+1
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 2344 81							.BYTE PAUSE+1	; PAUSE+1 is a Row Pause Command
Source: DUMB Module.asm
   667 2345				ROW A_2 $00 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2345 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2346 21							.BYTE A_2 
   111 2347 80							.BYTE $00 + INSTRINIT
   112 2348 F0							.BYTE VF 
Source: DUMB Module.asm
   668 2349				ROW PAUSE+1
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 2349 81							.BYTE PAUSE+1	; PAUSE+1 is a Row Pause Command
Source: DUMB Module.asm
   669 234A				ROW Gs2 $00 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 234A 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 234B 20							.BYTE GS2 
   111 234C 80							.BYTE $00 + INSTRINIT
   112 234D F0							.BYTE VF 
Source: DUMB Module.asm
   670 234E				END_PATTERN
Macro: END_PATTERN [Source: DUMB Module.inc]
     2 234E 00				.BYTE $00			; Pattern End 
Source: DUMB Module.asm
   671
   672 234F			PTN_0E
   673 234F				ROW E_3 $06 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 234F 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2350 28							.BYTE E_3 
   111 2351 86							.BYTE $06 + INSTRINIT
   112 2352 F0							.BYTE VF 
Source: DUMB Module.asm
   674 2353				ROW D_4 $06 vF
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2353 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2354 32							.BYTE D_4 
   111 2355 86							.BYTE $06 + INSTRINIT
   112 2356 F0							.BYTE VF 
Source: DUMB Module.asm
   675 2357				ROW Cs4 $06 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2357 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2358 31							.BYTE CS4 
   111 2359 86							.BYTE $06 + INSTRINIT
   112 235A F0							.BYTE VF 
Source: DUMB Module.asm
   676 235B				ROW ___ ___ v6 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 235B 10							.BYTE VOLUME 
    83 235C 60							.BYTE V6 
Source: DUMB Module.asm
   677 235D				ROW A_3 $06 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 235D 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 235E 2D							.BYTE A_3 
   111 235F 86							.BYTE $06 + INSTRINIT
   112 2360 F0							.BYTE VF 
Source: DUMB Module.asm
   678 2361				ROW PAUSE+1
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 2361 81							.BYTE PAUSE+1	; PAUSE+1 is a Row Pause Command
Source: DUMB Module.asm
   679 2362				ROW ___ ___ v6 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 2362 10							.BYTE VOLUME 
    83 2363 60							.BYTE V6 
Source: DUMB Module.asm
   680 2364				ROW B_3 $06 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2364 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2365 2F							.BYTE B_3 
   111 2366 86							.BYTE $06 + INSTRINIT
   112 2367 F0							.BYTE VF 
Source: DUMB Module.asm
   681 2368				ROW Gs3 $06 vF
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2368 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2369 2C							.BYTE GS3 
   111 236A 86							.BYTE $06 + INSTRINIT
   112 236B F0							.BYTE VF 
Source: DUMB Module.asm
   682 236C				ROW Fs3 $06 vF
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 236C 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 236D 2A							.BYTE FS3 
   111 236E 86							.BYTE $06 + INSTRINIT
   112 236F F0							.BYTE VF 
Source: DUMB Module.asm
   683 2370				ROW ___ ___ v6 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 2370 10							.BYTE VOLUME 
    83 2371 60							.BYTE V6 
Source: DUMB Module.asm
   684 2372				ROW E_3 $06 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2372 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2373 28							.BYTE E_3 
   111 2374 86							.BYTE $06 + INSTRINIT
   112 2375 F0							.BYTE VF 
Source: DUMB Module.asm
   685 2376				ROW Fs3 $06 vF
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2376 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2377 2A							.BYTE FS3 
   111 2378 86							.BYTE $06 + INSTRINIT
   112 2379 F0							.BYTE VF 
Source: DUMB Module.asm
   686 237A				ROW PAUSE+1
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 237A 81							.BYTE PAUSE+1	; PAUSE+1 is a Row Pause Command
Source: DUMB Module.asm
   687 237B				ROW ___ ___ v6
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 237B 10							.BYTE VOLUME 
    83 237C 60							.BYTE V6 
Source: DUMB Module.asm
   688 237D				ROW ___ ___ v2
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 237D 10							.BYTE VOLUME 
    83 237E 20							.BYTE V2 
Source: DUMB Module.asm
   689 237F				ROW E_3 $06 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 237F 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2380 28							.BYTE E_3 
   111 2381 86							.BYTE $06 + INSTRINIT
   112 2382 F0							.BYTE VF 
Source: DUMB Module.asm
   690 2383				ROW ___ ___ v6
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 2383 10							.BYTE VOLUME 
    83 2384 60							.BYTE V6 
Source: DUMB Module.asm
   691 2385				ROW Fs3 $06 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2385 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2386 2A							.BYTE FS3 
   111 2387 86							.BYTE $06 + INSTRINIT
   112 2388 F0							.BYTE VF 
Source: DUMB Module.asm
   692 2389				ROW ___ ___ v6
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 2389 10							.BYTE VOLUME 
    83 238A 60							.BYTE V6 
Source: DUMB Module.asm
   693 238B				ROW A_3 $06 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 238B 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 238C 2D							.BYTE A_3 
   111 238D 86							.BYTE $06 + INSTRINIT
   112 238E F0							.BYTE VF 
Source: DUMB Module.asm
   694 238F				ROW ___ ___ v6
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 238F 10							.BYTE VOLUME 
    83 2390 60							.BYTE V6 
Source: DUMB Module.asm
   695 2391				ROW D_4 $06 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2391 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2392 32							.BYTE D_4 
   111 2393 86							.BYTE $06 + INSTRINIT
   112 2394 F0							.BYTE VF 
Source: DUMB Module.asm
   696 2395				ROW ___ ___ v6
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 2395 10							.BYTE VOLUME 
    83 2396 60							.BYTE V6 
Source: DUMB Module.asm
   697 2397				ROW Cs4 $06 vF
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2397 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2398 31							.BYTE CS4 
   111 2399 86							.BYTE $06 + INSTRINIT
   112 239A F0							.BYTE VF 
Source: DUMB Module.asm
   698 239B				ROW B_3 $06 vF
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 239B 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 239C 2F							.BYTE B_3 
   111 239D 86							.BYTE $06 + INSTRINIT
   112 239E F0							.BYTE VF 
Source: DUMB Module.asm
   699 239F				ROW PAUSE+1
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 239F 81							.BYTE PAUSE+1	; PAUSE+1 is a Row Pause Command
Source: DUMB Module.asm
   700 23A0				ROW ___ ___ v6
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 23A0 10							.BYTE VOLUME 
    83 23A1 60							.BYTE V6 
Source: DUMB Module.asm
   701 23A2				ROW ___ ___ v2
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 23A2 10							.BYTE VOLUME 
    83 23A3 20							.BYTE V2 
Source: DUMB Module.asm
   702 					
   703 23A4			PTN_0F
   704 23A4				ROW E_3 $06 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 23A4 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 23A5 28							.BYTE E_3 
   111 23A6 86							.BYTE $06 + INSTRINIT
   112 23A7 F0							.BYTE VF 
Source: DUMB Module.asm
   705 23A8				ROW D_4 $06 vF
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 23A8 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 23A9 32							.BYTE D_4 
   111 23AA 86							.BYTE $06 + INSTRINIT
   112 23AB F0							.BYTE VF 
Source: DUMB Module.asm
   706 23AC				ROW Cs4 $06 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 23AC 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 23AD 31							.BYTE CS4 
   111 23AE 86							.BYTE $06 + INSTRINIT
   112 23AF F0							.BYTE VF 
Source: DUMB Module.asm
   707 23B0				ROW ___ ___ v6 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 23B0 10							.BYTE VOLUME 
    83 23B1 60							.BYTE V6 
Source: DUMB Module.asm
   708 23B2				ROW A_3 $06 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 23B2 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 23B3 2D							.BYTE A_3 
   111 23B4 86							.BYTE $06 + INSTRINIT
   112 23B5 F0							.BYTE VF 
Source: DUMB Module.asm
   709 23B6				ROW PAUSE+1
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 23B6 81							.BYTE PAUSE+1	; PAUSE+1 is a Row Pause Command
Source: DUMB Module.asm
   710 23B7				ROW ___ ___ v6 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 23B7 10							.BYTE VOLUME 
    83 23B8 60							.BYTE V6 
Source: DUMB Module.asm
   711 23B9				ROW B_3 $06 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 23B9 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 23BA 2F							.BYTE B_3 
   111 23BB 86							.BYTE $06 + INSTRINIT
   112 23BC F0							.BYTE VF 
Source: DUMB Module.asm
   712 23BD				ROW Gs3 $06 vF
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 23BD 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 23BE 2C							.BYTE GS3 
   111 23BF 86							.BYTE $06 + INSTRINIT
   112 23C0 F0							.BYTE VF 
Source: DUMB Module.asm
   713 23C1				ROW Fs3 $06 vF
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 23C1 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 23C2 2A							.BYTE FS3 
   111 23C3 86							.BYTE $06 + INSTRINIT
   112 23C4 F0							.BYTE VF 
Source: DUMB Module.asm
   714 23C5				ROW ___ ___ v6 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 23C5 10							.BYTE VOLUME 
    83 23C6 60							.BYTE V6 
Source: DUMB Module.asm
   715 23C7				ROW E_3 $06 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 23C7 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 23C8 28							.BYTE E_3 
   111 23C9 86							.BYTE $06 + INSTRINIT
   112 23CA F0							.BYTE VF 
Source: DUMB Module.asm
   716 23CB				ROW Fs3 $06 vF
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 23CB 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 23CC 2A							.BYTE FS3 
   111 23CD 86							.BYTE $06 + INSTRINIT
   112 23CE F0							.BYTE VF 
Source: DUMB Module.asm
   717 23CF				ROW PAUSE+1
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 23CF 81							.BYTE PAUSE+1	; PAUSE+1 is a Row Pause Command
Source: DUMB Module.asm
   718 23D0				ROW ___ ___ v6
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 23D0 10							.BYTE VOLUME 
    83 23D1 60							.BYTE V6 
Source: DUMB Module.asm
   719 23D2				ROW ___ ___ v2
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 23D2 10							.BYTE VOLUME 
    83 23D3 20							.BYTE V2 
Source: DUMB Module.asm
   720 23D4				ROW A_3 $06 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 23D4 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 23D5 2D							.BYTE A_3 
   111 23D6 86							.BYTE $06 + INSTRINIT
   112 23D7 F0							.BYTE VF 
Source: DUMB Module.asm
   721 23D8				ROW B_3 $06 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 23D8 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 23D9 2F							.BYTE B_3 
   111 23DA 86							.BYTE $06 + INSTRINIT
   112 23DB F0							.BYTE VF 
Source: DUMB Module.asm
   722 23DC				ROW Cs4 $06 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 23DC 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 23DD 31							.BYTE CS4 
   111 23DE 86							.BYTE $06 + INSTRINIT
   112 23DF F0							.BYTE VF 
Source: DUMB Module.asm
   723 23E0				ROW ___ ___ v6
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 23E0 10							.BYTE VOLUME 
    83 23E1 60							.BYTE V6 
Source: DUMB Module.asm
   724 23E2				ROW D_4 $06 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 23E2 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 23E3 32							.BYTE D_4 
   111 23E4 86							.BYTE $06 + INSTRINIT
   112 23E5 F0							.BYTE VF 
Source: DUMB Module.asm
   725 23E6				ROW ___ ___ v6
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 23E6 10							.BYTE VOLUME 
    83 23E7 60							.BYTE V6 
Source: DUMB Module.asm
   726 23E8				ROW E_4 $06 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 23E8 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 23E9 34							.BYTE E_4 
   111 23EA 86							.BYTE $06 + INSTRINIT
   112 23EB F0							.BYTE VF 
Source: DUMB Module.asm
   727 23EC				ROW ___ ___ v6
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 23EC 10							.BYTE VOLUME 
    83 23ED 60							.BYTE V6 
Source: DUMB Module.asm
   728 23EE				ROW Fs4 $06 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 23EE 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 23EF 36							.BYTE FS4 
   111 23F0 86							.BYTE $06 + INSTRINIT
   112 23F1 F0							.BYTE VF 
Source: DUMB Module.asm
   729 23F2				ROW ___ ___ v6
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 23F2 10							.BYTE VOLUME 
    83 23F3 60							.BYTE V6 
Source: DUMB Module.asm
   730 23F4				ROW D_4 $06 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 23F4 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 23F5 32							.BYTE D_4 
   111 23F6 86							.BYTE $06 + INSTRINIT
   112 23F7 F0							.BYTE VF 
Source: DUMB Module.asm
   731 23F8				ROW Cs4 $06 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 23F8 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 23F9 31							.BYTE CS4 
   111 23FA 86							.BYTE $06 + INSTRINIT
   112 23FB F0							.BYTE VF 
Source: DUMB Module.asm
   732 23FC				ROW PAUSE 
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 23FC 80							.BYTE PAUSE	; PAUSE is a Row Pause Command
Source: DUMB Module.asm
   733 23FD				ROW ___ ___ v6
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 23FD 10							.BYTE VOLUME 
    83 23FE 60							.BYTE V6 
Source: DUMB Module.asm
   734 					
   735 23FF			PTN_10 
   736 23FF				ROW B_3 $06 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 23FF 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2400 2F							.BYTE B_3 
   111 2401 86							.BYTE $06 + INSTRINIT
   112 2402 F0							.BYTE VF 
Source: DUMB Module.asm
   737 2403				ROW PAUSE+3 
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 2403 83							.BYTE PAUSE+3	; PAUSE+3 is a Row Pause Command
Source: DUMB Module.asm
   738 2404				ROW ___ ___ v6
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 2404 10							.BYTE VOLUME 
    83 2405 60							.BYTE V6 
Source: DUMB Module.asm
   739 2406				ROW ___ ___ v2
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 2406 10							.BYTE VOLUME 
    83 2407 20							.BYTE V2 
Source: DUMB Module.asm
   740 2408				ROW PAUSE 	
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 2408 80							.BYTE PAUSE	; PAUSE is a Row Pause Command
Source: DUMB Module.asm
   741 2409				ROW Gs3 $06 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2409 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 240A 2C							.BYTE GS3 
   111 240B 86							.BYTE $06 + INSTRINIT
   112 240C F0							.BYTE VF 
Source: DUMB Module.asm
   742 240D				ROW ___ ___ v6	
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 240D 10							.BYTE VOLUME 
    83 240E 60							.BYTE V6 
Source: DUMB Module.asm
   743 240F				ROW A_3 $06 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 240F 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2410 2D							.BYTE A_3 
   111 2411 86							.BYTE $06 + INSTRINIT
   112 2412 F0							.BYTE VF 
Source: DUMB Module.asm
   744 2413				ROW Gs3 $06 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2413 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2414 2C							.BYTE GS3 
   111 2415 86							.BYTE $06 + INSTRINIT
   112 2416 F0							.BYTE VF 
Source: DUMB Module.asm
   745 2417				ROW ___ ___ v6
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 2417 10							.BYTE VOLUME 
    83 2418 60							.BYTE V6 
Source: DUMB Module.asm
   746 2419				ROW Fs3 $06 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2419 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 241A 2A							.BYTE FS3 
   111 241B 86							.BYTE $06 + INSTRINIT
   112 241C F0							.BYTE VF 
Source: DUMB Module.asm
   747 241D				ROW E_3 $06 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 241D 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 241E 28							.BYTE E_3 
   111 241F 86							.BYTE $06 + INSTRINIT
   112 2420 F0							.BYTE VF 
Source: DUMB Module.asm
   748 2421				ROW ___ ___ v6	
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 2421 10							.BYTE VOLUME 
    83 2422 60							.BYTE V6 
Source: DUMB Module.asm
   749 2423				ROW Fs3 $06 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2423 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2424 2A							.BYTE FS3 
   111 2425 86							.BYTE $06 + INSTRINIT
   112 2426 F0							.BYTE VF 
Source: DUMB Module.asm
   750 2427				ROW PAUSE+3 
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 2427 83							.BYTE PAUSE+3	; PAUSE+3 is a Row Pause Command
Source: DUMB Module.asm
   751 2428				ROW ___ ___ v6
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 2428 10							.BYTE VOLUME 
    83 2429 60							.BYTE V6 
Source: DUMB Module.asm
   752 242A				ROW ___ ___ v2
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 242A 10							.BYTE VOLUME 
    83 242B 20							.BYTE V2 
Source: DUMB Module.asm
   753 242C				ROW PAUSE 
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 242C 80							.BYTE PAUSE	; PAUSE is a Row Pause Command
Source: DUMB Module.asm
   754 242D				ROW B_3 $06 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 242D 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 242E 2F							.BYTE B_3 
   111 242F 86							.BYTE $06 + INSTRINIT
   112 2430 F0							.BYTE VF 
Source: DUMB Module.asm
   755 2431				ROW Cs4 $06 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2431 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2432 31							.BYTE CS4 
   111 2433 86							.BYTE $06 + INSTRINIT
   112 2434 F0							.BYTE VF 
Source: DUMB Module.asm
   756 2435				ROW D_4 $06 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2435 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2436 32							.BYTE D_4 
   111 2437 86							.BYTE $06 + INSTRINIT
   112 2438 F0							.BYTE VF 
Source: DUMB Module.asm
   757 2439				ROW B_3 $06 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2439 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 243A 2F							.BYTE B_3 
   111 243B 86							.BYTE $06 + INSTRINIT
   112 243C F0							.BYTE VF 
Source: DUMB Module.asm
   758 243D				ROW ___ ___ v6
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 243D 10							.BYTE VOLUME 
    83 243E 60							.BYTE V6 
Source: DUMB Module.asm
   759 243F				ROW Cs4 $06 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 243F 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2440 31							.BYTE CS4 
   111 2441 86							.BYTE $06 + INSTRINIT
   112 2442 F0							.BYTE VF 
Source: DUMB Module.asm
   760 2443				ROW ___ ___ v6
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 2443 10							.BYTE VOLUME 
    83 2444 60							.BYTE V6 
Source: DUMB Module.asm
   761 2445				ROW A_3 $06 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2445 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2446 2D							.BYTE A_3 
   111 2447 86							.BYTE $06 + INSTRINIT
   112 2448 F0							.BYTE VF 
Source: DUMB Module.asm
   762 					
   763 2449			PTN_11
   764 2449				ROW B_3 $06 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2449 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 244A 2F							.BYTE B_3 
   111 244B 86							.BYTE $06 + INSTRINIT
   112 244C F0							.BYTE VF 
Source: DUMB Module.asm
   765 244D				ROW PAUSE+3 
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 244D 83							.BYTE PAUSE+3	; PAUSE+3 is a Row Pause Command
Source: DUMB Module.asm
   766 244E				ROW ___ ___ v6
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 244E 10							.BYTE VOLUME 
    83 244F 60							.BYTE V6 
Source: DUMB Module.asm
   767 2450				ROW ___ ___ v2
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 2450 10							.BYTE VOLUME 
    83 2451 20							.BYTE V2 
Source: DUMB Module.asm
   768 2452				ROW PAUSE 	
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 2452 80							.BYTE PAUSE	; PAUSE is a Row Pause Command
Source: DUMB Module.asm
   769 2453				ROW Gs3 $06 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2453 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2454 2C							.BYTE GS3 
   111 2455 86							.BYTE $06 + INSTRINIT
   112 2456 F0							.BYTE VF 
Source: DUMB Module.asm
   770 2457				ROW ___ ___ v6	
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 2457 10							.BYTE VOLUME 
    83 2458 60							.BYTE V6 
Source: DUMB Module.asm
   771 2459				ROW A_3 $06 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2459 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 245A 2D							.BYTE A_3 
   111 245B 86							.BYTE $06 + INSTRINIT
   112 245C F0							.BYTE VF 
Source: DUMB Module.asm
   772 245D				ROW Gs3 $06 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 245D 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 245E 2C							.BYTE GS3 
   111 245F 86							.BYTE $06 + INSTRINIT
   112 2460 F0							.BYTE VF 
Source: DUMB Module.asm
   773 2461				ROW ___ ___ v6
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 2461 10							.BYTE VOLUME 
    83 2462 60							.BYTE V6 
Source: DUMB Module.asm
   774 2463				ROW Fs3 $06 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2463 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2464 2A							.BYTE FS3 
   111 2465 86							.BYTE $06 + INSTRINIT
   112 2466 F0							.BYTE VF 
Source: DUMB Module.asm
   775 2467				ROW E_3 $06 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2467 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2468 28							.BYTE E_3 
   111 2469 86							.BYTE $06 + INSTRINIT
   112 246A F0							.BYTE VF 
Source: DUMB Module.asm
   776 246B				ROW ___ ___ v6	
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 246B 10							.BYTE VOLUME 
    83 246C 60							.BYTE V6 
Source: DUMB Module.asm
   777 246D				ROW Fs3 $06 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 246D 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 246E 2A							.BYTE FS3 
   111 246F 86							.BYTE $06 + INSTRINIT
   112 2470 F0							.BYTE VF 
Source: DUMB Module.asm
   778 2471				ROW PAUSE+3 
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 2471 83							.BYTE PAUSE+3	; PAUSE+3 is a Row Pause Command
Source: DUMB Module.asm
   779 2472				ROW ___ ___ v6
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 2472 10							.BYTE VOLUME 
    83 2473 60							.BYTE V6 
Source: DUMB Module.asm
   780 2474				ROW ___ ___ v2
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 2474 10							.BYTE VOLUME 
    83 2475 20							.BYTE V2 
Source: DUMB Module.asm
   781 2476				ROW PAUSE 
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 2476 80							.BYTE PAUSE	; PAUSE is a Row Pause Command
Source: DUMB Module.asm
   782 2477				ROW B_3 $06 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2477 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2478 2F							.BYTE B_3 
   111 2479 86							.BYTE $06 + INSTRINIT
   112 247A F0							.BYTE VF 
Source: DUMB Module.asm
   783 247B				ROW Cs4 $06 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 247B 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 247C 31							.BYTE CS4 
   111 247D 86							.BYTE $06 + INSTRINIT
   112 247E F0							.BYTE VF 
Source: DUMB Module.asm
   784 247F				ROW D_4 $06 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 247F 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2480 32							.BYTE D_4 
   111 2481 86							.BYTE $06 + INSTRINIT
   112 2482 F0							.BYTE VF 
Source: DUMB Module.asm
   785 2483				ROW E_4 $06 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2483 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2484 34							.BYTE E_4 
   111 2485 86							.BYTE $06 + INSTRINIT
   112 2486 F0							.BYTE VF 
Source: DUMB Module.asm
   786 2487				ROW ___ ___ v6
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 2487 10							.BYTE VOLUME 
    83 2488 60							.BYTE V6 
Source: DUMB Module.asm
   787 2489				ROW Cs4 $06 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2489 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 248A 31							.BYTE CS4 
   111 248B 86							.BYTE $06 + INSTRINIT
   112 248C F0							.BYTE VF 
Source: DUMB Module.asm
   788 248D				ROW B_3 $06 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 248D 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 248E 2F							.BYTE B_3 
   111 248F 86							.BYTE $06 + INSTRINIT
   112 2490 F0							.BYTE VF 
Source: DUMB Module.asm
   789 2491				ROW ___ ___ v6
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 2491 10							.BYTE VOLUME 
    83 2492 60							.BYTE V6 
Source: DUMB Module.asm
   790
   791 2493			PTN_12
   792 2493				ROW E_3 $06 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2493 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2494 28							.BYTE E_3 
   111 2495 86							.BYTE $06 + INSTRINIT
   112 2496 F0							.BYTE VF 
Source: DUMB Module.asm
   793 2497				ROW D_4 $06 vF
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2497 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2498 32							.BYTE D_4 
   111 2499 86							.BYTE $06 + INSTRINIT
   112 249A F0							.BYTE VF 
Source: DUMB Module.asm
   794 249B				ROW Cs4 $06 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 249B 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 249C 31							.BYTE CS4 
   111 249D 86							.BYTE $06 + INSTRINIT
   112 249E F0							.BYTE VF 
Source: DUMB Module.asm
   795 249F				ROW ___ ___ v6 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 249F 10							.BYTE VOLUME 
    83 24A0 60							.BYTE V6 
Source: DUMB Module.asm
   796 24A1				ROW A_3 $06 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 24A1 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 24A2 2D							.BYTE A_3 
   111 24A3 86							.BYTE $06 + INSTRINIT
   112 24A4 F0							.BYTE VF 
Source: DUMB Module.asm
   797 24A5				ROW PAUSE
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 24A5 80							.BYTE PAUSE	; PAUSE is a Row Pause Command
Source: DUMB Module.asm
   798 24A6				ROW ___ ___ v6
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 24A6 10							.BYTE VOLUME 
    83 24A7 60							.BYTE V6 
Source: DUMB Module.asm
   799 24A8				ROW ___ ___ v2 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 24A8 10							.BYTE VOLUME 
    83 24A9 20							.BYTE V2 
Source: DUMB Module.asm
   800 24AA				ROW B_3 $06 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 24AA 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 24AB 2F							.BYTE B_3 
   111 24AC 86							.BYTE $06 + INSTRINIT
   112 24AD F0							.BYTE VF 
Source: DUMB Module.asm
   801 24AE				ROW Gs3 $06 vF
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 24AE 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 24AF 2C							.BYTE GS3 
   111 24B0 86							.BYTE $06 + INSTRINIT
   112 24B1 F0							.BYTE VF 
Source: DUMB Module.asm
   802 24B2				ROW Fs3 $06 vF
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 24B2 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 24B3 2A							.BYTE FS3 
   111 24B4 86							.BYTE $06 + INSTRINIT
   112 24B5 F0							.BYTE VF 
Source: DUMB Module.asm
   803 24B6				ROW ___ ___ v6 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 24B6 10							.BYTE VOLUME 
    83 24B7 60							.BYTE V6 
Source: DUMB Module.asm
   804 24B8				ROW E_3 $06 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 24B8 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 24B9 28							.BYTE E_3 
   111 24BA 86							.BYTE $06 + INSTRINIT
   112 24BB F0							.BYTE VF 
Source: DUMB Module.asm
   805 24BC				ROW Fs3 $06 vF
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 24BC 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 24BD 2A							.BYTE FS3 
   111 24BE 86							.BYTE $06 + INSTRINIT
   112 24BF F0							.BYTE VF 
Source: DUMB Module.asm
   806 24C0				ROW PAUSE+1
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 24C0 81							.BYTE PAUSE+1	; PAUSE+1 is a Row Pause Command
Source: DUMB Module.asm
   807 24C1				ROW ___ ___ v6
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 24C1 10							.BYTE VOLUME 
    83 24C2 60							.BYTE V6 
Source: DUMB Module.asm
   808 24C3				ROW ___ ___ v2
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 24C3 10							.BYTE VOLUME 
    83 24C4 20							.BYTE V2 
Source: DUMB Module.asm
   809 24C5				ROW E_3 $06 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 24C5 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 24C6 28							.BYTE E_3 
   111 24C7 86							.BYTE $06 + INSTRINIT
   112 24C8 F0							.BYTE VF 
Source: DUMB Module.asm
   810 24C9				ROW ___ ___ v6
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 24C9 10							.BYTE VOLUME 
    83 24CA 60							.BYTE V6 
Source: DUMB Module.asm
   811 24CB				ROW Gs3 $06 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 24CB 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 24CC 2C							.BYTE GS3 
   111 24CD 86							.BYTE $06 + INSTRINIT
   112 24CE F0							.BYTE VF 
Source: DUMB Module.asm
   812 24CF				ROW A_3 $06 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 24CF 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 24D0 2D							.BYTE A_3 
   111 24D1 86							.BYTE $06 + INSTRINIT
   112 24D2 F0							.BYTE VF 
Source: DUMB Module.asm
   813 24D3				ROW PAUSE
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 24D3 80							.BYTE PAUSE	; PAUSE is a Row Pause Command
Source: DUMB Module.asm
   814 24D4				ROW ___ ___ v6 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 24D4 10							.BYTE VOLUME 
    83 24D5 60							.BYTE V6 
Source: DUMB Module.asm
   815 24D6				ROW Gs3 $06 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 24D6 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 24D7 2C							.BYTE GS3 
   111 24D8 86							.BYTE $06 + INSTRINIT
   112 24D9 F0							.BYTE VF 
Source: DUMB Module.asm
   816 24DA				ROW ___ ___ v6 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 24DA 10							.BYTE VOLUME 
    83 24DB 60							.BYTE V6 
Source: DUMB Module.asm
   817 24DC				ROW Fs3 $06 vF
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 24DC 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 24DD 2A							.BYTE FS3 
   111 24DE 86							.BYTE $06 + INSTRINIT
   112 24DF F0							.BYTE VF 
Source: DUMB Module.asm
   818 24E0				ROW PAUSE+2
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 24E0 82							.BYTE PAUSE+2	; PAUSE+2 is a Row Pause Command
Source: DUMB Module.asm
   819 24E1				ROW ___ ___ v6
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 24E1 10							.BYTE VOLUME 
    83 24E2 60							.BYTE V6 
Source: DUMB Module.asm
   820 24E3				ROW ___ ___ v2
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 24E3 10							.BYTE VOLUME 
    83 24E4 20							.BYTE V2 
Source: DUMB Module.asm
   821
   822 24E5			PTN_13
   823 24E5				ROW E_3 $06 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 24E5 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 24E6 28							.BYTE E_3 
   111 24E7 86							.BYTE $06 + INSTRINIT
   112 24E8 F0							.BYTE VF 
Source: DUMB Module.asm
   824 24E9				ROW ___ ___ v6
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 24E9 10							.BYTE VOLUME 
    83 24EA 60							.BYTE V6 
Source: DUMB Module.asm
   825 24EB				ROW D_4 $06 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 24EB 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 24EC 32							.BYTE D_4 
   111 24ED 86							.BYTE $06 + INSTRINIT
   112 24EE F0							.BYTE VF 
Source: DUMB Module.asm
   826 24EF				ROW ___ ___ v6
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 24EF 10							.BYTE VOLUME 
    83 24F0 60							.BYTE V6 
Source: DUMB Module.asm
   827 24F1				ROW E_4 $06 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 24F1 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 24F2 34							.BYTE E_4 
   111 24F3 86							.BYTE $06 + INSTRINIT
   112 24F4 F0							.BYTE VF 
Source: DUMB Module.asm
   828 24F5				ROW D_4 $06 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 24F5 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 24F6 32							.BYTE D_4 
   111 24F7 86							.BYTE $06 + INSTRINIT
   112 24F8 F0							.BYTE VF 
Source: DUMB Module.asm
   829 24F9				ROW PAUSE 
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 24F9 80							.BYTE PAUSE	; PAUSE is a Row Pause Command
Source: DUMB Module.asm
   830 24FA				ROW ___ ___ v6
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 24FA 10							.BYTE VOLUME 
    83 24FB 60							.BYTE V6 
Source: DUMB Module.asm
   831 24FC				ROW Cs4 $06 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 24FC 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 24FD 31							.BYTE CS4 
   111 24FE 86							.BYTE $06 + INSTRINIT
   112 24FF F0							.BYTE VF 
Source: DUMB Module.asm
   832 2500				ROW PAUSE 
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 2500 80							.BYTE PAUSE	; PAUSE is a Row Pause Command
Source: DUMB Module.asm
   833 2501				ROW ___ ___ v6	
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 2501 10							.BYTE VOLUME 
    83 2502 60							.BYTE V6 
Source: DUMB Module.asm
   834 2503				ROW B_3 $06 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2503 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2504 2F							.BYTE B_3 
   111 2505 86							.BYTE $06 + INSTRINIT
   112 2506 F0							.BYTE VF 
Source: DUMB Module.asm
   835 2507				ROW ___ ___ v6
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 2507 10							.BYTE VOLUME 
    83 2508 60							.BYTE V6 
Source: DUMB Module.asm
   836 2509				ROW A_3 $06 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2509 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 250A 2D							.BYTE A_3 
   111 250B 86							.BYTE $06 + INSTRINIT
   112 250C F0							.BYTE VF 
Source: DUMB Module.asm
   837 250D				ROW ___ ___ v6	
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 250D 10							.BYTE VOLUME 
    83 250E 60							.BYTE V6 
Source: DUMB Module.asm
   838 250F				ROW Cs4 $06 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 250F 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2510 31							.BYTE CS4 
   111 2511 86							.BYTE $06 + INSTRINIT
   112 2512 F0							.BYTE VF 
Source: DUMB Module.asm
   839 2513				ROW B_3 $06 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2513 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2514 2F							.BYTE B_3 
   111 2515 86							.BYTE $06 + INSTRINIT
   112 2516 F0							.BYTE VF 
Source: DUMB Module.asm
   840 2517				ROW PAUSE+6 
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 2517 86							.BYTE PAUSE+6	; PAUSE+6 is a Row Pause Command
Source: DUMB Module.asm
   841 2518				ROW ___ ___ v6
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 2518 10							.BYTE VOLUME 
    83 2519 60							.BYTE V6 
Source: DUMB Module.asm
   842 251A				ROW PAUSE+4
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 251A 84							.BYTE PAUSE+4	; PAUSE+4 is a Row Pause Command
Source: DUMB Module.asm
   843 251B				ROW ___ ___ v2
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 251B 10							.BYTE VOLUME 
    83 251C 20							.BYTE V2 
Source: DUMB Module.asm
   844 251D				END_PATTERN 
Macro: END_PATTERN [Source: DUMB Module.inc]
     2 251D 00				.BYTE $00			; Pattern End 
Source: DUMB Module.asm
   845
   846 251E			PTN_14
   847 251E				ROW E_3 $07 vF CMD4 $02
Macro: ROW [Source: DUMB Module.inc]
    33 = 0005						argnum = 5	; up to 5 arguments may be valid 
   140 251E 78							.BYTE NOTE + INSTRUMENT + VOLUME + COMMAND_1 
   141 251F 28							.BYTE E_3 
   142 2520 87							.BYTE $07 + INSTRINIT
   143 2521 F0							.BYTE VF
   144 2522 04							.BYTE CMD4 
   145 2523 02							.BYTE $02 
Source: DUMB Module.asm
   848 2524				ROW D_4 $07 vF
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2524 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2525 32							.BYTE D_4 
   111 2526 87							.BYTE $07 + INSTRINIT
   112 2527 F0							.BYTE VF 
Source: DUMB Module.asm
   849 2528				ROW Cs4 $07 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2528 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2529 31							.BYTE CS4 
   111 252A 87							.BYTE $07 + INSTRINIT
   112 252B F0							.BYTE VF 
Source: DUMB Module.asm
   850 252C				ROW ___ ___ v6 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 252C 10							.BYTE VOLUME 
    83 252D 60							.BYTE V6 
Source: DUMB Module.asm
   851 252E				ROW A_3 $07 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 252E 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 252F 2D							.BYTE A_3 
   111 2530 87							.BYTE $07 + INSTRINIT
   112 2531 F0							.BYTE VF 
Source: DUMB Module.asm
   852 2532				ROW PAUSE+1
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 2532 81							.BYTE PAUSE+1	; PAUSE+1 is a Row Pause Command
Source: DUMB Module.asm
   853 2533				ROW ___ ___ v6 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 2533 10							.BYTE VOLUME 
    83 2534 60							.BYTE V6 
Source: DUMB Module.asm
   854 2535				ROW B_3 $07 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2535 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2536 2F							.BYTE B_3 
   111 2537 87							.BYTE $07 + INSTRINIT
   112 2538 F0							.BYTE VF 
Source: DUMB Module.asm
   855 2539				ROW Gs3 $07 vF
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2539 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 253A 2C							.BYTE GS3 
   111 253B 87							.BYTE $07 + INSTRINIT
   112 253C F0							.BYTE VF 
Source: DUMB Module.asm
   856 253D				ROW Fs3 $07 vF
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 253D 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 253E 2A							.BYTE FS3 
   111 253F 87							.BYTE $07 + INSTRINIT
   112 2540 F0							.BYTE VF 
Source: DUMB Module.asm
   857 2541				ROW ___ ___ v6 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 2541 10							.BYTE VOLUME 
    83 2542 60							.BYTE V6 
Source: DUMB Module.asm
   858 2543				ROW E_3 $07 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2543 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2544 28							.BYTE E_3 
   111 2545 87							.BYTE $07 + INSTRINIT
   112 2546 F0							.BYTE VF 
Source: DUMB Module.asm
   859 2547				ROW Fs3 $07 vF
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2547 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2548 2A							.BYTE FS3 
   111 2549 87							.BYTE $07 + INSTRINIT
   112 254A F0							.BYTE VF 
Source: DUMB Module.asm
   860 254B				ROW PAUSE+1
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 254B 81							.BYTE PAUSE+1	; PAUSE+1 is a Row Pause Command
Source: DUMB Module.asm
   861 254C				ROW ___ ___ v6
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 254C 10							.BYTE VOLUME 
    83 254D 60							.BYTE V6 
Source: DUMB Module.asm
   862 254E				ROW ___ ___ v2
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 254E 10							.BYTE VOLUME 
    83 254F 20							.BYTE V2 
Source: DUMB Module.asm
   863 2550				ROW E_3 $07 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2550 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2551 28							.BYTE E_3 
   111 2552 87							.BYTE $07 + INSTRINIT
   112 2553 F0							.BYTE VF 
Source: DUMB Module.asm
   864 2554				ROW ___ ___ v6
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 2554 10							.BYTE VOLUME 
    83 2555 60							.BYTE V6 
Source: DUMB Module.asm
   865 2556				ROW Fs3 $07 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2556 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2557 2A							.BYTE FS3 
   111 2558 87							.BYTE $07 + INSTRINIT
   112 2559 F0							.BYTE VF 
Source: DUMB Module.asm
   866 255A				ROW ___ ___ v6
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 255A 10							.BYTE VOLUME 
    83 255B 60							.BYTE V6 
Source: DUMB Module.asm
   867 255C				ROW A_3 $07 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 255C 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 255D 2D							.BYTE A_3 
   111 255E 87							.BYTE $07 + INSTRINIT
   112 255F F0							.BYTE VF 
Source: DUMB Module.asm
   868 2560				ROW ___ ___ v6
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 2560 10							.BYTE VOLUME 
    83 2561 60							.BYTE V6 
Source: DUMB Module.asm
   869 2562				ROW D_4 $07 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2562 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2563 32							.BYTE D_4 
   111 2564 87							.BYTE $07 + INSTRINIT
   112 2565 F0							.BYTE VF 
Source: DUMB Module.asm
   870 2566				ROW ___ ___ v6
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 2566 10							.BYTE VOLUME 
    83 2567 60							.BYTE V6 
Source: DUMB Module.asm
   871 2568				ROW Cs4 $07 vF
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2568 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2569 31							.BYTE CS4 
   111 256A 87							.BYTE $07 + INSTRINIT
   112 256B F0							.BYTE VF 
Source: DUMB Module.asm
   872 256C				ROW B_3 $07 vF
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 256C 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 256D 2F							.BYTE B_3 
   111 256E 87							.BYTE $07 + INSTRINIT
   112 256F F0							.BYTE VF 
Source: DUMB Module.asm
   873 2570				ROW PAUSE+1
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 2570 81							.BYTE PAUSE+1	; PAUSE+1 is a Row Pause Command
Source: DUMB Module.asm
   874 2571				ROW ___ ___ v6
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 2571 10							.BYTE VOLUME 
    83 2572 60							.BYTE V6 
Source: DUMB Module.asm
   875 2573				ROW ___ ___ v2
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 2573 10							.BYTE VOLUME 
    83 2574 20							.BYTE V2 
Source: DUMB Module.asm
   876 					
   877 2575			PTN_15
   878 2575				ROW E_3 $07 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2575 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2576 28							.BYTE E_3 
   111 2577 87							.BYTE $07 + INSTRINIT
   112 2578 F0							.BYTE VF 
Source: DUMB Module.asm
   879 2579				ROW D_4 $07 vF
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2579 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 257A 32							.BYTE D_4 
   111 257B 87							.BYTE $07 + INSTRINIT
   112 257C F0							.BYTE VF 
Source: DUMB Module.asm
   880 257D				ROW Cs4 $07 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 257D 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 257E 31							.BYTE CS4 
   111 257F 87							.BYTE $07 + INSTRINIT
   112 2580 F0							.BYTE VF 
Source: DUMB Module.asm
   881 2581				ROW ___ ___ v6 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 2581 10							.BYTE VOLUME 
    83 2582 60							.BYTE V6 
Source: DUMB Module.asm
   882 2583				ROW A_3 $07 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2583 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2584 2D							.BYTE A_3 
   111 2585 87							.BYTE $07 + INSTRINIT
   112 2586 F0							.BYTE VF 
Source: DUMB Module.asm
   883 2587				ROW PAUSE+1
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 2587 81							.BYTE PAUSE+1	; PAUSE+1 is a Row Pause Command
Source: DUMB Module.asm
   884 2588				ROW ___ ___ v6 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 2588 10							.BYTE VOLUME 
    83 2589 60							.BYTE V6 
Source: DUMB Module.asm
   885 258A				ROW B_3 $07 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 258A 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 258B 2F							.BYTE B_3 
   111 258C 87							.BYTE $07 + INSTRINIT
   112 258D F0							.BYTE VF 
Source: DUMB Module.asm
   886 258E				ROW Gs3 $07 vF
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 258E 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 258F 2C							.BYTE GS3 
   111 2590 87							.BYTE $07 + INSTRINIT
   112 2591 F0							.BYTE VF 
Source: DUMB Module.asm
   887 2592				ROW Fs3 $07 vF
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2592 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2593 2A							.BYTE FS3 
   111 2594 87							.BYTE $07 + INSTRINIT
   112 2595 F0							.BYTE VF 
Source: DUMB Module.asm
   888 2596				ROW ___ ___ v6 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 2596 10							.BYTE VOLUME 
    83 2597 60							.BYTE V6 
Source: DUMB Module.asm
   889 2598				ROW E_3 $07 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2598 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2599 28							.BYTE E_3 
   111 259A 87							.BYTE $07 + INSTRINIT
   112 259B F0							.BYTE VF 
Source: DUMB Module.asm
   890 259C				ROW Fs3 $07 vF
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 259C 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 259D 2A							.BYTE FS3 
   111 259E 87							.BYTE $07 + INSTRINIT
   112 259F F0							.BYTE VF 
Source: DUMB Module.asm
   891 25A0				ROW PAUSE+1
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 25A0 81							.BYTE PAUSE+1	; PAUSE+1 is a Row Pause Command
Source: DUMB Module.asm
   892 25A1				ROW ___ ___ v6
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 25A1 10							.BYTE VOLUME 
    83 25A2 60							.BYTE V6 
Source: DUMB Module.asm
   893 25A3				ROW ___ ___ v2
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 25A3 10							.BYTE VOLUME 
    83 25A4 20							.BYTE V2 
Source: DUMB Module.asm
   894 25A5				ROW A_3 $07 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 25A5 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 25A6 2D							.BYTE A_3 
   111 25A7 87							.BYTE $07 + INSTRINIT
   112 25A8 F0							.BYTE VF 
Source: DUMB Module.asm
   895 25A9				ROW B_3 $07 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 25A9 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 25AA 2F							.BYTE B_3 
   111 25AB 87							.BYTE $07 + INSTRINIT
   112 25AC F0							.BYTE VF 
Source: DUMB Module.asm
   896 25AD				ROW Cs4 $07 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 25AD 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 25AE 31							.BYTE CS4 
   111 25AF 87							.BYTE $07 + INSTRINIT
   112 25B0 F0							.BYTE VF 
Source: DUMB Module.asm
   897 25B1				ROW ___ ___ v6
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 25B1 10							.BYTE VOLUME 
    83 25B2 60							.BYTE V6 
Source: DUMB Module.asm
   898 25B3				ROW D_4 $07 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 25B3 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 25B4 32							.BYTE D_4 
   111 25B5 87							.BYTE $07 + INSTRINIT
   112 25B6 F0							.BYTE VF 
Source: DUMB Module.asm
   899 25B7				ROW ___ ___ v6
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 25B7 10							.BYTE VOLUME 
    83 25B8 60							.BYTE V6 
Source: DUMB Module.asm
   900 25B9				ROW E_4 $07 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 25B9 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 25BA 34							.BYTE E_4 
   111 25BB 87							.BYTE $07 + INSTRINIT
   112 25BC F0							.BYTE VF 
Source: DUMB Module.asm
   901 25BD				ROW ___ ___ v6
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 25BD 10							.BYTE VOLUME 
    83 25BE 60							.BYTE V6 
Source: DUMB Module.asm
   902 25BF				ROW Fs4 $07 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 25BF 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 25C0 36							.BYTE FS4 
   111 25C1 87							.BYTE $07 + INSTRINIT
   112 25C2 F0							.BYTE VF 
Source: DUMB Module.asm
   903 25C3				ROW ___ ___ v6
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 25C3 10							.BYTE VOLUME 
    83 25C4 60							.BYTE V6 
Source: DUMB Module.asm
   904 25C5				ROW D_4 $07 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 25C5 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 25C6 32							.BYTE D_4 
   111 25C7 87							.BYTE $07 + INSTRINIT
   112 25C8 F0							.BYTE VF 
Source: DUMB Module.asm
   905 25C9				ROW Cs4 $07 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 25C9 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 25CA 31							.BYTE CS4 
   111 25CB 87							.BYTE $07 + INSTRINIT
   112 25CC F0							.BYTE VF 
Source: DUMB Module.asm
   906 25CD				ROW PAUSE 
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 25CD 80							.BYTE PAUSE	; PAUSE is a Row Pause Command
Source: DUMB Module.asm
   907 25CE				ROW ___ ___ v6
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 25CE 10							.BYTE VOLUME 
    83 25CF 60							.BYTE V6 
Source: DUMB Module.asm
   908 					
   909 25D0			PTN_16
   910 25D0				ROW B_3 $07 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 25D0 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 25D1 2F							.BYTE B_3 
   111 25D2 87							.BYTE $07 + INSTRINIT
   112 25D3 F0							.BYTE VF 
Source: DUMB Module.asm
   911 25D4				ROW PAUSE+3 
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 25D4 83							.BYTE PAUSE+3	; PAUSE+3 is a Row Pause Command
Source: DUMB Module.asm
   912 25D5				ROW ___ ___ v6
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 25D5 10							.BYTE VOLUME 
    83 25D6 60							.BYTE V6 
Source: DUMB Module.asm
   913 25D7				ROW ___ ___ v2
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 25D7 10							.BYTE VOLUME 
    83 25D8 20							.BYTE V2 
Source: DUMB Module.asm
   914 25D9				ROW PAUSE 	
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 25D9 80							.BYTE PAUSE	; PAUSE is a Row Pause Command
Source: DUMB Module.asm
   915 25DA				ROW Gs3 $07 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 25DA 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 25DB 2C							.BYTE GS3 
   111 25DC 87							.BYTE $07 + INSTRINIT
   112 25DD F0							.BYTE VF 
Source: DUMB Module.asm
   916 25DE				ROW ___ ___ v6	
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 25DE 10							.BYTE VOLUME 
    83 25DF 60							.BYTE V6 
Source: DUMB Module.asm
   917 25E0				ROW A_3 $07 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 25E0 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 25E1 2D							.BYTE A_3 
   111 25E2 87							.BYTE $07 + INSTRINIT
   112 25E3 F0							.BYTE VF 
Source: DUMB Module.asm
   918 25E4				ROW Gs3 $07 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 25E4 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 25E5 2C							.BYTE GS3 
   111 25E6 87							.BYTE $07 + INSTRINIT
   112 25E7 F0							.BYTE VF 
Source: DUMB Module.asm
   919 25E8				ROW ___ ___ v6
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 25E8 10							.BYTE VOLUME 
    83 25E9 60							.BYTE V6 
Source: DUMB Module.asm
   920 25EA				ROW Fs3 $07 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 25EA 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 25EB 2A							.BYTE FS3 
   111 25EC 87							.BYTE $07 + INSTRINIT
   112 25ED F0							.BYTE VF 
Source: DUMB Module.asm
   921 25EE				ROW E_3 $07 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 25EE 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 25EF 28							.BYTE E_3 
   111 25F0 87							.BYTE $07 + INSTRINIT
   112 25F1 F0							.BYTE VF 
Source: DUMB Module.asm
   922 25F2				ROW ___ ___ v6	
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 25F2 10							.BYTE VOLUME 
    83 25F3 60							.BYTE V6 
Source: DUMB Module.asm
   923 25F4				ROW Fs3 $07 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 25F4 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 25F5 2A							.BYTE FS3 
   111 25F6 87							.BYTE $07 + INSTRINIT
   112 25F7 F0							.BYTE VF 
Source: DUMB Module.asm
   924 25F8				ROW PAUSE+3 
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 25F8 83							.BYTE PAUSE+3	; PAUSE+3 is a Row Pause Command
Source: DUMB Module.asm
   925 25F9				ROW ___ ___ v6
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 25F9 10							.BYTE VOLUME 
    83 25FA 60							.BYTE V6 
Source: DUMB Module.asm
   926 25FB				ROW ___ ___ v2
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 25FB 10							.BYTE VOLUME 
    83 25FC 20							.BYTE V2 
Source: DUMB Module.asm
   927 25FD				ROW PAUSE 
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 25FD 80							.BYTE PAUSE	; PAUSE is a Row Pause Command
Source: DUMB Module.asm
   928 25FE				ROW B_3 $07 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 25FE 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 25FF 2F							.BYTE B_3 
   111 2600 87							.BYTE $07 + INSTRINIT
   112 2601 F0							.BYTE VF 
Source: DUMB Module.asm
   929 2602				ROW Cs4 $07 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2602 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2603 31							.BYTE CS4 
   111 2604 87							.BYTE $07 + INSTRINIT
   112 2605 F0							.BYTE VF 
Source: DUMB Module.asm
   930 2606				ROW D_4 $07 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2606 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2607 32							.BYTE D_4 
   111 2608 87							.BYTE $07 + INSTRINIT
   112 2609 F0							.BYTE VF 
Source: DUMB Module.asm
   931 260A				ROW B_3 $07 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 260A 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 260B 2F							.BYTE B_3 
   111 260C 87							.BYTE $07 + INSTRINIT
   112 260D F0							.BYTE VF 
Source: DUMB Module.asm
   932 260E				ROW ___ ___ v6
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 260E 10							.BYTE VOLUME 
    83 260F 60							.BYTE V6 
Source: DUMB Module.asm
   933 2610				ROW Cs4 $07 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2610 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2611 31							.BYTE CS4 
   111 2612 87							.BYTE $07 + INSTRINIT
   112 2613 F0							.BYTE VF 
Source: DUMB Module.asm
   934 2614				ROW ___ ___ v6
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 2614 10							.BYTE VOLUME 
    83 2615 60							.BYTE V6 
Source: DUMB Module.asm
   935 2616				ROW A_3 $07 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2616 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2617 2D							.BYTE A_3 
   111 2618 87							.BYTE $07 + INSTRINIT
   112 2619 F0							.BYTE VF 
Source: DUMB Module.asm
   936 					
   937 261A			PTN_17
   938 261A				ROW B_3 $07 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 261A 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 261B 2F							.BYTE B_3 
   111 261C 87							.BYTE $07 + INSTRINIT
   112 261D F0							.BYTE VF 
Source: DUMB Module.asm
   939 261E				ROW PAUSE+3 
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 261E 83							.BYTE PAUSE+3	; PAUSE+3 is a Row Pause Command
Source: DUMB Module.asm
   940 261F				ROW ___ ___ v6
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 261F 10							.BYTE VOLUME 
    83 2620 60							.BYTE V6 
Source: DUMB Module.asm
   941 2621				ROW ___ ___ v2
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 2621 10							.BYTE VOLUME 
    83 2622 20							.BYTE V2 
Source: DUMB Module.asm
   942 2623				ROW PAUSE 	
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 2623 80							.BYTE PAUSE	; PAUSE is a Row Pause Command
Source: DUMB Module.asm
   943 2624				ROW Gs3 $07 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2624 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2625 2C							.BYTE GS3 
   111 2626 87							.BYTE $07 + INSTRINIT
   112 2627 F0							.BYTE VF 
Source: DUMB Module.asm
   944 2628				ROW ___ ___ v6	
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 2628 10							.BYTE VOLUME 
    83 2629 60							.BYTE V6 
Source: DUMB Module.asm
   945 262A				ROW A_3 $07 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 262A 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 262B 2D							.BYTE A_3 
   111 262C 87							.BYTE $07 + INSTRINIT
   112 262D F0							.BYTE VF 
Source: DUMB Module.asm
   946 262E				ROW Gs3 $07 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 262E 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 262F 2C							.BYTE GS3 
   111 2630 87							.BYTE $07 + INSTRINIT
   112 2631 F0							.BYTE VF 
Source: DUMB Module.asm
   947 2632				ROW ___ ___ v6
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 2632 10							.BYTE VOLUME 
    83 2633 60							.BYTE V6 
Source: DUMB Module.asm
   948 2634				ROW Fs3 $07 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2634 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2635 2A							.BYTE FS3 
   111 2636 87							.BYTE $07 + INSTRINIT
   112 2637 F0							.BYTE VF 
Source: DUMB Module.asm
   949 2638				ROW E_3 $07 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2638 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2639 28							.BYTE E_3 
   111 263A 87							.BYTE $07 + INSTRINIT
   112 263B F0							.BYTE VF 
Source: DUMB Module.asm
   950 263C				ROW ___ ___ v6	
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 263C 10							.BYTE VOLUME 
    83 263D 60							.BYTE V6 
Source: DUMB Module.asm
   951 263E				ROW Fs3 $07 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 263E 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 263F 2A							.BYTE FS3 
   111 2640 87							.BYTE $07 + INSTRINIT
   112 2641 F0							.BYTE VF 
Source: DUMB Module.asm
   952 2642				ROW PAUSE+3 
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 2642 83							.BYTE PAUSE+3	; PAUSE+3 is a Row Pause Command
Source: DUMB Module.asm
   953 2643				ROW ___ ___ v6
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 2643 10							.BYTE VOLUME 
    83 2644 60							.BYTE V6 
Source: DUMB Module.asm
   954 2645				ROW ___ ___ v2
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 2645 10							.BYTE VOLUME 
    83 2646 20							.BYTE V2 
Source: DUMB Module.asm
   955 2647				ROW PAUSE 
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 2647 80							.BYTE PAUSE	; PAUSE is a Row Pause Command
Source: DUMB Module.asm
   956 2648				ROW B_3 $07 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2648 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2649 2F							.BYTE B_3 
   111 264A 87							.BYTE $07 + INSTRINIT
   112 264B F0							.BYTE VF 
Source: DUMB Module.asm
   957 264C				ROW Cs4 $07 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 264C 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 264D 31							.BYTE CS4 
   111 264E 87							.BYTE $07 + INSTRINIT
   112 264F F0							.BYTE VF 
Source: DUMB Module.asm
   958 2650				ROW D_4 $07 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2650 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2651 32							.BYTE D_4 
   111 2652 87							.BYTE $07 + INSTRINIT
   112 2653 F0							.BYTE VF 
Source: DUMB Module.asm
   959 2654				ROW E_4 $07 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2654 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2655 34							.BYTE E_4 
   111 2656 87							.BYTE $07 + INSTRINIT
   112 2657 F0							.BYTE VF 
Source: DUMB Module.asm
   960 2658				ROW ___ ___ v6
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 2658 10							.BYTE VOLUME 
    83 2659 60							.BYTE V6 
Source: DUMB Module.asm
   961 265A				ROW Cs4 $07 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 265A 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 265B 31							.BYTE CS4 
   111 265C 87							.BYTE $07 + INSTRINIT
   112 265D F0							.BYTE VF 
Source: DUMB Module.asm
   962 265E				ROW B_3 $07 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 265E 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 265F 2F							.BYTE B_3 
   111 2660 87							.BYTE $07 + INSTRINIT
   112 2661 F0							.BYTE VF 
Source: DUMB Module.asm
   963 2662				ROW ___ ___ v6
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 2662 10							.BYTE VOLUME 
    83 2663 60							.BYTE V6 
Source: DUMB Module.asm
   964
   965 2664			PTN_18
   966 2664				ROW E_3 $07 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2664 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2665 28							.BYTE E_3 
   111 2666 87							.BYTE $07 + INSTRINIT
   112 2667 F0							.BYTE VF 
Source: DUMB Module.asm
   967 2668				ROW D_4 $07 vF
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2668 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2669 32							.BYTE D_4 
   111 266A 87							.BYTE $07 + INSTRINIT
   112 266B F0							.BYTE VF 
Source: DUMB Module.asm
   968 266C				ROW Cs4 $07 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 266C 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 266D 31							.BYTE CS4 
   111 266E 87							.BYTE $07 + INSTRINIT
   112 266F F0							.BYTE VF 
Source: DUMB Module.asm
   969 2670				ROW ___ ___ v6 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 2670 10							.BYTE VOLUME 
    83 2671 60							.BYTE V6 
Source: DUMB Module.asm
   970 2672				ROW A_3 $07 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2672 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2673 2D							.BYTE A_3 
   111 2674 87							.BYTE $07 + INSTRINIT
   112 2675 F0							.BYTE VF 
Source: DUMB Module.asm
   971 2676				ROW PAUSE
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 2676 80							.BYTE PAUSE	; PAUSE is a Row Pause Command
Source: DUMB Module.asm
   972 2677				ROW ___ ___ v6
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 2677 10							.BYTE VOLUME 
    83 2678 60							.BYTE V6 
Source: DUMB Module.asm
   973 2679				ROW ___ ___ v2 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 2679 10							.BYTE VOLUME 
    83 267A 20							.BYTE V2 
Source: DUMB Module.asm
   974 267B				ROW B_3 $07 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 267B 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 267C 2F							.BYTE B_3 
   111 267D 87							.BYTE $07 + INSTRINIT
   112 267E F0							.BYTE VF 
Source: DUMB Module.asm
   975 267F				ROW Gs3 $07 vF
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 267F 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2680 2C							.BYTE GS3 
   111 2681 87							.BYTE $07 + INSTRINIT
   112 2682 F0							.BYTE VF 
Source: DUMB Module.asm
   976 2683				ROW Fs3 $07 vF
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2683 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2684 2A							.BYTE FS3 
   111 2685 87							.BYTE $07 + INSTRINIT
   112 2686 F0							.BYTE VF 
Source: DUMB Module.asm
   977 2687				ROW ___ ___ v6 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 2687 10							.BYTE VOLUME 
    83 2688 60							.BYTE V6 
Source: DUMB Module.asm
   978 2689				ROW E_3 $07 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2689 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 268A 28							.BYTE E_3 
   111 268B 87							.BYTE $07 + INSTRINIT
   112 268C F0							.BYTE VF 
Source: DUMB Module.asm
   979 268D				ROW Fs3 $07 vF
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 268D 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 268E 2A							.BYTE FS3 
   111 268F 87							.BYTE $07 + INSTRINIT
   112 2690 F0							.BYTE VF 
Source: DUMB Module.asm
   980 2691				ROW PAUSE+1
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 2691 81							.BYTE PAUSE+1	; PAUSE+1 is a Row Pause Command
Source: DUMB Module.asm
   981 2692				ROW ___ ___ v6
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 2692 10							.BYTE VOLUME 
    83 2693 60							.BYTE V6 
Source: DUMB Module.asm
   982 2694				ROW ___ ___ v2
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 2694 10							.BYTE VOLUME 
    83 2695 20							.BYTE V2 
Source: DUMB Module.asm
   983 2696				ROW E_3 $07 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2696 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2697 28							.BYTE E_3 
   111 2698 87							.BYTE $07 + INSTRINIT
   112 2699 F0							.BYTE VF 
Source: DUMB Module.asm
   984 269A				ROW ___ ___ v6
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 269A 10							.BYTE VOLUME 
    83 269B 60							.BYTE V6 
Source: DUMB Module.asm
   985 269C				ROW Gs3 $07 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 269C 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 269D 2C							.BYTE GS3 
   111 269E 87							.BYTE $07 + INSTRINIT
   112 269F F0							.BYTE VF 
Source: DUMB Module.asm
   986 26A0				ROW A_3 $07 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 26A0 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 26A1 2D							.BYTE A_3 
   111 26A2 87							.BYTE $07 + INSTRINIT
   112 26A3 F0							.BYTE VF 
Source: DUMB Module.asm
   987 26A4				ROW PAUSE
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 26A4 80							.BYTE PAUSE	; PAUSE is a Row Pause Command
Source: DUMB Module.asm
   988 26A5				ROW ___ ___ v6 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 26A5 10							.BYTE VOLUME 
    83 26A6 60							.BYTE V6 
Source: DUMB Module.asm
   989 26A7				ROW Gs3 $07 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 26A7 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 26A8 2C							.BYTE GS3 
   111 26A9 87							.BYTE $07 + INSTRINIT
   112 26AA F0							.BYTE VF 
Source: DUMB Module.asm
   990 26AB				ROW ___ ___ v6 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 26AB 10							.BYTE VOLUME 
    83 26AC 60							.BYTE V6 
Source: DUMB Module.asm
   991 26AD				ROW Fs3 $07 vF
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 26AD 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 26AE 2A							.BYTE FS3 
   111 26AF 87							.BYTE $07 + INSTRINIT
   112 26B0 F0							.BYTE VF 
Source: DUMB Module.asm
   992 26B1				ROW PAUSE+2
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 26B1 82							.BYTE PAUSE+2	; PAUSE+2 is a Row Pause Command
Source: DUMB Module.asm
   993 26B2				ROW ___ ___ v6
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 26B2 10							.BYTE VOLUME 
    83 26B3 60							.BYTE V6 
Source: DUMB Module.asm
   994 26B4				ROW ___ ___ v2
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 26B4 10							.BYTE VOLUME 
    83 26B5 20							.BYTE V2 
Source: DUMB Module.asm
   995
   996 26B6			PTN_19
   997 26B6				ROW E_3 $07 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 26B6 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 26B7 28							.BYTE E_3 
   111 26B8 87							.BYTE $07 + INSTRINIT
   112 26B9 F0							.BYTE VF 
Source: DUMB Module.asm
   998 26BA				ROW ___ ___ v6
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 26BA 10							.BYTE VOLUME 
    83 26BB 60							.BYTE V6 
Source: DUMB Module.asm
   999 26BC				ROW D_4 $07 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 26BC 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 26BD 32							.BYTE D_4 
   111 26BE 87							.BYTE $07 + INSTRINIT
   112 26BF F0							.BYTE VF 
Source: DUMB Module.asm
  1000 26C0				ROW ___ ___ v6
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 26C0 10							.BYTE VOLUME 
    83 26C1 60							.BYTE V6 
Source: DUMB Module.asm
  1001 26C2				ROW E_4 $07 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 26C2 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 26C3 34							.BYTE E_4 
   111 26C4 87							.BYTE $07 + INSTRINIT
   112 26C5 F0							.BYTE VF 
Source: DUMB Module.asm
  1002 26C6				ROW D_4 $07 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 26C6 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 26C7 32							.BYTE D_4 
   111 26C8 87							.BYTE $07 + INSTRINIT
   112 26C9 F0							.BYTE VF 
Source: DUMB Module.asm
  1003 26CA				ROW PAUSE 
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 26CA 80							.BYTE PAUSE	; PAUSE is a Row Pause Command
Source: DUMB Module.asm
  1004 26CB				ROW ___ ___ v6
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 26CB 10							.BYTE VOLUME 
    83 26CC 60							.BYTE V6 
Source: DUMB Module.asm
  1005 26CD				ROW Cs4 $07 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 26CD 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 26CE 31							.BYTE CS4 
   111 26CF 87							.BYTE $07 + INSTRINIT
   112 26D0 F0							.BYTE VF 
Source: DUMB Module.asm
  1006 26D1				ROW PAUSE 
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 26D1 80							.BYTE PAUSE	; PAUSE is a Row Pause Command
Source: DUMB Module.asm
  1007 26D2				ROW ___ ___ v6	
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 26D2 10							.BYTE VOLUME 
    83 26D3 60							.BYTE V6 
Source: DUMB Module.asm
  1008 26D4				ROW B_3 $07 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 26D4 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 26D5 2F							.BYTE B_3 
   111 26D6 87							.BYTE $07 + INSTRINIT
   112 26D7 F0							.BYTE VF 
Source: DUMB Module.asm
  1009 26D8				ROW ___ ___ v6
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 26D8 10							.BYTE VOLUME 
    83 26D9 60							.BYTE V6 
Source: DUMB Module.asm
  1010 26DA				ROW A_3 $07 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 26DA 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 26DB 2D							.BYTE A_3 
   111 26DC 87							.BYTE $07 + INSTRINIT
   112 26DD F0							.BYTE VF 
Source: DUMB Module.asm
  1011 26DE				ROW ___ ___ v6	
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 26DE 10							.BYTE VOLUME 
    83 26DF 60							.BYTE V6 
Source: DUMB Module.asm
  1012 26E0				ROW Cs4 $07 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 26E0 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 26E1 31							.BYTE CS4 
   111 26E2 87							.BYTE $07 + INSTRINIT
   112 26E3 F0							.BYTE VF 
Source: DUMB Module.asm
  1013 26E4				ROW B_3 $07 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 26E4 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 26E5 2F							.BYTE B_3 
   111 26E6 87							.BYTE $07 + INSTRINIT
   112 26E7 F0							.BYTE VF 
Source: DUMB Module.asm
  1014 26E8				ROW PAUSE+6 
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 26E8 86							.BYTE PAUSE+6	; PAUSE+6 is a Row Pause Command
Source: DUMB Module.asm
  1015 26E9				ROW ___ ___ v6
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 26E9 10							.BYTE VOLUME 
    83 26EA 60							.BYTE V6 
Source: DUMB Module.asm
  1016 26EB				ROW PAUSE+4
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 26EB 84							.BYTE PAUSE+4	; PAUSE+4 is a Row Pause Command
Source: DUMB Module.asm
  1017 26EC				ROW ___ ___ v2
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 26EC 10							.BYTE VOLUME 
    83 26ED 20							.BYTE V2 
Source: DUMB Module.asm
  1018 26EE				END_PATTERN 
Macro: END_PATTERN [Source: DUMB Module.inc]
     2 26EE 00				.BYTE $00			; Pattern End 
Source: DUMB Module.asm
  1019
  1020 26EF			PTN_1A
  1021 26EF				ROW E_3 $09 v8 CMD4 $02
Macro: ROW [Source: DUMB Module.inc]
    33 = 0005						argnum = 5	; up to 5 arguments may be valid 
   140 26EF 78							.BYTE NOTE + INSTRUMENT + VOLUME + COMMAND_1 
   141 26F0 28							.BYTE E_3 
   142 26F1 89							.BYTE $09 + INSTRINIT
   143 26F2 80							.BYTE V8
   144 26F3 04							.BYTE CMD4 
   145 26F4 02							.BYTE $02 
Source: DUMB Module.asm
  1022 26F5				ROW D_4 $09 v8
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 26F5 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 26F6 32							.BYTE D_4 
   111 26F7 89							.BYTE $09 + INSTRINIT
   112 26F8 80							.BYTE V8 
Source: DUMB Module.asm
  1023 26F9				ROW Cs4 $09 v8 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 26F9 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 26FA 31							.BYTE CS4 
   111 26FB 89							.BYTE $09 + INSTRINIT
   112 26FC 80							.BYTE V8 
Source: DUMB Module.asm
  1024 26FD				ROW ___ ___ v3 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 26FD 10							.BYTE VOLUME 
    83 26FE 30							.BYTE V3 
Source: DUMB Module.asm
  1025 26FF				ROW A_3 $09 v8 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 26FF 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2700 2D							.BYTE A_3 
   111 2701 89							.BYTE $09 + INSTRINIT
   112 2702 80							.BYTE V8 
Source: DUMB Module.asm
  1026 2703				ROW PAUSE+1
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 2703 81							.BYTE PAUSE+1	; PAUSE+1 is a Row Pause Command
Source: DUMB Module.asm
  1027 2704				ROW ___ ___ v3 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 2704 10							.BYTE VOLUME 
    83 2705 30							.BYTE V3 
Source: DUMB Module.asm
  1028 2706				ROW B_3 $09 v8 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2706 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2707 2F							.BYTE B_3 
   111 2708 89							.BYTE $09 + INSTRINIT
   112 2709 80							.BYTE V8 
Source: DUMB Module.asm
  1029 270A				ROW Gs3 $09 v8
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 270A 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 270B 2C							.BYTE GS3 
   111 270C 89							.BYTE $09 + INSTRINIT
   112 270D 80							.BYTE V8 
Source: DUMB Module.asm
  1030 270E				ROW Fs3 $09 v8
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 270E 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 270F 2A							.BYTE FS3 
   111 2710 89							.BYTE $09 + INSTRINIT
   112 2711 80							.BYTE V8 
Source: DUMB Module.asm
  1031 2712				ROW ___ ___ v3 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 2712 10							.BYTE VOLUME 
    83 2713 30							.BYTE V3 
Source: DUMB Module.asm
  1032 2714				ROW E_3 $09 v8 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2714 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2715 28							.BYTE E_3 
   111 2716 89							.BYTE $09 + INSTRINIT
   112 2717 80							.BYTE V8 
Source: DUMB Module.asm
  1033 2718				ROW Fs3 $09 v8
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2718 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2719 2A							.BYTE FS3 
   111 271A 89							.BYTE $09 + INSTRINIT
   112 271B 80							.BYTE V8 
Source: DUMB Module.asm
  1034 271C				ROW PAUSE+1
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 271C 81							.BYTE PAUSE+1	; PAUSE+1 is a Row Pause Command
Source: DUMB Module.asm
  1035 271D				ROW ___ ___ v3
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 271D 10							.BYTE VOLUME 
    83 271E 30							.BYTE V3 
Source: DUMB Module.asm
  1036 271F				ROW ___ ___ v1
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 271F 10							.BYTE VOLUME 
    83 2720 10							.BYTE V1 
Source: DUMB Module.asm
  1037 2721				ROW E_3 $09 v8 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2721 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2722 28							.BYTE E_3 
   111 2723 89							.BYTE $09 + INSTRINIT
   112 2724 80							.BYTE V8 
Source: DUMB Module.asm
  1038 2725				ROW ___ ___ v3
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 2725 10							.BYTE VOLUME 
    83 2726 30							.BYTE V3 
Source: DUMB Module.asm
  1039 2727				ROW Fs3 $09 v8 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2727 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2728 2A							.BYTE FS3 
   111 2729 89							.BYTE $09 + INSTRINIT
   112 272A 80							.BYTE V8 
Source: DUMB Module.asm
  1040 272B				ROW ___ ___ v3
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 272B 10							.BYTE VOLUME 
    83 272C 30							.BYTE V3 
Source: DUMB Module.asm
  1041 272D				ROW A_3 $09 v8 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 272D 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 272E 2D							.BYTE A_3 
   111 272F 89							.BYTE $09 + INSTRINIT
   112 2730 80							.BYTE V8 
Source: DUMB Module.asm
  1042 2731				ROW ___ ___ v3
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 2731 10							.BYTE VOLUME 
    83 2732 30							.BYTE V3 
Source: DUMB Module.asm
  1043 2733				ROW D_4 $09 v8 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2733 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2734 32							.BYTE D_4 
   111 2735 89							.BYTE $09 + INSTRINIT
   112 2736 80							.BYTE V8 
Source: DUMB Module.asm
  1044 2737				ROW ___ ___ v3
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 2737 10							.BYTE VOLUME 
    83 2738 30							.BYTE V3 
Source: DUMB Module.asm
  1045 2739				ROW Cs4 $09 v8
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2739 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 273A 31							.BYTE CS4 
   111 273B 89							.BYTE $09 + INSTRINIT
   112 273C 80							.BYTE V8 
Source: DUMB Module.asm
  1046 273D				ROW B_3 $09 v8
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 273D 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 273E 2F							.BYTE B_3 
   111 273F 89							.BYTE $09 + INSTRINIT
   112 2740 80							.BYTE V8 
Source: DUMB Module.asm
  1047 2741				ROW PAUSE+1
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 2741 81							.BYTE PAUSE+1	; PAUSE+1 is a Row Pause Command
Source: DUMB Module.asm
  1048 2742				ROW ___ ___ v3
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 2742 10							.BYTE VOLUME 
    83 2743 30							.BYTE V3 
Source: DUMB Module.asm
  1049 2744				ROW ___ ___ v1
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 2744 10							.BYTE VOLUME 
    83 2745 10							.BYTE V1 
Source: DUMB Module.asm
  1050 					
  1051 2746			PTN_1B
  1052 2746				ROW E_3 $09 v8 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2746 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2747 28							.BYTE E_3 
   111 2748 89							.BYTE $09 + INSTRINIT
   112 2749 80							.BYTE V8 
Source: DUMB Module.asm
  1053 274A				ROW D_4 $09 v8
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 274A 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 274B 32							.BYTE D_4 
   111 274C 89							.BYTE $09 + INSTRINIT
   112 274D 80							.BYTE V8 
Source: DUMB Module.asm
  1054 274E				ROW Cs4 $09 v8 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 274E 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 274F 31							.BYTE CS4 
   111 2750 89							.BYTE $09 + INSTRINIT
   112 2751 80							.BYTE V8 
Source: DUMB Module.asm
  1055 2752				ROW ___ ___ v3 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 2752 10							.BYTE VOLUME 
    83 2753 30							.BYTE V3 
Source: DUMB Module.asm
  1056 2754				ROW A_3 $09 v8 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2754 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2755 2D							.BYTE A_3 
   111 2756 89							.BYTE $09 + INSTRINIT
   112 2757 80							.BYTE V8 
Source: DUMB Module.asm
  1057 2758				ROW PAUSE+1
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 2758 81							.BYTE PAUSE+1	; PAUSE+1 is a Row Pause Command
Source: DUMB Module.asm
  1058 2759				ROW ___ ___ v3 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 2759 10							.BYTE VOLUME 
    83 275A 30							.BYTE V3 
Source: DUMB Module.asm
  1059 275B				ROW B_3 $09 v8 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 275B 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 275C 2F							.BYTE B_3 
   111 275D 89							.BYTE $09 + INSTRINIT
   112 275E 80							.BYTE V8 
Source: DUMB Module.asm
  1060 275F				ROW Gs3 $09 v8
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 275F 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2760 2C							.BYTE GS3 
   111 2761 89							.BYTE $09 + INSTRINIT
   112 2762 80							.BYTE V8 
Source: DUMB Module.asm
  1061 2763				ROW Fs3 $09 v8
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2763 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2764 2A							.BYTE FS3 
   111 2765 89							.BYTE $09 + INSTRINIT
   112 2766 80							.BYTE V8 
Source: DUMB Module.asm
  1062 2767				ROW ___ ___ v3 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 2767 10							.BYTE VOLUME 
    83 2768 30							.BYTE V3 
Source: DUMB Module.asm
  1063 2769				ROW E_3 $09 v8 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2769 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 276A 28							.BYTE E_3 
   111 276B 89							.BYTE $09 + INSTRINIT
   112 276C 80							.BYTE V8 
Source: DUMB Module.asm
  1064 276D				ROW Fs3 $09 v8
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 276D 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 276E 2A							.BYTE FS3 
   111 276F 89							.BYTE $09 + INSTRINIT
   112 2770 80							.BYTE V8 
Source: DUMB Module.asm
  1065 2771				ROW PAUSE+1
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 2771 81							.BYTE PAUSE+1	; PAUSE+1 is a Row Pause Command
Source: DUMB Module.asm
  1066 2772				ROW ___ ___ v3
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 2772 10							.BYTE VOLUME 
    83 2773 30							.BYTE V3 
Source: DUMB Module.asm
  1067 2774				ROW ___ ___ v1
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 2774 10							.BYTE VOLUME 
    83 2775 10							.BYTE V1 
Source: DUMB Module.asm
  1068 2776				ROW A_3 $09 v8 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2776 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2777 2D							.BYTE A_3 
   111 2778 89							.BYTE $09 + INSTRINIT
   112 2779 80							.BYTE V8 
Source: DUMB Module.asm
  1069 277A				ROW B_3 $09 v8 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 277A 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 277B 2F							.BYTE B_3 
   111 277C 89							.BYTE $09 + INSTRINIT
   112 277D 80							.BYTE V8 
Source: DUMB Module.asm
  1070 277E				ROW Cs4 $09 v8 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 277E 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 277F 31							.BYTE CS4 
   111 2780 89							.BYTE $09 + INSTRINIT
   112 2781 80							.BYTE V8 
Source: DUMB Module.asm
  1071 2782				ROW ___ ___ v3
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 2782 10							.BYTE VOLUME 
    83 2783 30							.BYTE V3 
Source: DUMB Module.asm
  1072 2784				ROW D_4 $09 v8 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2784 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2785 32							.BYTE D_4 
   111 2786 89							.BYTE $09 + INSTRINIT
   112 2787 80							.BYTE V8 
Source: DUMB Module.asm
  1073 2788				ROW ___ ___ v3
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 2788 10							.BYTE VOLUME 
    83 2789 30							.BYTE V3 
Source: DUMB Module.asm
  1074 278A				ROW E_4 $09 v8 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 278A 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 278B 34							.BYTE E_4 
   111 278C 89							.BYTE $09 + INSTRINIT
   112 278D 80							.BYTE V8 
Source: DUMB Module.asm
  1075 278E				ROW ___ ___ v3
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 278E 10							.BYTE VOLUME 
    83 278F 30							.BYTE V3 
Source: DUMB Module.asm
  1076 2790				ROW Fs4 $09 v8 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2790 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2791 36							.BYTE FS4 
   111 2792 89							.BYTE $09 + INSTRINIT
   112 2793 80							.BYTE V8 
Source: DUMB Module.asm
  1077 2794				ROW ___ ___ v3
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 2794 10							.BYTE VOLUME 
    83 2795 30							.BYTE V3 
Source: DUMB Module.asm
  1078 2796				ROW D_4 $09 v8 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2796 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2797 32							.BYTE D_4 
   111 2798 89							.BYTE $09 + INSTRINIT
   112 2799 80							.BYTE V8 
Source: DUMB Module.asm
  1079 279A				ROW Cs4 $09 v8 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 279A 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 279B 31							.BYTE CS4 
   111 279C 89							.BYTE $09 + INSTRINIT
   112 279D 80							.BYTE V8 
Source: DUMB Module.asm
  1080 279E				ROW PAUSE 
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 279E 80							.BYTE PAUSE	; PAUSE is a Row Pause Command
Source: DUMB Module.asm
  1081 279F				ROW ___ ___ v3
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 279F 10							.BYTE VOLUME 
    83 27A0 30							.BYTE V3 
Source: DUMB Module.asm
  1082 					
  1083 27A1			PTN_1C
  1084 27A1				ROW B_3 $09 v8 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 27A1 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 27A2 2F							.BYTE B_3 
   111 27A3 89							.BYTE $09 + INSTRINIT
   112 27A4 80							.BYTE V8 
Source: DUMB Module.asm
  1085 27A5				ROW PAUSE+3 
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 27A5 83							.BYTE PAUSE+3	; PAUSE+3 is a Row Pause Command
Source: DUMB Module.asm
  1086 27A6				ROW ___ ___ v3
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 27A6 10							.BYTE VOLUME 
    83 27A7 30							.BYTE V3 
Source: DUMB Module.asm
  1087 27A8				ROW ___ ___ v1
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 27A8 10							.BYTE VOLUME 
    83 27A9 10							.BYTE V1 
Source: DUMB Module.asm
  1088 27AA				ROW PAUSE 	
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 27AA 80							.BYTE PAUSE	; PAUSE is a Row Pause Command
Source: DUMB Module.asm
  1089 27AB				ROW Gs3 $09 v8 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 27AB 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 27AC 2C							.BYTE GS3 
   111 27AD 89							.BYTE $09 + INSTRINIT
   112 27AE 80							.BYTE V8 
Source: DUMB Module.asm
  1090 27AF				ROW ___ ___ v3	
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 27AF 10							.BYTE VOLUME 
    83 27B0 30							.BYTE V3 
Source: DUMB Module.asm
  1091 27B1				ROW A_3 $09 v8 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 27B1 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 27B2 2D							.BYTE A_3 
   111 27B3 89							.BYTE $09 + INSTRINIT
   112 27B4 80							.BYTE V8 
Source: DUMB Module.asm
  1092 27B5				ROW Gs3 $09 v8 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 27B5 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 27B6 2C							.BYTE GS3 
   111 27B7 89							.BYTE $09 + INSTRINIT
   112 27B8 80							.BYTE V8 
Source: DUMB Module.asm
  1093 27B9				ROW ___ ___ v3
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 27B9 10							.BYTE VOLUME 
    83 27BA 30							.BYTE V3 
Source: DUMB Module.asm
  1094 27BB				ROW Fs3 $09 v8 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 27BB 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 27BC 2A							.BYTE FS3 
   111 27BD 89							.BYTE $09 + INSTRINIT
   112 27BE 80							.BYTE V8 
Source: DUMB Module.asm
  1095 27BF				ROW E_3 $09 v8 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 27BF 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 27C0 28							.BYTE E_3 
   111 27C1 89							.BYTE $09 + INSTRINIT
   112 27C2 80							.BYTE V8 
Source: DUMB Module.asm
  1096 27C3				ROW ___ ___ v3	
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 27C3 10							.BYTE VOLUME 
    83 27C4 30							.BYTE V3 
Source: DUMB Module.asm
  1097 27C5				ROW Fs3 $09 v8 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 27C5 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 27C6 2A							.BYTE FS3 
   111 27C7 89							.BYTE $09 + INSTRINIT
   112 27C8 80							.BYTE V8 
Source: DUMB Module.asm
  1098 27C9				ROW PAUSE+3 
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 27C9 83							.BYTE PAUSE+3	; PAUSE+3 is a Row Pause Command
Source: DUMB Module.asm
  1099 27CA				ROW ___ ___ v3
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 27CA 10							.BYTE VOLUME 
    83 27CB 30							.BYTE V3 
Source: DUMB Module.asm
  1100 27CC				ROW ___ ___ v1
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 27CC 10							.BYTE VOLUME 
    83 27CD 10							.BYTE V1 
Source: DUMB Module.asm
  1101 27CE				ROW PAUSE 
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 27CE 80							.BYTE PAUSE	; PAUSE is a Row Pause Command
Source: DUMB Module.asm
  1102 27CF				ROW B_3 $09 v8 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 27CF 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 27D0 2F							.BYTE B_3 
   111 27D1 89							.BYTE $09 + INSTRINIT
   112 27D2 80							.BYTE V8 
Source: DUMB Module.asm
  1103 27D3				ROW Cs4 $09 v8 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 27D3 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 27D4 31							.BYTE CS4 
   111 27D5 89							.BYTE $09 + INSTRINIT
   112 27D6 80							.BYTE V8 
Source: DUMB Module.asm
  1104 27D7				ROW D_4 $09 v8 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 27D7 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 27D8 32							.BYTE D_4 
   111 27D9 89							.BYTE $09 + INSTRINIT
   112 27DA 80							.BYTE V8 
Source: DUMB Module.asm
  1105 27DB				ROW B_3 $09 v8 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 27DB 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 27DC 2F							.BYTE B_3 
   111 27DD 89							.BYTE $09 + INSTRINIT
   112 27DE 80							.BYTE V8 
Source: DUMB Module.asm
  1106 27DF				ROW ___ ___ v3
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 27DF 10							.BYTE VOLUME 
    83 27E0 30							.BYTE V3 
Source: DUMB Module.asm
  1107 27E1				ROW Cs4 $09 v8 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 27E1 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 27E2 31							.BYTE CS4 
   111 27E3 89							.BYTE $09 + INSTRINIT
   112 27E4 80							.BYTE V8 
Source: DUMB Module.asm
  1108 27E5				ROW ___ ___ v3
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 27E5 10							.BYTE VOLUME 
    83 27E6 30							.BYTE V3 
Source: DUMB Module.asm
  1109 27E7				ROW A_3 $09 v8 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 27E7 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 27E8 2D							.BYTE A_3 
   111 27E9 89							.BYTE $09 + INSTRINIT
   112 27EA 80							.BYTE V8 
Source: DUMB Module.asm
  1110 					
  1111 27EB			PTN_1D
  1112 27EB				ROW B_3 $09 v8 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 27EB 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 27EC 2F							.BYTE B_3 
   111 27ED 89							.BYTE $09 + INSTRINIT
   112 27EE 80							.BYTE V8 
Source: DUMB Module.asm
  1113 27EF				ROW PAUSE+3 
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 27EF 83							.BYTE PAUSE+3	; PAUSE+3 is a Row Pause Command
Source: DUMB Module.asm
  1114 27F0				ROW ___ ___ v3
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 27F0 10							.BYTE VOLUME 
    83 27F1 30							.BYTE V3 
Source: DUMB Module.asm
  1115 27F2				ROW ___ ___ v1
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 27F2 10							.BYTE VOLUME 
    83 27F3 10							.BYTE V1 
Source: DUMB Module.asm
  1116 27F4				ROW PAUSE 	
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 27F4 80							.BYTE PAUSE	; PAUSE is a Row Pause Command
Source: DUMB Module.asm
  1117 27F5				ROW Gs3 $09 v8 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 27F5 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 27F6 2C							.BYTE GS3 
   111 27F7 89							.BYTE $09 + INSTRINIT
   112 27F8 80							.BYTE V8 
Source: DUMB Module.asm
  1118 27F9				ROW ___ ___ v3	
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 27F9 10							.BYTE VOLUME 
    83 27FA 30							.BYTE V3 
Source: DUMB Module.asm
  1119 27FB				ROW A_3 $09 v8 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 27FB 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 27FC 2D							.BYTE A_3 
   111 27FD 89							.BYTE $09 + INSTRINIT
   112 27FE 80							.BYTE V8 
Source: DUMB Module.asm
  1120 27FF				ROW Gs3 $09 v8 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 27FF 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2800 2C							.BYTE GS3 
   111 2801 89							.BYTE $09 + INSTRINIT
   112 2802 80							.BYTE V8 
Source: DUMB Module.asm
  1121 2803				ROW ___ ___ v3
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 2803 10							.BYTE VOLUME 
    83 2804 30							.BYTE V3 
Source: DUMB Module.asm
  1122 2805				ROW Fs3 $09 v8 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2805 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2806 2A							.BYTE FS3 
   111 2807 89							.BYTE $09 + INSTRINIT
   112 2808 80							.BYTE V8 
Source: DUMB Module.asm
  1123 2809				ROW E_3 $09 v8 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2809 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 280A 28							.BYTE E_3 
   111 280B 89							.BYTE $09 + INSTRINIT
   112 280C 80							.BYTE V8 
Source: DUMB Module.asm
  1124 280D				ROW ___ ___ v3	
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 280D 10							.BYTE VOLUME 
    83 280E 30							.BYTE V3 
Source: DUMB Module.asm
  1125 280F				ROW Fs3 $09 v8 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 280F 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2810 2A							.BYTE FS3 
   111 2811 89							.BYTE $09 + INSTRINIT
   112 2812 80							.BYTE V8 
Source: DUMB Module.asm
  1126 2813				ROW PAUSE+3 
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 2813 83							.BYTE PAUSE+3	; PAUSE+3 is a Row Pause Command
Source: DUMB Module.asm
  1127 2814				ROW ___ ___ v3
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 2814 10							.BYTE VOLUME 
    83 2815 30							.BYTE V3 
Source: DUMB Module.asm
  1128 2816				ROW ___ ___ v1
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 2816 10							.BYTE VOLUME 
    83 2817 10							.BYTE V1 
Source: DUMB Module.asm
  1129 2818				ROW PAUSE 
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 2818 80							.BYTE PAUSE	; PAUSE is a Row Pause Command
Source: DUMB Module.asm
  1130 2819				ROW B_3 $09 v8 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2819 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 281A 2F							.BYTE B_3 
   111 281B 89							.BYTE $09 + INSTRINIT
   112 281C 80							.BYTE V8 
Source: DUMB Module.asm
  1131 281D				ROW Cs4 $09 v8 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 281D 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 281E 31							.BYTE CS4 
   111 281F 89							.BYTE $09 + INSTRINIT
   112 2820 80							.BYTE V8 
Source: DUMB Module.asm
  1132 2821				ROW D_4 $09 v8 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2821 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2822 32							.BYTE D_4 
   111 2823 89							.BYTE $09 + INSTRINIT
   112 2824 80							.BYTE V8 
Source: DUMB Module.asm
  1133 2825				ROW E_4 $09 v8 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2825 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2826 34							.BYTE E_4 
   111 2827 89							.BYTE $09 + INSTRINIT
   112 2828 80							.BYTE V8 
Source: DUMB Module.asm
  1134 2829				ROW ___ ___ v3
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 2829 10							.BYTE VOLUME 
    83 282A 30							.BYTE V3 
Source: DUMB Module.asm
  1135 282B				ROW Cs4 $09 v8 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 282B 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 282C 31							.BYTE CS4 
   111 282D 89							.BYTE $09 + INSTRINIT
   112 282E 80							.BYTE V8 
Source: DUMB Module.asm
  1136 282F				ROW B_3 $09 v8 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 282F 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2830 2F							.BYTE B_3 
   111 2831 89							.BYTE $09 + INSTRINIT
   112 2832 80							.BYTE V8 
Source: DUMB Module.asm
  1137 2833				ROW ___ ___ v3
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 2833 10							.BYTE VOLUME 
    83 2834 30							.BYTE V3 
Source: DUMB Module.asm
  1138
  1139 2835			PTN_1E
  1140 2835				ROW E_3 $09 v8 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2835 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2836 28							.BYTE E_3 
   111 2837 89							.BYTE $09 + INSTRINIT
   112 2838 80							.BYTE V8 
Source: DUMB Module.asm
  1141 2839				ROW D_4 $09 v8
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2839 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 283A 32							.BYTE D_4 
   111 283B 89							.BYTE $09 + INSTRINIT
   112 283C 80							.BYTE V8 
Source: DUMB Module.asm
  1142 283D				ROW Cs4 $09 v8 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 283D 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 283E 31							.BYTE CS4 
   111 283F 89							.BYTE $09 + INSTRINIT
   112 2840 80							.BYTE V8 
Source: DUMB Module.asm
  1143 2841				ROW ___ ___ v3 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 2841 10							.BYTE VOLUME 
    83 2842 30							.BYTE V3 
Source: DUMB Module.asm
  1144 2843				ROW A_3 $09 v8 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2843 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2844 2D							.BYTE A_3 
   111 2845 89							.BYTE $09 + INSTRINIT
   112 2846 80							.BYTE V8 
Source: DUMB Module.asm
  1145 2847				ROW PAUSE
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 2847 80							.BYTE PAUSE	; PAUSE is a Row Pause Command
Source: DUMB Module.asm
  1146 2848				ROW ___ ___ v3
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 2848 10							.BYTE VOLUME 
    83 2849 30							.BYTE V3 
Source: DUMB Module.asm
  1147 284A				ROW ___ ___ v1 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 284A 10							.BYTE VOLUME 
    83 284B 10							.BYTE V1 
Source: DUMB Module.asm
  1148 284C				ROW B_3 $09 v8 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 284C 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 284D 2F							.BYTE B_3 
   111 284E 89							.BYTE $09 + INSTRINIT
   112 284F 80							.BYTE V8 
Source: DUMB Module.asm
  1149 2850				ROW Gs3 $09 v8
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2850 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2851 2C							.BYTE GS3 
   111 2852 89							.BYTE $09 + INSTRINIT
   112 2853 80							.BYTE V8 
Source: DUMB Module.asm
  1150 2854				ROW Fs3 $09 v8
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2854 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2855 2A							.BYTE FS3 
   111 2856 89							.BYTE $09 + INSTRINIT
   112 2857 80							.BYTE V8 
Source: DUMB Module.asm
  1151 2858				ROW ___ ___ v3 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 2858 10							.BYTE VOLUME 
    83 2859 30							.BYTE V3 
Source: DUMB Module.asm
  1152 285A				ROW E_3 $09 v8 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 285A 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 285B 28							.BYTE E_3 
   111 285C 89							.BYTE $09 + INSTRINIT
   112 285D 80							.BYTE V8 
Source: DUMB Module.asm
  1153 285E				ROW Fs3 $09 v8
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 285E 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 285F 2A							.BYTE FS3 
   111 2860 89							.BYTE $09 + INSTRINIT
   112 2861 80							.BYTE V8 
Source: DUMB Module.asm
  1154 2862				ROW PAUSE+1
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 2862 81							.BYTE PAUSE+1	; PAUSE+1 is a Row Pause Command
Source: DUMB Module.asm
  1155 2863				ROW ___ ___ v3
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 2863 10							.BYTE VOLUME 
    83 2864 30							.BYTE V3 
Source: DUMB Module.asm
  1156 2865				ROW ___ ___ v1
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 2865 10							.BYTE VOLUME 
    83 2866 10							.BYTE V1 
Source: DUMB Module.asm
  1157 2867				ROW E_3 $09 v8 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2867 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2868 28							.BYTE E_3 
   111 2869 89							.BYTE $09 + INSTRINIT
   112 286A 80							.BYTE V8 
Source: DUMB Module.asm
  1158 286B				ROW ___ ___ v3
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 286B 10							.BYTE VOLUME 
    83 286C 30							.BYTE V3 
Source: DUMB Module.asm
  1159 286D				ROW Gs3 $09 v8 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 286D 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 286E 2C							.BYTE GS3 
   111 286F 89							.BYTE $09 + INSTRINIT
   112 2870 80							.BYTE V8 
Source: DUMB Module.asm
  1160 2871				ROW A_3 $09 v8 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2871 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2872 2D							.BYTE A_3 
   111 2873 89							.BYTE $09 + INSTRINIT
   112 2874 80							.BYTE V8 
Source: DUMB Module.asm
  1161 2875				ROW PAUSE
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 2875 80							.BYTE PAUSE	; PAUSE is a Row Pause Command
Source: DUMB Module.asm
  1162 2876				ROW ___ ___ v3 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 2876 10							.BYTE VOLUME 
    83 2877 30							.BYTE V3 
Source: DUMB Module.asm
  1163 2878				ROW Gs3 $09 v8 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2878 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2879 2C							.BYTE GS3 
   111 287A 89							.BYTE $09 + INSTRINIT
   112 287B 80							.BYTE V8 
Source: DUMB Module.asm
  1164 287C				ROW ___ ___ v3 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 287C 10							.BYTE VOLUME 
    83 287D 30							.BYTE V3 
Source: DUMB Module.asm
  1165 287E				ROW Fs3 $09 v8
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 287E 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 287F 2A							.BYTE FS3 
   111 2880 89							.BYTE $09 + INSTRINIT
   112 2881 80							.BYTE V8 
Source: DUMB Module.asm
  1166 2882				ROW PAUSE+2
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 2882 82							.BYTE PAUSE+2	; PAUSE+2 is a Row Pause Command
Source: DUMB Module.asm
  1167 2883				ROW ___ ___ v3
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 2883 10							.BYTE VOLUME 
    83 2884 30							.BYTE V3 
Source: DUMB Module.asm
  1168 2885				ROW ___ ___ v1
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 2885 10							.BYTE VOLUME 
    83 2886 10							.BYTE V1 
Source: DUMB Module.asm
  1169
  1170 2887			PTN_1F
  1171 2887				ROW E_3 $09 v8 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2887 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2888 28							.BYTE E_3 
   111 2889 89							.BYTE $09 + INSTRINIT
   112 288A 80							.BYTE V8 
Source: DUMB Module.asm
  1172 288B				ROW ___ ___ v3
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 288B 10							.BYTE VOLUME 
    83 288C 30							.BYTE V3 
Source: DUMB Module.asm
  1173 288D				ROW D_4 $09 v8 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 288D 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 288E 32							.BYTE D_4 
   111 288F 89							.BYTE $09 + INSTRINIT
   112 2890 80							.BYTE V8 
Source: DUMB Module.asm
  1174 2891				ROW ___ ___ v3
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 2891 10							.BYTE VOLUME 
    83 2892 30							.BYTE V3 
Source: DUMB Module.asm
  1175 2893				ROW E_4 $09 v8 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2893 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2894 34							.BYTE E_4 
   111 2895 89							.BYTE $09 + INSTRINIT
   112 2896 80							.BYTE V8 
Source: DUMB Module.asm
  1176 2897				ROW D_4 $09 v8 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2897 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2898 32							.BYTE D_4 
   111 2899 89							.BYTE $09 + INSTRINIT
   112 289A 80							.BYTE V8 
Source: DUMB Module.asm
  1177 289B				ROW PAUSE 
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 289B 80							.BYTE PAUSE	; PAUSE is a Row Pause Command
Source: DUMB Module.asm
  1178 289C				ROW ___ ___ v3
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 289C 10							.BYTE VOLUME 
    83 289D 30							.BYTE V3 
Source: DUMB Module.asm
  1179 289E				ROW Cs4 $09 v8 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 289E 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 289F 31							.BYTE CS4 
   111 28A0 89							.BYTE $09 + INSTRINIT
   112 28A1 80							.BYTE V8 
Source: DUMB Module.asm
  1180 28A2				ROW PAUSE 
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 28A2 80							.BYTE PAUSE	; PAUSE is a Row Pause Command
Source: DUMB Module.asm
  1181 28A3				ROW ___ ___ v3	
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 28A3 10							.BYTE VOLUME 
    83 28A4 30							.BYTE V3 
Source: DUMB Module.asm
  1182 28A5				ROW B_3 $09 v8 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 28A5 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 28A6 2F							.BYTE B_3 
   111 28A7 89							.BYTE $09 + INSTRINIT
   112 28A8 80							.BYTE V8 
Source: DUMB Module.asm
  1183 28A9				ROW ___ ___ v3
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 28A9 10							.BYTE VOLUME 
    83 28AA 30							.BYTE V3 
Source: DUMB Module.asm
  1184 28AB				ROW A_3 $09 v8 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 28AB 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 28AC 2D							.BYTE A_3 
   111 28AD 89							.BYTE $09 + INSTRINIT
   112 28AE 80							.BYTE V8 
Source: DUMB Module.asm
  1185 28AF				ROW ___ ___ v3	
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 28AF 10							.BYTE VOLUME 
    83 28B0 30							.BYTE V3 
Source: DUMB Module.asm
  1186 28B1				ROW Cs4 $09 v8 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 28B1 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 28B2 31							.BYTE CS4 
   111 28B3 89							.BYTE $09 + INSTRINIT
   112 28B4 80							.BYTE V8 
Source: DUMB Module.asm
  1187 28B5				ROW B_3 $09 v8 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 28B5 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 28B6 2F							.BYTE B_3 
   111 28B7 89							.BYTE $09 + INSTRINIT
   112 28B8 80							.BYTE V8 
Source: DUMB Module.asm
  1188 28B9				ROW PAUSE+6 
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 28B9 86							.BYTE PAUSE+6	; PAUSE+6 is a Row Pause Command
Source: DUMB Module.asm
  1189 28BA				ROW ___ ___ v3
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 28BA 10							.BYTE VOLUME 
    83 28BB 30							.BYTE V3 
Source: DUMB Module.asm
  1190 28BC				ROW PAUSE+4
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 28BC 84							.BYTE PAUSE+4	; PAUSE+4 is a Row Pause Command
Source: DUMB Module.asm
  1191 28BD				ROW ___ ___ v1
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 28BD 10							.BYTE VOLUME 
    83 28BE 10							.BYTE V1 
Source: DUMB Module.asm
  1192 28BF				END_PATTERN 
Macro: END_PATTERN [Source: DUMB Module.inc]
     2 28BF 00				.BYTE $00			; Pattern End 
Source: DUMB Module.asm
  1193 					
  1194 28C0			PTN_20
  1195 28C0				ROW C_3 $08 vF CMD4 $00
Macro: ROW [Source: DUMB Module.inc]
    33 = 0005						argnum = 5	; up to 5 arguments may be valid 
   140 28C0 78							.BYTE NOTE + INSTRUMENT + VOLUME + COMMAND_1 
   141 28C1 24							.BYTE C_3 
   142 28C2 88							.BYTE $08 + INSTRINIT
   143 28C3 F0							.BYTE VF
   144 28C4 04							.BYTE CMD4 
   145 28C5 00							.BYTE $00 
Source: DUMB Module.asm
  1196 28C6				ROW PAUSE 
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 28C6 80							.BYTE PAUSE	; PAUSE is a Row Pause Command
Source: DUMB Module.asm
  1197 28C7				ROW C_3 $08 v6 CMD4 $02
Macro: ROW [Source: DUMB Module.inc]
    33 = 0005						argnum = 5	; up to 5 arguments may be valid 
   140 28C7 78							.BYTE NOTE + INSTRUMENT + VOLUME + COMMAND_1 
   141 28C8 24							.BYTE C_3 
   142 28C9 88							.BYTE $08 + INSTRINIT
   143 28CA 60							.BYTE V6
   144 28CB 04							.BYTE CMD4 
   145 28CC 02							.BYTE $02 
Source: DUMB Module.asm
  1198 28CD				ROW PAUSE 
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 28CD 80							.BYTE PAUSE	; PAUSE is a Row Pause Command
Source: DUMB Module.asm
  1199 28CE				ROW F_3 $08 vF CMD4 $00
Macro: ROW [Source: DUMB Module.inc]
    33 = 0005						argnum = 5	; up to 5 arguments may be valid 
   140 28CE 78							.BYTE NOTE + INSTRUMENT + VOLUME + COMMAND_1 
   141 28CF 29							.BYTE F_3 
   142 28D0 88							.BYTE $08 + INSTRINIT
   143 28D1 F0							.BYTE VF
   144 28D2 04							.BYTE CMD4 
   145 28D3 00							.BYTE $00 
Source: DUMB Module.asm
  1200 28D4				ROW PAUSE 
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 28D4 80							.BYTE PAUSE	; PAUSE is a Row Pause Command
Source: DUMB Module.asm
  1201 28D5				ROW F_3 $08 v6 CMD4 $02
Macro: ROW [Source: DUMB Module.inc]
    33 = 0005						argnum = 5	; up to 5 arguments may be valid 
   140 28D5 78							.BYTE NOTE + INSTRUMENT + VOLUME + COMMAND_1 
   141 28D6 29							.BYTE F_3 
   142 28D7 88							.BYTE $08 + INSTRINIT
   143 28D8 60							.BYTE V6
   144 28D9 04							.BYTE CMD4 
   145 28DA 02							.BYTE $02 
Source: DUMB Module.asm
  1202 28DB				ROW PAUSE 
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 28DB 80							.BYTE PAUSE	; PAUSE is a Row Pause Command
Source: DUMB Module.asm
  1203 28DC				ROW G_3 $08 vF CMD4 $00
Macro: ROW [Source: DUMB Module.inc]
    33 = 0005						argnum = 5	; up to 5 arguments may be valid 
   140 28DC 78							.BYTE NOTE + INSTRUMENT + VOLUME + COMMAND_1 
   141 28DD 2B							.BYTE G_3 
   142 28DE 88							.BYTE $08 + INSTRINIT
   143 28DF F0							.BYTE VF
   144 28E0 04							.BYTE CMD4 
   145 28E1 00							.BYTE $00 
Source: DUMB Module.asm
  1204 28E2				ROW PAUSE 
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 28E2 80							.BYTE PAUSE	; PAUSE is a Row Pause Command
Source: DUMB Module.asm
  1205 28E3				ROW G_3 $08 v6 CMD4 $02
Macro: ROW [Source: DUMB Module.inc]
    33 = 0005						argnum = 5	; up to 5 arguments may be valid 
   140 28E3 78							.BYTE NOTE + INSTRUMENT + VOLUME + COMMAND_1 
   141 28E4 2B							.BYTE G_3 
   142 28E5 88							.BYTE $08 + INSTRINIT
   143 28E6 60							.BYTE V6
   144 28E7 04							.BYTE CMD4 
   145 28E8 02							.BYTE $02 
Source: DUMB Module.asm
  1206 28E9				ROW PAUSE 
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 28E9 80							.BYTE PAUSE	; PAUSE is a Row Pause Command
Source: DUMB Module.asm
  1207 28EA				ROW C_3 $08 vF CMD4 $00
Macro: ROW [Source: DUMB Module.inc]
    33 = 0005						argnum = 5	; up to 5 arguments may be valid 
   140 28EA 78							.BYTE NOTE + INSTRUMENT + VOLUME + COMMAND_1 
   141 28EB 24							.BYTE C_3 
   142 28EC 88							.BYTE $08 + INSTRINIT
   143 28ED F0							.BYTE VF
   144 28EE 04							.BYTE CMD4 
   145 28EF 00							.BYTE $00 
Source: DUMB Module.asm
  1208 28F0				ROW D_3 $08 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 28F0 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 28F1 26							.BYTE D_3 
   111 28F2 88							.BYTE $08 + INSTRINIT
   112 28F3 F0							.BYTE VF 
Source: DUMB Module.asm
  1209 28F4				ROW C_3 $08 v6 CMD4 $02
Macro: ROW [Source: DUMB Module.inc]
    33 = 0005						argnum = 5	; up to 5 arguments may be valid 
   140 28F4 78							.BYTE NOTE + INSTRUMENT + VOLUME + COMMAND_1 
   141 28F5 24							.BYTE C_3 
   142 28F6 88							.BYTE $08 + INSTRINIT
   143 28F7 60							.BYTE V6
   144 28F8 04							.BYTE CMD4 
   145 28F9 02							.BYTE $02 
Source: DUMB Module.asm
  1210 28FA				ROW D_3 $08 v6
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 28FA 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 28FB 26							.BYTE D_3 
   111 28FC 88							.BYTE $08 + INSTRINIT
   112 28FD 60							.BYTE V6 
Source: DUMB Module.asm
  1211 28FE				ROW C_3 $08 v2 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 28FE 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 28FF 24							.BYTE C_3 
   111 2900 88							.BYTE $08 + INSTRINIT
   112 2901 20							.BYTE V2 
Source: DUMB Module.asm
  1212 2902				ROW D_3 $08 v2	
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2902 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2903 26							.BYTE D_3 
   111 2904 88							.BYTE $08 + INSTRINIT
   112 2905 20							.BYTE V2 
Source: DUMB Module.asm
  1213 2906				ROW C_3 $08 vF CMD4 $00
Macro: ROW [Source: DUMB Module.inc]
    33 = 0005						argnum = 5	; up to 5 arguments may be valid 
   140 2906 78							.BYTE NOTE + INSTRUMENT + VOLUME + COMMAND_1 
   141 2907 24							.BYTE C_3 
   142 2908 88							.BYTE $08 + INSTRINIT
   143 2909 F0							.BYTE VF
   144 290A 04							.BYTE CMD4 
   145 290B 00							.BYTE $00 
Source: DUMB Module.asm
  1214 290C				ROW PAUSE 
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 290C 80							.BYTE PAUSE	; PAUSE is a Row Pause Command
Source: DUMB Module.asm
  1215 290D				ROW C_3 $08 v6 CMD4 $02
Macro: ROW [Source: DUMB Module.inc]
    33 = 0005						argnum = 5	; up to 5 arguments may be valid 
   140 290D 78							.BYTE NOTE + INSTRUMENT + VOLUME + COMMAND_1 
   141 290E 24							.BYTE C_3 
   142 290F 88							.BYTE $08 + INSTRINIT
   143 2910 60							.BYTE V6
   144 2911 04							.BYTE CMD4 
   145 2912 02							.BYTE $02 
Source: DUMB Module.asm
  1216 2913				ROW PAUSE 
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 2913 80							.BYTE PAUSE	; PAUSE is a Row Pause Command
Source: DUMB Module.asm
  1217 2914				ROW F_3 $08 vF CMD4 $00
Macro: ROW [Source: DUMB Module.inc]
    33 = 0005						argnum = 5	; up to 5 arguments may be valid 
   140 2914 78							.BYTE NOTE + INSTRUMENT + VOLUME + COMMAND_1 
   141 2915 29							.BYTE F_3 
   142 2916 88							.BYTE $08 + INSTRINIT
   143 2917 F0							.BYTE VF
   144 2918 04							.BYTE CMD4 
   145 2919 00							.BYTE $00 
Source: DUMB Module.asm
  1218 291A				ROW PAUSE 
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 291A 80							.BYTE PAUSE	; PAUSE is a Row Pause Command
Source: DUMB Module.asm
  1219 291B				ROW F_3 $08 v6 CMD4 $02
Macro: ROW [Source: DUMB Module.inc]
    33 = 0005						argnum = 5	; up to 5 arguments may be valid 
   140 291B 78							.BYTE NOTE + INSTRUMENT + VOLUME + COMMAND_1 
   141 291C 29							.BYTE F_3 
   142 291D 88							.BYTE $08 + INSTRINIT
   143 291E 60							.BYTE V6
   144 291F 04							.BYTE CMD4 
   145 2920 02							.BYTE $02 
Source: DUMB Module.asm
  1220 2921				ROW PAUSE 
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 2921 80							.BYTE PAUSE	; PAUSE is a Row Pause Command
Source: DUMB Module.asm
  1221 2922				ROW A_3 $08 vF CMD4 $00
Macro: ROW [Source: DUMB Module.inc]
    33 = 0005						argnum = 5	; up to 5 arguments may be valid 
   140 2922 78							.BYTE NOTE + INSTRUMENT + VOLUME + COMMAND_1 
   141 2923 2D							.BYTE A_3 
   142 2924 88							.BYTE $08 + INSTRINIT
   143 2925 F0							.BYTE VF
   144 2926 04							.BYTE CMD4 
   145 2927 00							.BYTE $00 
Source: DUMB Module.asm
  1222 2928				ROW G_3 $08 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2928 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2929 2B							.BYTE G_3 
   111 292A 88							.BYTE $08 + INSTRINIT
   112 292B F0							.BYTE VF 
Source: DUMB Module.asm
  1223 292C				ROW A_3 $08 v6 CMD4 $02
Macro: ROW [Source: DUMB Module.inc]
    33 = 0005						argnum = 5	; up to 5 arguments may be valid 
   140 292C 78							.BYTE NOTE + INSTRUMENT + VOLUME + COMMAND_1 
   141 292D 2D							.BYTE A_3 
   142 292E 88							.BYTE $08 + INSTRINIT
   143 292F 60							.BYTE V6
   144 2930 04							.BYTE CMD4 
   145 2931 02							.BYTE $02 
Source: DUMB Module.asm
  1224 2932				ROW G_3 $08 v6
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2932 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2933 2B							.BYTE G_3 
   111 2934 88							.BYTE $08 + INSTRINIT
   112 2935 60							.BYTE V6 
Source: DUMB Module.asm
  1225 2936				ROW A_3 $08 v2 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2936 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2937 2D							.BYTE A_3 
   111 2938 88							.BYTE $08 + INSTRINIT
   112 2939 20							.BYTE V2 
Source: DUMB Module.asm
  1226 293A				ROW G_3 $08 v2	
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 293A 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 293B 2B							.BYTE G_3 
   111 293C 88							.BYTE $08 + INSTRINIT
   112 293D 20							.BYTE V2 
Source: DUMB Module.asm
  1227
  1228 293E			PTN_21
  1229 293E				ROW C_3 $08 vF CMD4 $00
Macro: ROW [Source: DUMB Module.inc]
    33 = 0005						argnum = 5	; up to 5 arguments may be valid 
   140 293E 78							.BYTE NOTE + INSTRUMENT + VOLUME + COMMAND_1 
   141 293F 24							.BYTE C_3 
   142 2940 88							.BYTE $08 + INSTRINIT
   143 2941 F0							.BYTE VF
   144 2942 04							.BYTE CMD4 
   145 2943 00							.BYTE $00 
Source: DUMB Module.asm
  1230 2944				ROW PAUSE 
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 2944 80							.BYTE PAUSE	; PAUSE is a Row Pause Command
Source: DUMB Module.asm
  1231 2945				ROW C_3 $08 v6 CMD4 $02
Macro: ROW [Source: DUMB Module.inc]
    33 = 0005						argnum = 5	; up to 5 arguments may be valid 
   140 2945 78							.BYTE NOTE + INSTRUMENT + VOLUME + COMMAND_1 
   141 2946 24							.BYTE C_3 
   142 2947 88							.BYTE $08 + INSTRINIT
   143 2948 60							.BYTE V6
   144 2949 04							.BYTE CMD4 
   145 294A 02							.BYTE $02 
Source: DUMB Module.asm
  1232 294B				ROW PAUSE 
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 294B 80							.BYTE PAUSE	; PAUSE is a Row Pause Command
Source: DUMB Module.asm
  1233 294C				ROW F_3 $08 vF CMD4 $00
Macro: ROW [Source: DUMB Module.inc]
    33 = 0005						argnum = 5	; up to 5 arguments may be valid 
   140 294C 78							.BYTE NOTE + INSTRUMENT + VOLUME + COMMAND_1 
   141 294D 29							.BYTE F_3 
   142 294E 88							.BYTE $08 + INSTRINIT
   143 294F F0							.BYTE VF
   144 2950 04							.BYTE CMD4 
   145 2951 00							.BYTE $00 
Source: DUMB Module.asm
  1234 2952				ROW PAUSE 
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 2952 80							.BYTE PAUSE	; PAUSE is a Row Pause Command
Source: DUMB Module.asm
  1235 2953				ROW F_3 $08 v6 CMD4 $02
Macro: ROW [Source: DUMB Module.inc]
    33 = 0005						argnum = 5	; up to 5 arguments may be valid 
   140 2953 78							.BYTE NOTE + INSTRUMENT + VOLUME + COMMAND_1 
   141 2954 29							.BYTE F_3 
   142 2955 88							.BYTE $08 + INSTRINIT
   143 2956 60							.BYTE V6
   144 2957 04							.BYTE CMD4 
   145 2958 02							.BYTE $02 
Source: DUMB Module.asm
  1236 2959				ROW PAUSE 
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 2959 80							.BYTE PAUSE	; PAUSE is a Row Pause Command
Source: DUMB Module.asm
  1237 295A				ROW G_3 $08 vF CMD4 $00
Macro: ROW [Source: DUMB Module.inc]
    33 = 0005						argnum = 5	; up to 5 arguments may be valid 
   140 295A 78							.BYTE NOTE + INSTRUMENT + VOLUME + COMMAND_1 
   141 295B 2B							.BYTE G_3 
   142 295C 88							.BYTE $08 + INSTRINIT
   143 295D F0							.BYTE VF
   144 295E 04							.BYTE CMD4 
   145 295F 00							.BYTE $00 
Source: DUMB Module.asm
  1238 2960				ROW PAUSE 
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 2960 80							.BYTE PAUSE	; PAUSE is a Row Pause Command
Source: DUMB Module.asm
  1239 2961				ROW G_3 $08 v6 CMD4 $02
Macro: ROW [Source: DUMB Module.inc]
    33 = 0005						argnum = 5	; up to 5 arguments may be valid 
   140 2961 78							.BYTE NOTE + INSTRUMENT + VOLUME + COMMAND_1 
   141 2962 2B							.BYTE G_3 
   142 2963 88							.BYTE $08 + INSTRINIT
   143 2964 60							.BYTE V6
   144 2965 04							.BYTE CMD4 
   145 2966 02							.BYTE $02 
Source: DUMB Module.asm
  1240 2967				ROW PAUSE 
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 2967 80							.BYTE PAUSE	; PAUSE is a Row Pause Command
Source: DUMB Module.asm
  1241 2968				ROW C_3 $08 vF CMD4 $00
Macro: ROW [Source: DUMB Module.inc]
    33 = 0005						argnum = 5	; up to 5 arguments may be valid 
   140 2968 78							.BYTE NOTE + INSTRUMENT + VOLUME + COMMAND_1 
   141 2969 24							.BYTE C_3 
   142 296A 88							.BYTE $08 + INSTRINIT
   143 296B F0							.BYTE VF
   144 296C 04							.BYTE CMD4 
   145 296D 00							.BYTE $00 
Source: DUMB Module.asm
  1242 296E				ROW D_3 $08 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 296E 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 296F 26							.BYTE D_3 
   111 2970 88							.BYTE $08 + INSTRINIT
   112 2971 F0							.BYTE VF 
Source: DUMB Module.asm
  1243 2972				ROW C_3 $08 v6 CMD4 $02
Macro: ROW [Source: DUMB Module.inc]
    33 = 0005						argnum = 5	; up to 5 arguments may be valid 
   140 2972 78							.BYTE NOTE + INSTRUMENT + VOLUME + COMMAND_1 
   141 2973 24							.BYTE C_3 
   142 2974 88							.BYTE $08 + INSTRINIT
   143 2975 60							.BYTE V6
   144 2976 04							.BYTE CMD4 
   145 2977 02							.BYTE $02 
Source: DUMB Module.asm
  1244 2978				ROW D_3 $08 v6
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2978 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2979 26							.BYTE D_3 
   111 297A 88							.BYTE $08 + INSTRINIT
   112 297B 60							.BYTE V6 
Source: DUMB Module.asm
  1245 297C				ROW C_3 $08 v2 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 297C 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 297D 24							.BYTE C_3 
   111 297E 88							.BYTE $08 + INSTRINIT
   112 297F 20							.BYTE V2 
Source: DUMB Module.asm
  1246 2980				ROW D_3 $08 v2	
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2980 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2981 26							.BYTE D_3 
   111 2982 88							.BYTE $08 + INSTRINIT
   112 2983 20							.BYTE V2 
Source: DUMB Module.asm
  1247 2984				ROW F_3 $08 vF CMD4 $00
Macro: ROW [Source: DUMB Module.inc]
    33 = 0005						argnum = 5	; up to 5 arguments may be valid 
   140 2984 78							.BYTE NOTE + INSTRUMENT + VOLUME + COMMAND_1 
   141 2985 29							.BYTE F_3 
   142 2986 88							.BYTE $08 + INSTRINIT
   143 2987 F0							.BYTE VF
   144 2988 04							.BYTE CMD4 
   145 2989 00							.BYTE $00 
Source: DUMB Module.asm
  1248 298A				ROW PAUSE 
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 298A 80							.BYTE PAUSE	; PAUSE is a Row Pause Command
Source: DUMB Module.asm
  1249 298B				ROW F_3 $08 v6 CMD4 $02
Macro: ROW [Source: DUMB Module.inc]
    33 = 0005						argnum = 5	; up to 5 arguments may be valid 
   140 298B 78							.BYTE NOTE + INSTRUMENT + VOLUME + COMMAND_1 
   141 298C 29							.BYTE F_3 
   142 298D 88							.BYTE $08 + INSTRINIT
   143 298E 60							.BYTE V6
   144 298F 04							.BYTE CMD4 
   145 2990 02							.BYTE $02 
Source: DUMB Module.asm
  1250 2991				ROW PAUSE 
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 2991 80							.BYTE PAUSE	; PAUSE is a Row Pause Command
Source: DUMB Module.asm
  1251 2992				ROW As3 $08 vF CMD4 $00
Macro: ROW [Source: DUMB Module.inc]
    33 = 0005						argnum = 5	; up to 5 arguments may be valid 
   140 2992 78							.BYTE NOTE + INSTRUMENT + VOLUME + COMMAND_1 
   141 2993 2E							.BYTE AS3 
   142 2994 88							.BYTE $08 + INSTRINIT
   143 2995 F0							.BYTE VF
   144 2996 04							.BYTE CMD4 
   145 2997 00							.BYTE $00 
Source: DUMB Module.asm
  1252 2998				ROW PAUSE 
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 2998 80							.BYTE PAUSE	; PAUSE is a Row Pause Command
Source: DUMB Module.asm
  1253 2999				ROW As3 $08 v6 CMD4 $02
Macro: ROW [Source: DUMB Module.inc]
    33 = 0005						argnum = 5	; up to 5 arguments may be valid 
   140 2999 78							.BYTE NOTE + INSTRUMENT + VOLUME + COMMAND_1 
   141 299A 2E							.BYTE AS3 
   142 299B 88							.BYTE $08 + INSTRINIT
   143 299C 60							.BYTE V6
   144 299D 04							.BYTE CMD4 
   145 299E 02							.BYTE $02 
Source: DUMB Module.asm
  1254 299F				ROW PAUSE 
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 299F 80							.BYTE PAUSE	; PAUSE is a Row Pause Command
Source: DUMB Module.asm
  1255 29A0				ROW As3 $08 v2 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 29A0 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 29A1 2E							.BYTE AS3 
   111 29A2 88							.BYTE $08 + INSTRINIT
   112 29A3 20							.BYTE V2 
Source: DUMB Module.asm
  1256 29A4				ROW PAUSE
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 29A4 80							.BYTE PAUSE	; PAUSE is a Row Pause Command
Source: DUMB Module.asm
  1257 29A5				ROW As3 $08 vF CMD4 $00
Macro: ROW [Source: DUMB Module.inc]
    33 = 0005						argnum = 5	; up to 5 arguments may be valid 
   140 29A5 78							.BYTE NOTE + INSTRUMENT + VOLUME + COMMAND_1 
   141 29A6 2E							.BYTE AS3 
   142 29A7 88							.BYTE $08 + INSTRINIT
   143 29A8 F0							.BYTE VF
   144 29A9 04							.BYTE CMD4 
   145 29AA 00							.BYTE $00 
Source: DUMB Module.asm
  1258 29AB				ROW A_3 $08 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 29AB 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 29AC 2D							.BYTE A_3 
   111 29AD 88							.BYTE $08 + INSTRINIT
   112 29AE F0							.BYTE VF 
Source: DUMB Module.asm
  1259 29AF				ROW As3 $08 v6 CMD4 $02
Macro: ROW [Source: DUMB Module.inc]
    33 = 0005						argnum = 5	; up to 5 arguments may be valid 
   140 29AF 78							.BYTE NOTE + INSTRUMENT + VOLUME + COMMAND_1 
   141 29B0 2E							.BYTE AS3 
   142 29B1 88							.BYTE $08 + INSTRINIT
   143 29B2 60							.BYTE V6
   144 29B3 04							.BYTE CMD4 
   145 29B4 02							.BYTE $02 
Source: DUMB Module.asm
  1260 29B5				ROW A_3 $08 v6
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 29B5 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 29B6 2D							.BYTE A_3 
   111 29B7 88							.BYTE $08 + INSTRINIT
   112 29B8 60							.BYTE V6 
Source: DUMB Module.asm
  1261
  1262 29B9			PTN_22 
  1263 29B9				ROW G_3 $08 vF CMD4 $00
Macro: ROW [Source: DUMB Module.inc]
    33 = 0005						argnum = 5	; up to 5 arguments may be valid 
   140 29B9 78							.BYTE NOTE + INSTRUMENT + VOLUME + COMMAND_1 
   141 29BA 2B							.BYTE G_3 
   142 29BB 88							.BYTE $08 + INSTRINIT
   143 29BC F0							.BYTE VF
   144 29BD 04							.BYTE CMD4 
   145 29BE 00							.BYTE $00 
Source: DUMB Module.asm
  1264 29BF				ROW PAUSE 
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 29BF 80							.BYTE PAUSE	; PAUSE is a Row Pause Command
Source: DUMB Module.asm
  1265 29C0				ROW G_3 $08 v6 CMD4 $02
Macro: ROW [Source: DUMB Module.inc]
    33 = 0005						argnum = 5	; up to 5 arguments may be valid 
   140 29C0 78							.BYTE NOTE + INSTRUMENT + VOLUME + COMMAND_1 
   141 29C1 2B							.BYTE G_3 
   142 29C2 88							.BYTE $08 + INSTRINIT
   143 29C3 60							.BYTE V6
   144 29C4 04							.BYTE CMD4 
   145 29C5 02							.BYTE $02 
Source: DUMB Module.asm
  1266 29C6				ROW PAUSE 
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 29C6 80							.BYTE PAUSE	; PAUSE is a Row Pause Command
Source: DUMB Module.asm
  1267 29C7				ROW G_3 $08 v4 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 29C7 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 29C8 2B							.BYTE G_3 
   111 29C9 88							.BYTE $08 + INSTRINIT
   112 29CA 40							.BYTE V4 
Source: DUMB Module.asm
  1268 29CB				ROW PAUSE 
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 29CB 80							.BYTE PAUSE	; PAUSE is a Row Pause Command
Source: DUMB Module.asm
  1269 29CC				ROW G_3 $08 v2 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 29CC 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 29CD 2B							.BYTE G_3 
   111 29CE 88							.BYTE $08 + INSTRINIT
   112 29CF 20							.BYTE V2 
Source: DUMB Module.asm
  1270 29D0				ROW PAUSE 
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 29D0 80							.BYTE PAUSE	; PAUSE is a Row Pause Command
Source: DUMB Module.asm
  1271 29D1				ROW E_3 $08 vF CMD4 $00
Macro: ROW [Source: DUMB Module.inc]
    33 = 0005						argnum = 5	; up to 5 arguments may be valid 
   140 29D1 78							.BYTE NOTE + INSTRUMENT + VOLUME + COMMAND_1 
   141 29D2 28							.BYTE E_3 
   142 29D3 88							.BYTE $08 + INSTRINIT
   143 29D4 F0							.BYTE VF
   144 29D5 04							.BYTE CMD4 
   145 29D6 00							.BYTE $00 
Source: DUMB Module.asm
  1272 29D7				ROW PAUSE 
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 29D7 80							.BYTE PAUSE	; PAUSE is a Row Pause Command
Source: DUMB Module.asm
  1273 29D8				ROW F_3 $08 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 29D8 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 29D9 29							.BYTE F_3 
   111 29DA 88							.BYTE $08 + INSTRINIT
   112 29DB F0							.BYTE VF 
Source: DUMB Module.asm
  1274 29DC				ROW PAUSE 
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 29DC 80							.BYTE PAUSE	; PAUSE is a Row Pause Command
Source: DUMB Module.asm
  1275 29DD				ROW F_3 $08 v6 CMD4 $02
Macro: ROW [Source: DUMB Module.inc]
    33 = 0005						argnum = 5	; up to 5 arguments may be valid 
   140 29DD 78							.BYTE NOTE + INSTRUMENT + VOLUME + COMMAND_1 
   141 29DE 29							.BYTE F_3 
   142 29DF 88							.BYTE $08 + INSTRINIT
   143 29E0 60							.BYTE V6
   144 29E1 04							.BYTE CMD4 
   145 29E2 02							.BYTE $02 
Source: DUMB Module.asm
  1276 29E3				ROW D_3 $08 vF CMD4 $00
Macro: ROW [Source: DUMB Module.inc]
    33 = 0005						argnum = 5	; up to 5 arguments may be valid 
   140 29E3 78							.BYTE NOTE + INSTRUMENT + VOLUME + COMMAND_1 
   141 29E4 26							.BYTE D_3 
   142 29E5 88							.BYTE $08 + INSTRINIT
   143 29E6 F0							.BYTE VF
   144 29E7 04							.BYTE CMD4 
   145 29E8 00							.BYTE $00 
Source: DUMB Module.asm
  1277 29E9				ROW C_3 $08 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 29E9 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 29EA 24							.BYTE C_3 
   111 29EB 88							.BYTE $08 + INSTRINIT
   112 29EC F0							.BYTE VF 
Source: DUMB Module.asm
  1278 29ED				ROW D_3 $08 v6 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 29ED 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 29EE 26							.BYTE D_3 
   111 29EF 88							.BYTE $08 + INSTRINIT
   112 29F0 60							.BYTE V6 
Source: DUMB Module.asm
  1279 29F1				ROW D_3 $08 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 29F1 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 29F2 26							.BYTE D_3 
   111 29F3 88							.BYTE $08 + INSTRINIT
   112 29F4 F0							.BYTE VF 
Source: DUMB Module.asm
  1280 29F5				ROW D_3 $08 v2 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 29F5 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 29F6 26							.BYTE D_3 
   111 29F7 88							.BYTE $08 + INSTRINIT
   112 29F8 20							.BYTE V2 
Source: DUMB Module.asm
  1281 29F9				ROW D_3 $08 v6 CMD4 $02 
Macro: ROW [Source: DUMB Module.inc]
    33 = 0005						argnum = 5	; up to 5 arguments may be valid 
   140 29F9 78							.BYTE NOTE + INSTRUMENT + VOLUME + COMMAND_1 
   141 29FA 26							.BYTE D_3 
   142 29FB 88							.BYTE $08 + INSTRINIT
   143 29FC 60							.BYTE V6
   144 29FD 04							.BYTE CMD4 
   145 29FE 02							.BYTE $02 
Source: DUMB Module.asm
  1282 29FF				ROW PAUSE 
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 29FF 80							.BYTE PAUSE	; PAUSE is a Row Pause Command
Source: DUMB Module.asm
  1283 2A00				ROW D_3 $08 v4 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2A00 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2A01 26							.BYTE D_3 
   111 2A02 88							.BYTE $08 + INSTRINIT
   112 2A03 40							.BYTE V4 
Source: DUMB Module.asm
  1284 2A04				ROW PAUSE 
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 2A04 80							.BYTE PAUSE	; PAUSE is a Row Pause Command
Source: DUMB Module.asm
  1285 2A05				ROW D_3 $08 v2 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2A05 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2A06 26							.BYTE D_3 
   111 2A07 88							.BYTE $08 + INSTRINIT
   112 2A08 20							.BYTE V2 
Source: DUMB Module.asm
  1286 2A09				ROW PAUSE 	
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 2A09 80							.BYTE PAUSE	; PAUSE is a Row Pause Command
Source: DUMB Module.asm
  1287 2A0A				ROW G_3 $08 vF CMD4 $00
Macro: ROW [Source: DUMB Module.inc]
    33 = 0005						argnum = 5	; up to 5 arguments may be valid 
   140 2A0A 78							.BYTE NOTE + INSTRUMENT + VOLUME + COMMAND_1 
   141 2A0B 2B							.BYTE G_3 
   142 2A0C 88							.BYTE $08 + INSTRINIT
   143 2A0D F0							.BYTE VF
   144 2A0E 04							.BYTE CMD4 
   145 2A0F 00							.BYTE $00 
Source: DUMB Module.asm
  1288 2A10				ROW PAUSE
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 2A10 80							.BYTE PAUSE	; PAUSE is a Row Pause Command
Source: DUMB Module.asm
  1289 2A11				ROW As3 $08 vF
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2A11 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2A12 2E							.BYTE AS3 
   111 2A13 88							.BYTE $08 + INSTRINIT
   112 2A14 F0							.BYTE VF 
Source: DUMB Module.asm
  1290 2A15				ROW C_4 $08 vF
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2A15 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2A16 30							.BYTE C_4 
   111 2A17 88							.BYTE $08 + INSTRINIT
   112 2A18 F0							.BYTE VF 
Source: DUMB Module.asm
  1291 2A19				ROW As3 $08 v6
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2A19 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2A1A 2E							.BYTE AS3 
   111 2A1B 88							.BYTE $08 + INSTRINIT
   112 2A1C 60							.BYTE V6 
Source: DUMB Module.asm
  1292 2A1D				ROW As3 $08 vF
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2A1D 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2A1E 2E							.BYTE AS3 
   111 2A1F 88							.BYTE $08 + INSTRINIT
   112 2A20 F0							.BYTE VF 
Source: DUMB Module.asm
  1293 2A21				ROW A_3 $08 vF
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2A21 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2A22 2D							.BYTE A_3 
   111 2A23 88							.BYTE $08 + INSTRINIT
   112 2A24 F0							.BYTE VF 
Source: DUMB Module.asm
  1294 2A25				ROW As3 $08 v6 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2A25 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2A26 2E							.BYTE AS3 
   111 2A27 88							.BYTE $08 + INSTRINIT
   112 2A28 60							.BYTE V6 
Source: DUMB Module.asm
  1295 					
  1296 2A29			PTN_23
  1297 2A29				ROW G_3 $08 vF CMD4 $00
Macro: ROW [Source: DUMB Module.inc]
    33 = 0005						argnum = 5	; up to 5 arguments may be valid 
   140 2A29 78							.BYTE NOTE + INSTRUMENT + VOLUME + COMMAND_1 
   141 2A2A 2B							.BYTE G_3 
   142 2A2B 88							.BYTE $08 + INSTRINIT
   143 2A2C F0							.BYTE VF
   144 2A2D 04							.BYTE CMD4 
   145 2A2E 00							.BYTE $00 
Source: DUMB Module.asm
  1298 2A2F				ROW PAUSE 
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 2A2F 80							.BYTE PAUSE	; PAUSE is a Row Pause Command
Source: DUMB Module.asm
  1299 2A30				ROW G_3 $08 v6 CMD4 $02
Macro: ROW [Source: DUMB Module.inc]
    33 = 0005						argnum = 5	; up to 5 arguments may be valid 
   140 2A30 78							.BYTE NOTE + INSTRUMENT + VOLUME + COMMAND_1 
   141 2A31 2B							.BYTE G_3 
   142 2A32 88							.BYTE $08 + INSTRINIT
   143 2A33 60							.BYTE V6
   144 2A34 04							.BYTE CMD4 
   145 2A35 02							.BYTE $02 
Source: DUMB Module.asm
  1300 2A36				ROW PAUSE 
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 2A36 80							.BYTE PAUSE	; PAUSE is a Row Pause Command
Source: DUMB Module.asm
  1301 2A37				ROW G_3 $08 v4 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2A37 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2A38 2B							.BYTE G_3 
   111 2A39 88							.BYTE $08 + INSTRINIT
   112 2A3A 40							.BYTE V4 
Source: DUMB Module.asm
  1302 2A3B				ROW PAUSE 
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 2A3B 80							.BYTE PAUSE	; PAUSE is a Row Pause Command
Source: DUMB Module.asm
  1303 2A3C				ROW G_3 $08 v2 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2A3C 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2A3D 2B							.BYTE G_3 
   111 2A3E 88							.BYTE $08 + INSTRINIT
   112 2A3F 20							.BYTE V2 
Source: DUMB Module.asm
  1304 2A40				ROW PAUSE 
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 2A40 80							.BYTE PAUSE	; PAUSE is a Row Pause Command
Source: DUMB Module.asm
  1305 2A41				ROW E_3 $08 vF CMD4 $00
Macro: ROW [Source: DUMB Module.inc]
    33 = 0005						argnum = 5	; up to 5 arguments may be valid 
   140 2A41 78							.BYTE NOTE + INSTRUMENT + VOLUME + COMMAND_1 
   141 2A42 28							.BYTE E_3 
   142 2A43 88							.BYTE $08 + INSTRINIT
   143 2A44 F0							.BYTE VF
   144 2A45 04							.BYTE CMD4 
   145 2A46 00							.BYTE $00 
Source: DUMB Module.asm
  1306 2A47				ROW PAUSE 
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 2A47 80							.BYTE PAUSE	; PAUSE is a Row Pause Command
Source: DUMB Module.asm
  1307 2A48				ROW F_3 $08 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2A48 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2A49 29							.BYTE F_3 
   111 2A4A 88							.BYTE $08 + INSTRINIT
   112 2A4B F0							.BYTE VF 
Source: DUMB Module.asm
  1308 2A4C				ROW PAUSE 
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 2A4C 80							.BYTE PAUSE	; PAUSE is a Row Pause Command
Source: DUMB Module.asm
  1309 2A4D				ROW F_3 $08 v6 CMD4 $02
Macro: ROW [Source: DUMB Module.inc]
    33 = 0005						argnum = 5	; up to 5 arguments may be valid 
   140 2A4D 78							.BYTE NOTE + INSTRUMENT + VOLUME + COMMAND_1 
   141 2A4E 29							.BYTE F_3 
   142 2A4F 88							.BYTE $08 + INSTRINIT
   143 2A50 60							.BYTE V6
   144 2A51 04							.BYTE CMD4 
   145 2A52 02							.BYTE $02 
Source: DUMB Module.asm
  1310 2A53				ROW D_3 $08 vF CMD4 $00
Macro: ROW [Source: DUMB Module.inc]
    33 = 0005						argnum = 5	; up to 5 arguments may be valid 
   140 2A53 78							.BYTE NOTE + INSTRUMENT + VOLUME + COMMAND_1 
   141 2A54 26							.BYTE D_3 
   142 2A55 88							.BYTE $08 + INSTRINIT
   143 2A56 F0							.BYTE VF
   144 2A57 04							.BYTE CMD4 
   145 2A58 00							.BYTE $00 
Source: DUMB Module.asm
  1311 2A59				ROW C_3 $08 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2A59 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2A5A 24							.BYTE C_3 
   111 2A5B 88							.BYTE $08 + INSTRINIT
   112 2A5C F0							.BYTE VF 
Source: DUMB Module.asm
  1312 2A5D				ROW D_3 $08 v6 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2A5D 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2A5E 26							.BYTE D_3 
   111 2A5F 88							.BYTE $08 + INSTRINIT
   112 2A60 60							.BYTE V6 
Source: DUMB Module.asm
  1313 2A61				ROW D_3 $08 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2A61 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2A62 26							.BYTE D_3 
   111 2A63 88							.BYTE $08 + INSTRINIT
   112 2A64 F0							.BYTE VF 
Source: DUMB Module.asm
  1314 2A65				ROW D_3 $08 v2 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2A65 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2A66 26							.BYTE D_3 
   111 2A67 88							.BYTE $08 + INSTRINIT
   112 2A68 20							.BYTE V2 
Source: DUMB Module.asm
  1315 2A69				ROW D_3 $08 v6 CMD4 $02 
Macro: ROW [Source: DUMB Module.inc]
    33 = 0005						argnum = 5	; up to 5 arguments may be valid 
   140 2A69 78							.BYTE NOTE + INSTRUMENT + VOLUME + COMMAND_1 
   141 2A6A 26							.BYTE D_3 
   142 2A6B 88							.BYTE $08 + INSTRINIT
   143 2A6C 60							.BYTE V6
   144 2A6D 04							.BYTE CMD4 
   145 2A6E 02							.BYTE $02 
Source: DUMB Module.asm
  1316 2A6F				ROW PAUSE 
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 2A6F 80							.BYTE PAUSE	; PAUSE is a Row Pause Command
Source: DUMB Module.asm
  1317 2A70				ROW D_3 $08 v4 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2A70 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2A71 26							.BYTE D_3 
   111 2A72 88							.BYTE $08 + INSTRINIT
   112 2A73 40							.BYTE V4 
Source: DUMB Module.asm
  1318 2A74				ROW PAUSE 
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 2A74 80							.BYTE PAUSE	; PAUSE is a Row Pause Command
Source: DUMB Module.asm
  1319 2A75				ROW D_3 $08 v2 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2A75 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2A76 26							.BYTE D_3 
   111 2A77 88							.BYTE $08 + INSTRINIT
   112 2A78 20							.BYTE V2 
Source: DUMB Module.asm
  1320 2A79				ROW PAUSE 	
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 2A79 80							.BYTE PAUSE	; PAUSE is a Row Pause Command
Source: DUMB Module.asm
  1321 2A7A				ROW G_3 $08 vF CMD4 $00
Macro: ROW [Source: DUMB Module.inc]
    33 = 0005						argnum = 5	; up to 5 arguments may be valid 
   140 2A7A 78							.BYTE NOTE + INSTRUMENT + VOLUME + COMMAND_1 
   141 2A7B 2B							.BYTE G_3 
   142 2A7C 88							.BYTE $08 + INSTRINIT
   143 2A7D F0							.BYTE VF
   144 2A7E 04							.BYTE CMD4 
   145 2A7F 00							.BYTE $00 
Source: DUMB Module.asm
  1322 2A80				ROW PAUSE
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 2A80 80							.BYTE PAUSE	; PAUSE is a Row Pause Command
Source: DUMB Module.asm
  1323 2A81				ROW As3 $08 vF
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2A81 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2A82 2E							.BYTE AS3 
   111 2A83 88							.BYTE $08 + INSTRINIT
   112 2A84 F0							.BYTE VF 
Source: DUMB Module.asm
  1324 2A85				ROW G_3 $08 vF
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2A85 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2A86 2B							.BYTE G_3 
   111 2A87 88							.BYTE $08 + INSTRINIT
   112 2A88 F0							.BYTE VF 
Source: DUMB Module.asm
  1325 2A89				ROW As3 $08 v6
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2A89 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2A8A 2E							.BYTE AS3 
   111 2A8B 88							.BYTE $08 + INSTRINIT
   112 2A8C 60							.BYTE V6 
Source: DUMB Module.asm
  1326 2A8D				ROW A_3 $08 vF
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2A8D 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2A8E 2D							.BYTE A_3 
   111 2A8F 88							.BYTE $08 + INSTRINIT
   112 2A90 F0							.BYTE VF 
Source: DUMB Module.asm
  1327 2A91				ROW As3 $08 v2
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2A91 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2A92 2E							.BYTE AS3 
   111 2A93 88							.BYTE $08 + INSTRINIT
   112 2A94 20							.BYTE V2 
Source: DUMB Module.asm
  1328 2A95				ROW F_3 $08 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2A95 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2A96 29							.BYTE F_3 
   111 2A97 88							.BYTE $08 + INSTRINIT
   112 2A98 F0							.BYTE VF 
Source: DUMB Module.asm
  1329
  1330 2A99			PTN_24
  1331 2A99				ROW C_3 $08 vF CMD4 $00
Macro: ROW [Source: DUMB Module.inc]
    33 = 0005						argnum = 5	; up to 5 arguments may be valid 
   140 2A99 78							.BYTE NOTE + INSTRUMENT + VOLUME + COMMAND_1 
   141 2A9A 24							.BYTE C_3 
   142 2A9B 88							.BYTE $08 + INSTRINIT
   143 2A9C F0							.BYTE VF
   144 2A9D 04							.BYTE CMD4 
   145 2A9E 00							.BYTE $00 
Source: DUMB Module.asm
  1332 2A9F				ROW PAUSE 
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 2A9F 80							.BYTE PAUSE	; PAUSE is a Row Pause Command
Source: DUMB Module.asm
  1333 2AA0				ROW C_3 $08 v6 CMD4 $02
Macro: ROW [Source: DUMB Module.inc]
    33 = 0005						argnum = 5	; up to 5 arguments may be valid 
   140 2AA0 78							.BYTE NOTE + INSTRUMENT + VOLUME + COMMAND_1 
   141 2AA1 24							.BYTE C_3 
   142 2AA2 88							.BYTE $08 + INSTRINIT
   143 2AA3 60							.BYTE V6
   144 2AA4 04							.BYTE CMD4 
   145 2AA5 02							.BYTE $02 
Source: DUMB Module.asm
  1334 2AA6				ROW PAUSE 
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 2AA6 80							.BYTE PAUSE	; PAUSE is a Row Pause Command
Source: DUMB Module.asm
  1335 2AA7				ROW F_3 $08 vF CMD4 $00
Macro: ROW [Source: DUMB Module.inc]
    33 = 0005						argnum = 5	; up to 5 arguments may be valid 
   140 2AA7 78							.BYTE NOTE + INSTRUMENT + VOLUME + COMMAND_1 
   141 2AA8 29							.BYTE F_3 
   142 2AA9 88							.BYTE $08 + INSTRINIT
   143 2AAA F0							.BYTE VF
   144 2AAB 04							.BYTE CMD4 
   145 2AAC 00							.BYTE $00 
Source: DUMB Module.asm
  1336 2AAD				ROW PAUSE 
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 2AAD 80							.BYTE PAUSE	; PAUSE is a Row Pause Command
Source: DUMB Module.asm
  1337 2AAE				ROW F_3 $08 v6 CMD4 $02
Macro: ROW [Source: DUMB Module.inc]
    33 = 0005						argnum = 5	; up to 5 arguments may be valid 
   140 2AAE 78							.BYTE NOTE + INSTRUMENT + VOLUME + COMMAND_1 
   141 2AAF 29							.BYTE F_3 
   142 2AB0 88							.BYTE $08 + INSTRINIT
   143 2AB1 60							.BYTE V6
   144 2AB2 04							.BYTE CMD4 
   145 2AB3 02							.BYTE $02 
Source: DUMB Module.asm
  1338 2AB4				ROW PAUSE 
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 2AB4 80							.BYTE PAUSE	; PAUSE is a Row Pause Command
Source: DUMB Module.asm
  1339 2AB5				ROW G_3 $08 vF CMD4 $00
Macro: ROW [Source: DUMB Module.inc]
    33 = 0005						argnum = 5	; up to 5 arguments may be valid 
   140 2AB5 78							.BYTE NOTE + INSTRUMENT + VOLUME + COMMAND_1 
   141 2AB6 2B							.BYTE G_3 
   142 2AB7 88							.BYTE $08 + INSTRINIT
   143 2AB8 F0							.BYTE VF
   144 2AB9 04							.BYTE CMD4 
   145 2ABA 00							.BYTE $00 
Source: DUMB Module.asm
  1340 2ABB				ROW PAUSE 
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 2ABB 80							.BYTE PAUSE	; PAUSE is a Row Pause Command
Source: DUMB Module.asm
  1341 2ABC				ROW D_3 $08 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2ABC 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2ABD 26							.BYTE D_3 
   111 2ABE 88							.BYTE $08 + INSTRINIT
   112 2ABF F0							.BYTE VF 
Source: DUMB Module.asm
  1342 2AC0				ROW PAUSE 
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 2AC0 80							.BYTE PAUSE	; PAUSE is a Row Pause Command
Source: DUMB Module.asm
  1343 2AC1				ROW C_3 $08 vF CMD4 $00
Macro: ROW [Source: DUMB Module.inc]
    33 = 0005						argnum = 5	; up to 5 arguments may be valid 
   140 2AC1 78							.BYTE NOTE + INSTRUMENT + VOLUME + COMMAND_1 
   141 2AC2 24							.BYTE C_3 
   142 2AC3 88							.BYTE $08 + INSTRINIT
   143 2AC4 F0							.BYTE VF
   144 2AC5 04							.BYTE CMD4 
   145 2AC6 00							.BYTE $00 
Source: DUMB Module.asm
  1344 2AC7				ROW D_3 $08 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2AC7 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2AC8 26							.BYTE D_3 
   111 2AC9 88							.BYTE $08 + INSTRINIT
   112 2ACA F0							.BYTE VF 
Source: DUMB Module.asm
  1345 2ACB				ROW C_3 $08 v6 CMD4 $02
Macro: ROW [Source: DUMB Module.inc]
    33 = 0005						argnum = 5	; up to 5 arguments may be valid 
   140 2ACB 78							.BYTE NOTE + INSTRUMENT + VOLUME + COMMAND_1 
   141 2ACC 24							.BYTE C_3 
   142 2ACD 88							.BYTE $08 + INSTRINIT
   143 2ACE 60							.BYTE V6
   144 2ACF 04							.BYTE CMD4 
   145 2AD0 02							.BYTE $02 
Source: DUMB Module.asm
  1346 2AD1				ROW D_3 $08 v6
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2AD1 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2AD2 26							.BYTE D_3 
   111 2AD3 88							.BYTE $08 + INSTRINIT
   112 2AD4 60							.BYTE V6 
Source: DUMB Module.asm
  1347 2AD5				ROW C_3 $08 v2 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2AD5 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2AD6 24							.BYTE C_3 
   111 2AD7 88							.BYTE $08 + INSTRINIT
   112 2AD8 20							.BYTE V2 
Source: DUMB Module.asm
  1348 2AD9				ROW D_3 $08 v2	
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2AD9 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2ADA 26							.BYTE D_3 
   111 2ADB 88							.BYTE $08 + INSTRINIT
   112 2ADC 20							.BYTE V2 
Source: DUMB Module.asm
  1349 2ADD				ROW C_3 $08 vF CMD4 $00
Macro: ROW [Source: DUMB Module.inc]
    33 = 0005						argnum = 5	; up to 5 arguments may be valid 
   140 2ADD 78							.BYTE NOTE + INSTRUMENT + VOLUME + COMMAND_1 
   141 2ADE 24							.BYTE C_3 
   142 2ADF 88							.BYTE $08 + INSTRINIT
   143 2AE0 F0							.BYTE VF
   144 2AE1 04							.BYTE CMD4 
   145 2AE2 00							.BYTE $00 
Source: DUMB Module.asm
  1350 2AE3				ROW PAUSE 
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 2AE3 80							.BYTE PAUSE	; PAUSE is a Row Pause Command
Source: DUMB Module.asm
  1351 2AE4				ROW C_3 $08 v6 CMD4 $02
Macro: ROW [Source: DUMB Module.inc]
    33 = 0005						argnum = 5	; up to 5 arguments may be valid 
   140 2AE4 78							.BYTE NOTE + INSTRUMENT + VOLUME + COMMAND_1 
   141 2AE5 24							.BYTE C_3 
   142 2AE6 88							.BYTE $08 + INSTRINIT
   143 2AE7 60							.BYTE V6
   144 2AE8 04							.BYTE CMD4 
   145 2AE9 02							.BYTE $02 
Source: DUMB Module.asm
  1352 2AEA				ROW F_3 $08 vF CMD4 $00
Macro: ROW [Source: DUMB Module.inc]
    33 = 0005						argnum = 5	; up to 5 arguments may be valid 
   140 2AEA 78							.BYTE NOTE + INSTRUMENT + VOLUME + COMMAND_1 
   141 2AEB 29							.BYTE F_3 
   142 2AEC 88							.BYTE $08 + INSTRINIT
   143 2AED F0							.BYTE VF
   144 2AEE 04							.BYTE CMD4 
   145 2AEF 00							.BYTE $00 
Source: DUMB Module.asm
  1353 2AF0				ROW C_3 $08 v2
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2AF0 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2AF1 24							.BYTE C_3 
   111 2AF2 88							.BYTE $08 + INSTRINIT
   112 2AF3 20							.BYTE V2 
Source: DUMB Module.asm
  1354 2AF4				ROW F_3 $08 v6 CMD4 $02
Macro: ROW [Source: DUMB Module.inc]
    33 = 0005						argnum = 5	; up to 5 arguments may be valid 
   140 2AF4 78							.BYTE NOTE + INSTRUMENT + VOLUME + COMMAND_1 
   141 2AF5 29							.BYTE F_3 
   142 2AF6 88							.BYTE $08 + INSTRINIT
   143 2AF7 60							.BYTE V6
   144 2AF8 04							.BYTE CMD4 
   145 2AF9 02							.BYTE $02 
Source: DUMB Module.asm
  1355 2AFA				ROW E_3 $08 vF CMD4 $00
Macro: ROW [Source: DUMB Module.inc]
    33 = 0005						argnum = 5	; up to 5 arguments may be valid 
   140 2AFA 78							.BYTE NOTE + INSTRUMENT + VOLUME + COMMAND_1 
   141 2AFB 28							.BYTE E_3 
   142 2AFC 88							.BYTE $08 + INSTRINIT
   143 2AFD F0							.BYTE VF
   144 2AFE 04							.BYTE CMD4 
   145 2AFF 00							.BYTE $00 
Source: DUMB Module.asm
  1356 2B00				ROW F_3 $08 v2
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2B00 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2B01 29							.BYTE F_3 
   111 2B02 88							.BYTE $08 + INSTRINIT
   112 2B03 20							.BYTE V2 
Source: DUMB Module.asm
  1357 2B04				ROW D_3 $08 vF CMD4 $00
Macro: ROW [Source: DUMB Module.inc]
    33 = 0005						argnum = 5	; up to 5 arguments may be valid 
   140 2B04 78							.BYTE NOTE + INSTRUMENT + VOLUME + COMMAND_1 
   141 2B05 26							.BYTE D_3 
   142 2B06 88							.BYTE $08 + INSTRINIT
   143 2B07 F0							.BYTE VF
   144 2B08 04							.BYTE CMD4 
   145 2B09 00							.BYTE $00 
Source: DUMB Module.asm
  1358 2B0A				ROW PAUSE 
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 2B0A 80							.BYTE PAUSE	; PAUSE is a Row Pause Command
Source: DUMB Module.asm
  1359 2B0B				ROW D_3 $08 v6 CMD4 $02
Macro: ROW [Source: DUMB Module.inc]
    33 = 0005						argnum = 5	; up to 5 arguments may be valid 
   140 2B0B 78							.BYTE NOTE + INSTRUMENT + VOLUME + COMMAND_1 
   141 2B0C 26							.BYTE D_3 
   142 2B0D 88							.BYTE $08 + INSTRINIT
   143 2B0E 60							.BYTE V6
   144 2B0F 04							.BYTE CMD4 
   145 2B10 02							.BYTE $02 
Source: DUMB Module.asm
  1360 2B11				ROW PAUSE 
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 2B11 80							.BYTE PAUSE	; PAUSE is a Row Pause Command
Source: DUMB Module.asm
  1361 2B12				ROW D_3 $08 v2 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2B12 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2B13 26							.BYTE D_3 
   111 2B14 88							.BYTE $08 + INSTRINIT
   112 2B15 20							.BYTE V2 
Source: DUMB Module.asm
  1362 2B16				ROW PAUSE 
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 2B16 80							.BYTE PAUSE	; PAUSE is a Row Pause Command
Source: DUMB Module.asm
  1363
  1364 2B17			PTN_25
  1365 2B17				ROW C_3 $08 vF CMD4 $00
Macro: ROW [Source: DUMB Module.inc]
    33 = 0005						argnum = 5	; up to 5 arguments may be valid 
   140 2B17 78							.BYTE NOTE + INSTRUMENT + VOLUME + COMMAND_1 
   141 2B18 24							.BYTE C_3 
   142 2B19 88							.BYTE $08 + INSTRINIT
   143 2B1A F0							.BYTE VF
   144 2B1B 04							.BYTE CMD4 
   145 2B1C 00							.BYTE $00 
Source: DUMB Module.asm
  1366 2B1D				ROW PAUSE
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 2B1D 80							.BYTE PAUSE	; PAUSE is a Row Pause Command
Source: DUMB Module.asm
  1367 2B1E				ROW As3 $08 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2B1E 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2B1F 2E							.BYTE AS3 
   111 2B20 88							.BYTE $08 + INSTRINIT
   112 2B21 F0							.BYTE VF 
Source: DUMB Module.asm
  1368 2B22				ROW PAUSE 
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 2B22 80							.BYTE PAUSE	; PAUSE is a Row Pause Command
Source: DUMB Module.asm
  1369 2B23				ROW C_4 $08 vF
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2B23 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2B24 30							.BYTE C_4 
   111 2B25 88							.BYTE $08 + INSTRINIT
   112 2B26 F0							.BYTE VF 
Source: DUMB Module.asm
  1370 2B27				ROW As3 $08 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2B27 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2B28 2E							.BYTE AS3 
   111 2B29 88							.BYTE $08 + INSTRINIT
   112 2B2A F0							.BYTE VF 
Source: DUMB Module.asm
  1371 2B2B				ROW C_4 $08 v6 CMD4 $02
Macro: ROW [Source: DUMB Module.inc]
    33 = 0005						argnum = 5	; up to 5 arguments may be valid 
   140 2B2B 78							.BYTE NOTE + INSTRUMENT + VOLUME + COMMAND_1 
   141 2B2C 30							.BYTE C_4 
   142 2B2D 88							.BYTE $08 + INSTRINIT
   143 2B2E 60							.BYTE V6
   144 2B2F 04							.BYTE CMD4 
   145 2B30 02							.BYTE $02 
Source: DUMB Module.asm
  1372 2B31				ROW As3 $08 v6 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2B31 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2B32 2E							.BYTE AS3 
   111 2B33 88							.BYTE $08 + INSTRINIT
   112 2B34 60							.BYTE V6 
Source: DUMB Module.asm
  1373 2B35				ROW A_3 $08 vF CMD4 $00
Macro: ROW [Source: DUMB Module.inc]
    33 = 0005						argnum = 5	; up to 5 arguments may be valid 
   140 2B35 78							.BYTE NOTE + INSTRUMENT + VOLUME + COMMAND_1 
   141 2B36 2D							.BYTE A_3 
   142 2B37 88							.BYTE $08 + INSTRINIT
   143 2B38 F0							.BYTE VF
   144 2B39 04							.BYTE CMD4 
   145 2B3A 00							.BYTE $00 
Source: DUMB Module.asm
  1374 2B3B				ROW As3 $08 v2 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2B3B 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2B3C 2E							.BYTE AS3 
   111 2B3D 88							.BYTE $08 + INSTRINIT
   112 2B3E 20							.BYTE V2 
Source: DUMB Module.asm
  1375 2B3F				ROW A_3 $08 v6 CMD4 $02
Macro: ROW [Source: DUMB Module.inc]
    33 = 0005						argnum = 5	; up to 5 arguments may be valid 
   140 2B3F 78							.BYTE NOTE + INSTRUMENT + VOLUME + COMMAND_1 
   141 2B40 2D							.BYTE A_3 
   142 2B41 88							.BYTE $08 + INSTRINIT
   143 2B42 60							.BYTE V6
   144 2B43 04							.BYTE CMD4 
   145 2B44 02							.BYTE $02 
Source: DUMB Module.asm
  1376 2B45				ROW G_3 $08 vF CMD4 $00 
Macro: ROW [Source: DUMB Module.inc]
    33 = 0005						argnum = 5	; up to 5 arguments may be valid 
   140 2B45 78							.BYTE NOTE + INSTRUMENT + VOLUME + COMMAND_1 
   141 2B46 2B							.BYTE G_3 
   142 2B47 88							.BYTE $08 + INSTRINIT
   143 2B48 F0							.BYTE VF
   144 2B49 04							.BYTE CMD4 
   145 2B4A 00							.BYTE $00 
Source: DUMB Module.asm
  1377 2B4B				ROW A_3 $08 v2 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2B4B 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2B4C 2D							.BYTE A_3 
   111 2B4D 88							.BYTE $08 + INSTRINIT
   112 2B4E 20							.BYTE V2 
Source: DUMB Module.asm
  1378 2B4F				ROW F_3 $08 vF
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2B4F 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2B50 29							.BYTE F_3 
   111 2B51 88							.BYTE $08 + INSTRINIT
   112 2B52 F0							.BYTE VF 
Source: DUMB Module.asm
  1379 2B53				ROW PAUSE 
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 2B53 80							.BYTE PAUSE	; PAUSE is a Row Pause Command
Source: DUMB Module.asm
  1380 2B54				ROW A_3 $08 vF
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2B54 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2B55 2D							.BYTE A_3 
   111 2B56 88							.BYTE $08 + INSTRINIT
   112 2B57 F0							.BYTE VF 
Source: DUMB Module.asm
  1381 2B58				ROW G_3 $08 vF
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2B58 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2B59 2B							.BYTE G_3 
   111 2B5A 88							.BYTE $08 + INSTRINIT
   112 2B5B F0							.BYTE VF 
Source: DUMB Module.asm
  1382 2B5C				ROW A_3 $08 v6 CMD4 $02 
Macro: ROW [Source: DUMB Module.inc]
    33 = 0005						argnum = 5	; up to 5 arguments may be valid 
   140 2B5C 78							.BYTE NOTE + INSTRUMENT + VOLUME + COMMAND_1 
   141 2B5D 2D							.BYTE A_3 
   142 2B5E 88							.BYTE $08 + INSTRINIT
   143 2B5F 60							.BYTE V6
   144 2B60 04							.BYTE CMD4 
   145 2B61 02							.BYTE $02 
Source: DUMB Module.asm
  1383 2B62				ROW G_3 $08 v6
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2B62 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2B63 2B							.BYTE G_3 
   111 2B64 88							.BYTE $08 + INSTRINIT
   112 2B65 60							.BYTE V6 
Source: DUMB Module.asm
  1384 2B66				ROW A_3 $08 v2
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2B66 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2B67 2D							.BYTE A_3 
   111 2B68 88							.BYTE $08 + INSTRINIT
   112 2B69 20							.BYTE V2 
Source: DUMB Module.asm
  1385 2B6A				ROW G_3 $08 v2
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2B6A 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2B6B 2B							.BYTE G_3 
   111 2B6C 88							.BYTE $08 + INSTRINIT
   112 2B6D 20							.BYTE V2 
Source: DUMB Module.asm
  1386 2B6E				ROW A_3 $08 v1
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2B6E 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2B6F 2D							.BYTE A_3 
   111 2B70 88							.BYTE $08 + INSTRINIT
   112 2B71 10							.BYTE V1 
Source: DUMB Module.asm
  1387 2B72				ROW G_3 $08 v1
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2B72 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2B73 2B							.BYTE G_3 
   111 2B74 88							.BYTE $08 + INSTRINIT
   112 2B75 10							.BYTE V1 
Source: DUMB Module.asm
  1388 2B76				ROW A_3 $08 v4
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2B76 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2B77 2D							.BYTE A_3 
   111 2B78 88							.BYTE $08 + INSTRINIT
   112 2B79 40							.BYTE V4 
Source: DUMB Module.asm
  1389 2B7A				ROW G_3 $08 v4
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2B7A 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2B7B 2B							.BYTE G_3 
   111 2B7C 88							.BYTE $08 + INSTRINIT
   112 2B7D 40							.BYTE V4 
Source: DUMB Module.asm
  1390 2B7E				ROW A_3 $08 v2
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2B7E 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2B7F 2D							.BYTE A_3 
   111 2B80 88							.BYTE $08 + INSTRINIT
   112 2B81 20							.BYTE V2 
Source: DUMB Module.asm
  1391 2B82				ROW G_3 $08 v2
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2B82 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2B83 2B							.BYTE G_3 
   111 2B84 88							.BYTE $08 + INSTRINIT
   112 2B85 20							.BYTE V2 
Source: DUMB Module.asm
  1392 2B86				ROW A_3 $08 v1
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2B86 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2B87 2D							.BYTE A_3 
   111 2B88 88							.BYTE $08 + INSTRINIT
   112 2B89 10							.BYTE V1 
Source: DUMB Module.asm
  1393 2B8A				ROW G_3 $08 v1
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2B8A 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2B8B 2B							.BYTE G_3 
   111 2B8C 88							.BYTE $08 + INSTRINIT
   112 2B8D 10							.BYTE V1 
Source: DUMB Module.asm
  1394 2B8E				END_PATTERN 
Macro: END_PATTERN [Source: DUMB Module.inc]
     2 2B8E 00				.BYTE $00			; Pattern End 
Source: DUMB Module.asm
  1395
  1396 2B8F			PTN_26
  1397 2B8F				ROW E_3 $08 vF CMD4 $00
Macro: ROW [Source: DUMB Module.inc]
    33 = 0005						argnum = 5	; up to 5 arguments may be valid 
   140 2B8F 78							.BYTE NOTE + INSTRUMENT + VOLUME + COMMAND_1 
   141 2B90 28							.BYTE E_3 
   142 2B91 88							.BYTE $08 + INSTRINIT
   143 2B92 F0							.BYTE VF
   144 2B93 04							.BYTE CMD4 
   145 2B94 00							.BYTE $00 
Source: DUMB Module.asm
  1398 2B95				ROW PAUSE 
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 2B95 80							.BYTE PAUSE	; PAUSE is a Row Pause Command
Source: DUMB Module.asm
  1399 2B96				ROW E_3 $08 v6 CMD4 $02
Macro: ROW [Source: DUMB Module.inc]
    33 = 0005						argnum = 5	; up to 5 arguments may be valid 
   140 2B96 78							.BYTE NOTE + INSTRUMENT + VOLUME + COMMAND_1 
   141 2B97 28							.BYTE E_3 
   142 2B98 88							.BYTE $08 + INSTRINIT
   143 2B99 60							.BYTE V6
   144 2B9A 04							.BYTE CMD4 
   145 2B9B 02							.BYTE $02 
Source: DUMB Module.asm
  1400 2B9C				ROW PAUSE 
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 2B9C 80							.BYTE PAUSE	; PAUSE is a Row Pause Command
Source: DUMB Module.asm
  1401 2B9D				ROW A_3 $08 vF CMD4 $00
Macro: ROW [Source: DUMB Module.inc]
    33 = 0005						argnum = 5	; up to 5 arguments may be valid 
   140 2B9D 78							.BYTE NOTE + INSTRUMENT + VOLUME + COMMAND_1 
   141 2B9E 2D							.BYTE A_3 
   142 2B9F 88							.BYTE $08 + INSTRINIT
   143 2BA0 F0							.BYTE VF
   144 2BA1 04							.BYTE CMD4 
   145 2BA2 00							.BYTE $00 
Source: DUMB Module.asm
  1402 2BA3				ROW PAUSE 
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 2BA3 80							.BYTE PAUSE	; PAUSE is a Row Pause Command
Source: DUMB Module.asm
  1403 2BA4				ROW A_3 $08 v6 CMD4 $02
Macro: ROW [Source: DUMB Module.inc]
    33 = 0005						argnum = 5	; up to 5 arguments may be valid 
   140 2BA4 78							.BYTE NOTE + INSTRUMENT + VOLUME + COMMAND_1 
   141 2BA5 2D							.BYTE A_3 
   142 2BA6 88							.BYTE $08 + INSTRINIT
   143 2BA7 60							.BYTE V6
   144 2BA8 04							.BYTE CMD4 
   145 2BA9 02							.BYTE $02 
Source: DUMB Module.asm
  1404 2BAA				ROW PAUSE 
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 2BAA 80							.BYTE PAUSE	; PAUSE is a Row Pause Command
Source: DUMB Module.asm
  1405 2BAB				ROW B_3 $08 vF CMD4 $00
Macro: ROW [Source: DUMB Module.inc]
    33 = 0005						argnum = 5	; up to 5 arguments may be valid 
   140 2BAB 78							.BYTE NOTE + INSTRUMENT + VOLUME + COMMAND_1 
   141 2BAC 2F							.BYTE B_3 
   142 2BAD 88							.BYTE $08 + INSTRINIT
   143 2BAE F0							.BYTE VF
   144 2BAF 04							.BYTE CMD4 
   145 2BB0 00							.BYTE $00 
Source: DUMB Module.asm
  1406 2BB1				ROW PAUSE 
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 2BB1 80							.BYTE PAUSE	; PAUSE is a Row Pause Command
Source: DUMB Module.asm
  1407 2BB2				ROW B_3 $08 v6 CMD4 $02
Macro: ROW [Source: DUMB Module.inc]
    33 = 0005						argnum = 5	; up to 5 arguments may be valid 
   140 2BB2 78							.BYTE NOTE + INSTRUMENT + VOLUME + COMMAND_1 
   141 2BB3 2F							.BYTE B_3 
   142 2BB4 88							.BYTE $08 + INSTRINIT
   143 2BB5 60							.BYTE V6
   144 2BB6 04							.BYTE CMD4 
   145 2BB7 02							.BYTE $02 
Source: DUMB Module.asm
  1408 2BB8				ROW PAUSE 
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 2BB8 80							.BYTE PAUSE	; PAUSE is a Row Pause Command
Source: DUMB Module.asm
  1409 2BB9				ROW E_3 $08 vF CMD4 $00
Macro: ROW [Source: DUMB Module.inc]
    33 = 0005						argnum = 5	; up to 5 arguments may be valid 
   140 2BB9 78							.BYTE NOTE + INSTRUMENT + VOLUME + COMMAND_1 
   141 2BBA 28							.BYTE E_3 
   142 2BBB 88							.BYTE $08 + INSTRINIT
   143 2BBC F0							.BYTE VF
   144 2BBD 04							.BYTE CMD4 
   145 2BBE 00							.BYTE $00 
Source: DUMB Module.asm
  1410 2BBF				ROW Fs3 $08 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2BBF 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2BC0 2A							.BYTE FS3 
   111 2BC1 88							.BYTE $08 + INSTRINIT
   112 2BC2 F0							.BYTE VF 
Source: DUMB Module.asm
  1411 2BC3				ROW E_3 $08 v6 CMD4 $02
Macro: ROW [Source: DUMB Module.inc]
    33 = 0005						argnum = 5	; up to 5 arguments may be valid 
   140 2BC3 78							.BYTE NOTE + INSTRUMENT + VOLUME + COMMAND_1 
   141 2BC4 28							.BYTE E_3 
   142 2BC5 88							.BYTE $08 + INSTRINIT
   143 2BC6 60							.BYTE V6
   144 2BC7 04							.BYTE CMD4 
   145 2BC8 02							.BYTE $02 
Source: DUMB Module.asm
  1412 2BC9				ROW Fs3 $08 v6
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2BC9 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2BCA 2A							.BYTE FS3 
   111 2BCB 88							.BYTE $08 + INSTRINIT
   112 2BCC 60							.BYTE V6 
Source: DUMB Module.asm
  1413 2BCD				ROW E_3 $08 v2 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2BCD 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2BCE 28							.BYTE E_3 
   111 2BCF 88							.BYTE $08 + INSTRINIT
   112 2BD0 20							.BYTE V2 
Source: DUMB Module.asm
  1414 2BD1				ROW Fs3 $08 v2	
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2BD1 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2BD2 2A							.BYTE FS3 
   111 2BD3 88							.BYTE $08 + INSTRINIT
   112 2BD4 20							.BYTE V2 
Source: DUMB Module.asm
  1415 2BD5				ROW E_3 $08 vF CMD4 $00
Macro: ROW [Source: DUMB Module.inc]
    33 = 0005						argnum = 5	; up to 5 arguments may be valid 
   140 2BD5 78							.BYTE NOTE + INSTRUMENT + VOLUME + COMMAND_1 
   141 2BD6 28							.BYTE E_3 
   142 2BD7 88							.BYTE $08 + INSTRINIT
   143 2BD8 F0							.BYTE VF
   144 2BD9 04							.BYTE CMD4 
   145 2BDA 00							.BYTE $00 
Source: DUMB Module.asm
  1416 2BDB				ROW PAUSE 
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 2BDB 80							.BYTE PAUSE	; PAUSE is a Row Pause Command
Source: DUMB Module.asm
  1417 2BDC				ROW E_3 $08 v6 CMD4 $02
Macro: ROW [Source: DUMB Module.inc]
    33 = 0005						argnum = 5	; up to 5 arguments may be valid 
   140 2BDC 78							.BYTE NOTE + INSTRUMENT + VOLUME + COMMAND_1 
   141 2BDD 28							.BYTE E_3 
   142 2BDE 88							.BYTE $08 + INSTRINIT
   143 2BDF 60							.BYTE V6
   144 2BE0 04							.BYTE CMD4 
   145 2BE1 02							.BYTE $02 
Source: DUMB Module.asm
  1418 2BE2				ROW PAUSE 
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 2BE2 80							.BYTE PAUSE	; PAUSE is a Row Pause Command
Source: DUMB Module.asm
  1419 2BE3				ROW A_3 $08 vF CMD4 $00
Macro: ROW [Source: DUMB Module.inc]
    33 = 0005						argnum = 5	; up to 5 arguments may be valid 
   140 2BE3 78							.BYTE NOTE + INSTRUMENT + VOLUME + COMMAND_1 
   141 2BE4 2D							.BYTE A_3 
   142 2BE5 88							.BYTE $08 + INSTRINIT
   143 2BE6 F0							.BYTE VF
   144 2BE7 04							.BYTE CMD4 
   145 2BE8 00							.BYTE $00 
Source: DUMB Module.asm
  1420 2BE9				ROW PAUSE 
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 2BE9 80							.BYTE PAUSE	; PAUSE is a Row Pause Command
Source: DUMB Module.asm
  1421 2BEA				ROW A_3 $08 v6 CMD4 $02
Macro: ROW [Source: DUMB Module.inc]
    33 = 0005						argnum = 5	; up to 5 arguments may be valid 
   140 2BEA 78							.BYTE NOTE + INSTRUMENT + VOLUME + COMMAND_1 
   141 2BEB 2D							.BYTE A_3 
   142 2BEC 88							.BYTE $08 + INSTRINIT
   143 2BED 60							.BYTE V6
   144 2BEE 04							.BYTE CMD4 
   145 2BEF 02							.BYTE $02 
Source: DUMB Module.asm
  1422 2BF0				ROW PAUSE 
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 2BF0 80							.BYTE PAUSE	; PAUSE is a Row Pause Command
Source: DUMB Module.asm
  1423 2BF1				ROW Cs4 $08 vF CMD4 $00
Macro: ROW [Source: DUMB Module.inc]
    33 = 0005						argnum = 5	; up to 5 arguments may be valid 
   140 2BF1 78							.BYTE NOTE + INSTRUMENT + VOLUME + COMMAND_1 
   141 2BF2 31							.BYTE CS4 
   142 2BF3 88							.BYTE $08 + INSTRINIT
   143 2BF4 F0							.BYTE VF
   144 2BF5 04							.BYTE CMD4 
   145 2BF6 00							.BYTE $00 
Source: DUMB Module.asm
  1424 2BF7				ROW B_3 $08 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2BF7 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2BF8 2F							.BYTE B_3 
   111 2BF9 88							.BYTE $08 + INSTRINIT
   112 2BFA F0							.BYTE VF 
Source: DUMB Module.asm
  1425 2BFB				ROW Cs4 $08 v6 CMD4 $02
Macro: ROW [Source: DUMB Module.inc]
    33 = 0005						argnum = 5	; up to 5 arguments may be valid 
   140 2BFB 78							.BYTE NOTE + INSTRUMENT + VOLUME + COMMAND_1 
   141 2BFC 31							.BYTE CS4 
   142 2BFD 88							.BYTE $08 + INSTRINIT
   143 2BFE 60							.BYTE V6
   144 2BFF 04							.BYTE CMD4 
   145 2C00 02							.BYTE $02 
Source: DUMB Module.asm
  1426 2C01				ROW B_3 $08 v6
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2C01 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2C02 2F							.BYTE B_3 
   111 2C03 88							.BYTE $08 + INSTRINIT
   112 2C04 60							.BYTE V6 
Source: DUMB Module.asm
  1427 2C05				ROW Cs4 $08 v2 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2C05 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2C06 31							.BYTE CS4 
   111 2C07 88							.BYTE $08 + INSTRINIT
   112 2C08 20							.BYTE V2 
Source: DUMB Module.asm
  1428 2C09				ROW B_3 $08 v2	
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2C09 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2C0A 2F							.BYTE B_3 
   111 2C0B 88							.BYTE $08 + INSTRINIT
   112 2C0C 20							.BYTE V2 
Source: DUMB Module.asm
  1429
  1430 2C0D			PTN_27
  1431 2C0D				ROW E_3 $08 vF CMD4 $00
Macro: ROW [Source: DUMB Module.inc]
    33 = 0005						argnum = 5	; up to 5 arguments may be valid 
   140 2C0D 78							.BYTE NOTE + INSTRUMENT + VOLUME + COMMAND_1 
   141 2C0E 28							.BYTE E_3 
   142 2C0F 88							.BYTE $08 + INSTRINIT
   143 2C10 F0							.BYTE VF
   144 2C11 04							.BYTE CMD4 
   145 2C12 00							.BYTE $00 
Source: DUMB Module.asm
  1432 2C13				ROW PAUSE 
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 2C13 80							.BYTE PAUSE	; PAUSE is a Row Pause Command
Source: DUMB Module.asm
  1433 2C14				ROW E_3 $08 v6 CMD4 $02
Macro: ROW [Source: DUMB Module.inc]
    33 = 0005						argnum = 5	; up to 5 arguments may be valid 
   140 2C14 78							.BYTE NOTE + INSTRUMENT + VOLUME + COMMAND_1 
   141 2C15 28							.BYTE E_3 
   142 2C16 88							.BYTE $08 + INSTRINIT
   143 2C17 60							.BYTE V6
   144 2C18 04							.BYTE CMD4 
   145 2C19 02							.BYTE $02 
Source: DUMB Module.asm
  1434 2C1A				ROW PAUSE 
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 2C1A 80							.BYTE PAUSE	; PAUSE is a Row Pause Command
Source: DUMB Module.asm
  1435 2C1B				ROW A_3 $08 vF CMD4 $00
Macro: ROW [Source: DUMB Module.inc]
    33 = 0005						argnum = 5	; up to 5 arguments may be valid 
   140 2C1B 78							.BYTE NOTE + INSTRUMENT + VOLUME + COMMAND_1 
   141 2C1C 2D							.BYTE A_3 
   142 2C1D 88							.BYTE $08 + INSTRINIT
   143 2C1E F0							.BYTE VF
   144 2C1F 04							.BYTE CMD4 
   145 2C20 00							.BYTE $00 
Source: DUMB Module.asm
  1436 2C21				ROW PAUSE 
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 2C21 80							.BYTE PAUSE	; PAUSE is a Row Pause Command
Source: DUMB Module.asm
  1437 2C22				ROW A_3 $08 v6 CMD4 $02
Macro: ROW [Source: DUMB Module.inc]
    33 = 0005						argnum = 5	; up to 5 arguments may be valid 
   140 2C22 78							.BYTE NOTE + INSTRUMENT + VOLUME + COMMAND_1 
   141 2C23 2D							.BYTE A_3 
   142 2C24 88							.BYTE $08 + INSTRINIT
   143 2C25 60							.BYTE V6
   144 2C26 04							.BYTE CMD4 
   145 2C27 02							.BYTE $02 
Source: DUMB Module.asm
  1438 2C28				ROW PAUSE 
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 2C28 80							.BYTE PAUSE	; PAUSE is a Row Pause Command
Source: DUMB Module.asm
  1439 2C29				ROW B_3 $08 vF CMD4 $00
Macro: ROW [Source: DUMB Module.inc]
    33 = 0005						argnum = 5	; up to 5 arguments may be valid 
   140 2C29 78							.BYTE NOTE + INSTRUMENT + VOLUME + COMMAND_1 
   141 2C2A 2F							.BYTE B_3 
   142 2C2B 88							.BYTE $08 + INSTRINIT
   143 2C2C F0							.BYTE VF
   144 2C2D 04							.BYTE CMD4 
   145 2C2E 00							.BYTE $00 
Source: DUMB Module.asm
  1440 2C2F				ROW PAUSE 
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 2C2F 80							.BYTE PAUSE	; PAUSE is a Row Pause Command
Source: DUMB Module.asm
  1441 2C30				ROW B_3 $08 v6 CMD4 $02
Macro: ROW [Source: DUMB Module.inc]
    33 = 0005						argnum = 5	; up to 5 arguments may be valid 
   140 2C30 78							.BYTE NOTE + INSTRUMENT + VOLUME + COMMAND_1 
   141 2C31 2F							.BYTE B_3 
   142 2C32 88							.BYTE $08 + INSTRINIT
   143 2C33 60							.BYTE V6
   144 2C34 04							.BYTE CMD4 
   145 2C35 02							.BYTE $02 
Source: DUMB Module.asm
  1442 2C36				ROW PAUSE 
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 2C36 80							.BYTE PAUSE	; PAUSE is a Row Pause Command
Source: DUMB Module.asm
  1443 2C37				ROW E_3 $08 vF CMD4 $00
Macro: ROW [Source: DUMB Module.inc]
    33 = 0005						argnum = 5	; up to 5 arguments may be valid 
   140 2C37 78							.BYTE NOTE + INSTRUMENT + VOLUME + COMMAND_1 
   141 2C38 28							.BYTE E_3 
   142 2C39 88							.BYTE $08 + INSTRINIT
   143 2C3A F0							.BYTE VF
   144 2C3B 04							.BYTE CMD4 
   145 2C3C 00							.BYTE $00 
Source: DUMB Module.asm
  1444 2C3D				ROW Fs3 $08 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2C3D 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2C3E 2A							.BYTE FS3 
   111 2C3F 88							.BYTE $08 + INSTRINIT
   112 2C40 F0							.BYTE VF 
Source: DUMB Module.asm
  1445 2C41				ROW E_3 $08 v6 CMD4 $02
Macro: ROW [Source: DUMB Module.inc]
    33 = 0005						argnum = 5	; up to 5 arguments may be valid 
   140 2C41 78							.BYTE NOTE + INSTRUMENT + VOLUME + COMMAND_1 
   141 2C42 28							.BYTE E_3 
   142 2C43 88							.BYTE $08 + INSTRINIT
   143 2C44 60							.BYTE V6
   144 2C45 04							.BYTE CMD4 
   145 2C46 02							.BYTE $02 
Source: DUMB Module.asm
  1446 2C47				ROW Fs3 $08 v6
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2C47 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2C48 2A							.BYTE FS3 
   111 2C49 88							.BYTE $08 + INSTRINIT
   112 2C4A 60							.BYTE V6 
Source: DUMB Module.asm
  1447 2C4B				ROW E_3 $08 v2 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2C4B 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2C4C 28							.BYTE E_3 
   111 2C4D 88							.BYTE $08 + INSTRINIT
   112 2C4E 20							.BYTE V2 
Source: DUMB Module.asm
  1448 2C4F				ROW Fs3 $08 v2	
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2C4F 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2C50 2A							.BYTE FS3 
   111 2C51 88							.BYTE $08 + INSTRINIT
   112 2C52 20							.BYTE V2 
Source: DUMB Module.asm
  1449 2C53				ROW A_3 $08 vF CMD4 $00
Macro: ROW [Source: DUMB Module.inc]
    33 = 0005						argnum = 5	; up to 5 arguments may be valid 
   140 2C53 78							.BYTE NOTE + INSTRUMENT + VOLUME + COMMAND_1 
   141 2C54 2D							.BYTE A_3 
   142 2C55 88							.BYTE $08 + INSTRINIT
   143 2C56 F0							.BYTE VF
   144 2C57 04							.BYTE CMD4 
   145 2C58 00							.BYTE $00 
Source: DUMB Module.asm
  1450 2C59				ROW PAUSE 
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 2C59 80							.BYTE PAUSE	; PAUSE is a Row Pause Command
Source: DUMB Module.asm
  1451 2C5A				ROW A_3 $08 v6 CMD4 $02
Macro: ROW [Source: DUMB Module.inc]
    33 = 0005						argnum = 5	; up to 5 arguments may be valid 
   140 2C5A 78							.BYTE NOTE + INSTRUMENT + VOLUME + COMMAND_1 
   141 2C5B 2D							.BYTE A_3 
   142 2C5C 88							.BYTE $08 + INSTRINIT
   143 2C5D 60							.BYTE V6
   144 2C5E 04							.BYTE CMD4 
   145 2C5F 02							.BYTE $02 
Source: DUMB Module.asm
  1452 2C60				ROW PAUSE 
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 2C60 80							.BYTE PAUSE	; PAUSE is a Row Pause Command
Source: DUMB Module.asm
  1453 2C61				ROW D_4 $08 vF CMD4 $00
Macro: ROW [Source: DUMB Module.inc]
    33 = 0005						argnum = 5	; up to 5 arguments may be valid 
   140 2C61 78							.BYTE NOTE + INSTRUMENT + VOLUME + COMMAND_1 
   141 2C62 32							.BYTE D_4 
   142 2C63 88							.BYTE $08 + INSTRINIT
   143 2C64 F0							.BYTE VF
   144 2C65 04							.BYTE CMD4 
   145 2C66 00							.BYTE $00 
Source: DUMB Module.asm
  1454 2C67				ROW PAUSE 
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 2C67 80							.BYTE PAUSE	; PAUSE is a Row Pause Command
Source: DUMB Module.asm
  1455 2C68				ROW D_4 $08 v6 CMD4 $02
Macro: ROW [Source: DUMB Module.inc]
    33 = 0005						argnum = 5	; up to 5 arguments may be valid 
   140 2C68 78							.BYTE NOTE + INSTRUMENT + VOLUME + COMMAND_1 
   141 2C69 32							.BYTE D_4 
   142 2C6A 88							.BYTE $08 + INSTRINIT
   143 2C6B 60							.BYTE V6
   144 2C6C 04							.BYTE CMD4 
   145 2C6D 02							.BYTE $02 
Source: DUMB Module.asm
  1456 2C6E				ROW PAUSE 
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 2C6E 80							.BYTE PAUSE	; PAUSE is a Row Pause Command
Source: DUMB Module.asm
  1457 2C6F				ROW D_4 $08 v2 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2C6F 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2C70 32							.BYTE D_4 
   111 2C71 88							.BYTE $08 + INSTRINIT
   112 2C72 20							.BYTE V2 
Source: DUMB Module.asm
  1458 2C73				ROW PAUSE
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 2C73 80							.BYTE PAUSE	; PAUSE is a Row Pause Command
Source: DUMB Module.asm
  1459 2C74				ROW D_4 $08 vF CMD4 $00
Macro: ROW [Source: DUMB Module.inc]
    33 = 0005						argnum = 5	; up to 5 arguments may be valid 
   140 2C74 78							.BYTE NOTE + INSTRUMENT + VOLUME + COMMAND_1 
   141 2C75 32							.BYTE D_4 
   142 2C76 88							.BYTE $08 + INSTRINIT
   143 2C77 F0							.BYTE VF
   144 2C78 04							.BYTE CMD4 
   145 2C79 00							.BYTE $00 
Source: DUMB Module.asm
  1460 2C7A				ROW Cs4 $08 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2C7A 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2C7B 31							.BYTE CS4 
   111 2C7C 88							.BYTE $08 + INSTRINIT
   112 2C7D F0							.BYTE VF 
Source: DUMB Module.asm
  1461 2C7E				ROW D_4 $08 v6 CMD4 $02
Macro: ROW [Source: DUMB Module.inc]
    33 = 0005						argnum = 5	; up to 5 arguments may be valid 
   140 2C7E 78							.BYTE NOTE + INSTRUMENT + VOLUME + COMMAND_1 
   141 2C7F 32							.BYTE D_4 
   142 2C80 88							.BYTE $08 + INSTRINIT
   143 2C81 60							.BYTE V6
   144 2C82 04							.BYTE CMD4 
   145 2C83 02							.BYTE $02 
Source: DUMB Module.asm
  1462 2C84				ROW Cs4 $08 v6
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2C84 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2C85 31							.BYTE CS4 
   111 2C86 88							.BYTE $08 + INSTRINIT
   112 2C87 60							.BYTE V6 
Source: DUMB Module.asm
  1463
  1464 2C88			PTN_28 
  1465 2C88				ROW B_3 $08 vF CMD4 $00
Macro: ROW [Source: DUMB Module.inc]
    33 = 0005						argnum = 5	; up to 5 arguments may be valid 
   140 2C88 78							.BYTE NOTE + INSTRUMENT + VOLUME + COMMAND_1 
   141 2C89 2F							.BYTE B_3 
   142 2C8A 88							.BYTE $08 + INSTRINIT
   143 2C8B F0							.BYTE VF
   144 2C8C 04							.BYTE CMD4 
   145 2C8D 00							.BYTE $00 
Source: DUMB Module.asm
  1466 2C8E				ROW PAUSE 
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 2C8E 80							.BYTE PAUSE	; PAUSE is a Row Pause Command
Source: DUMB Module.asm
  1467 2C8F				ROW B_3 $08 v6 CMD4 $02
Macro: ROW [Source: DUMB Module.inc]
    33 = 0005						argnum = 5	; up to 5 arguments may be valid 
   140 2C8F 78							.BYTE NOTE + INSTRUMENT + VOLUME + COMMAND_1 
   141 2C90 2F							.BYTE B_3 
   142 2C91 88							.BYTE $08 + INSTRINIT
   143 2C92 60							.BYTE V6
   144 2C93 04							.BYTE CMD4 
   145 2C94 02							.BYTE $02 
Source: DUMB Module.asm
  1468 2C95				ROW PAUSE 
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 2C95 80							.BYTE PAUSE	; PAUSE is a Row Pause Command
Source: DUMB Module.asm
  1469 2C96				ROW B_3 $08 v4 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2C96 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2C97 2F							.BYTE B_3 
   111 2C98 88							.BYTE $08 + INSTRINIT
   112 2C99 40							.BYTE V4 
Source: DUMB Module.asm
  1470 2C9A				ROW PAUSE 
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 2C9A 80							.BYTE PAUSE	; PAUSE is a Row Pause Command
Source: DUMB Module.asm
  1471 2C9B				ROW B_3 $08 v2 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2C9B 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2C9C 2F							.BYTE B_3 
   111 2C9D 88							.BYTE $08 + INSTRINIT
   112 2C9E 20							.BYTE V2 
Source: DUMB Module.asm
  1472 2C9F				ROW PAUSE 
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 2C9F 80							.BYTE PAUSE	; PAUSE is a Row Pause Command
Source: DUMB Module.asm
  1473 2CA0				ROW Gs3 $08 vF CMD4 $00
Macro: ROW [Source: DUMB Module.inc]
    33 = 0005						argnum = 5	; up to 5 arguments may be valid 
   140 2CA0 78							.BYTE NOTE + INSTRUMENT + VOLUME + COMMAND_1 
   141 2CA1 2C							.BYTE GS3 
   142 2CA2 88							.BYTE $08 + INSTRINIT
   143 2CA3 F0							.BYTE VF
   144 2CA4 04							.BYTE CMD4 
   145 2CA5 00							.BYTE $00 
Source: DUMB Module.asm
  1474 2CA6				ROW PAUSE 
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 2CA6 80							.BYTE PAUSE	; PAUSE is a Row Pause Command
Source: DUMB Module.asm
  1475 2CA7				ROW A_3 $08 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2CA7 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2CA8 2D							.BYTE A_3 
   111 2CA9 88							.BYTE $08 + INSTRINIT
   112 2CAA F0							.BYTE VF 
Source: DUMB Module.asm
  1476 2CAB				ROW PAUSE 
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 2CAB 80							.BYTE PAUSE	; PAUSE is a Row Pause Command
Source: DUMB Module.asm
  1477 2CAC				ROW A_3 $08 v6 CMD4 $02
Macro: ROW [Source: DUMB Module.inc]
    33 = 0005						argnum = 5	; up to 5 arguments may be valid 
   140 2CAC 78							.BYTE NOTE + INSTRUMENT + VOLUME + COMMAND_1 
   141 2CAD 2D							.BYTE A_3 
   142 2CAE 88							.BYTE $08 + INSTRINIT
   143 2CAF 60							.BYTE V6
   144 2CB0 04							.BYTE CMD4 
   145 2CB1 02							.BYTE $02 
Source: DUMB Module.asm
  1478 2CB2				ROW Fs3 $08 vF CMD4 $00
Macro: ROW [Source: DUMB Module.inc]
    33 = 0005						argnum = 5	; up to 5 arguments may be valid 
   140 2CB2 78							.BYTE NOTE + INSTRUMENT + VOLUME + COMMAND_1 
   141 2CB3 2A							.BYTE FS3 
   142 2CB4 88							.BYTE $08 + INSTRINIT
   143 2CB5 F0							.BYTE VF
   144 2CB6 04							.BYTE CMD4 
   145 2CB7 00							.BYTE $00 
Source: DUMB Module.asm
  1479 2CB8				ROW E_3 $08 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2CB8 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2CB9 28							.BYTE E_3 
   111 2CBA 88							.BYTE $08 + INSTRINIT
   112 2CBB F0							.BYTE VF 
Source: DUMB Module.asm
  1480 2CBC				ROW Fs3 $08 v6 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2CBC 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2CBD 2A							.BYTE FS3 
   111 2CBE 88							.BYTE $08 + INSTRINIT
   112 2CBF 60							.BYTE V6 
Source: DUMB Module.asm
  1481 2CC0				ROW Fs3 $08 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2CC0 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2CC1 2A							.BYTE FS3 
   111 2CC2 88							.BYTE $08 + INSTRINIT
   112 2CC3 F0							.BYTE VF 
Source: DUMB Module.asm
  1482 2CC4				ROW Fs3 $08 v2 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2CC4 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2CC5 2A							.BYTE FS3 
   111 2CC6 88							.BYTE $08 + INSTRINIT
   112 2CC7 20							.BYTE V2 
Source: DUMB Module.asm
  1483 2CC8				ROW Fs3 $08 v6 CMD4 $02 
Macro: ROW [Source: DUMB Module.inc]
    33 = 0005						argnum = 5	; up to 5 arguments may be valid 
   140 2CC8 78							.BYTE NOTE + INSTRUMENT + VOLUME + COMMAND_1 
   141 2CC9 2A							.BYTE FS3 
   142 2CCA 88							.BYTE $08 + INSTRINIT
   143 2CCB 60							.BYTE V6
   144 2CCC 04							.BYTE CMD4 
   145 2CCD 02							.BYTE $02 
Source: DUMB Module.asm
  1484 2CCE				ROW PAUSE 
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 2CCE 80							.BYTE PAUSE	; PAUSE is a Row Pause Command
Source: DUMB Module.asm
  1485 2CCF				ROW Fs3 $08 v4 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2CCF 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2CD0 2A							.BYTE FS3 
   111 2CD1 88							.BYTE $08 + INSTRINIT
   112 2CD2 40							.BYTE V4 
Source: DUMB Module.asm
  1486 2CD3				ROW PAUSE 
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 2CD3 80							.BYTE PAUSE	; PAUSE is a Row Pause Command
Source: DUMB Module.asm
  1487 2CD4				ROW Fs3 $08 v2 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2CD4 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2CD5 2A							.BYTE FS3 
   111 2CD6 88							.BYTE $08 + INSTRINIT
   112 2CD7 20							.BYTE V2 
Source: DUMB Module.asm
  1488 2CD8				ROW PAUSE 	
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 2CD8 80							.BYTE PAUSE	; PAUSE is a Row Pause Command
Source: DUMB Module.asm
  1489 2CD9				ROW B_3 $08 vF CMD4 $00
Macro: ROW [Source: DUMB Module.inc]
    33 = 0005						argnum = 5	; up to 5 arguments may be valid 
   140 2CD9 78							.BYTE NOTE + INSTRUMENT + VOLUME + COMMAND_1 
   141 2CDA 2F							.BYTE B_3 
   142 2CDB 88							.BYTE $08 + INSTRINIT
   143 2CDC F0							.BYTE VF
   144 2CDD 04							.BYTE CMD4 
   145 2CDE 00							.BYTE $00 
Source: DUMB Module.asm
  1490 2CDF				ROW PAUSE
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 2CDF 80							.BYTE PAUSE	; PAUSE is a Row Pause Command
Source: DUMB Module.asm
  1491 2CE0				ROW D_4 $08 vF
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2CE0 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2CE1 32							.BYTE D_4 
   111 2CE2 88							.BYTE $08 + INSTRINIT
   112 2CE3 F0							.BYTE VF 
Source: DUMB Module.asm
  1492 2CE4				ROW B_3 $08 vF
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2CE4 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2CE5 2F							.BYTE B_3 
   111 2CE6 88							.BYTE $08 + INSTRINIT
   112 2CE7 F0							.BYTE VF 
Source: DUMB Module.asm
  1493 2CE8				ROW D_4 $08 v6
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2CE8 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2CE9 32							.BYTE D_4 
   111 2CEA 88							.BYTE $08 + INSTRINIT
   112 2CEB 60							.BYTE V6 
Source: DUMB Module.asm
  1494 2CEC				ROW Cs4 $08 vF
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2CEC 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2CED 31							.BYTE CS4 
   111 2CEE 88							.BYTE $08 + INSTRINIT
   112 2CEF F0							.BYTE VF 
Source: DUMB Module.asm
  1495 2CF0				ROW D_4 $08 v2
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2CF0 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2CF1 32							.BYTE D_4 
   111 2CF2 88							.BYTE $08 + INSTRINIT
   112 2CF3 20							.BYTE V2 
Source: DUMB Module.asm
  1496 2CF4				ROW A_3 $08 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2CF4 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2CF5 2D							.BYTE A_3 
   111 2CF6 88							.BYTE $08 + INSTRINIT
   112 2CF7 F0							.BYTE VF 
Source: DUMB Module.asm
  1497 					
  1498 2CF8			PTN_29
  1499 2CF8				ROW B_3 $08 vF CMD4 $00
Macro: ROW [Source: DUMB Module.inc]
    33 = 0005						argnum = 5	; up to 5 arguments may be valid 
   140 2CF8 78							.BYTE NOTE + INSTRUMENT + VOLUME + COMMAND_1 
   141 2CF9 2F							.BYTE B_3 
   142 2CFA 88							.BYTE $08 + INSTRINIT
   143 2CFB F0							.BYTE VF
   144 2CFC 04							.BYTE CMD4 
   145 2CFD 00							.BYTE $00 
Source: DUMB Module.asm
  1500 2CFE				ROW PAUSE 
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 2CFE 80							.BYTE PAUSE	; PAUSE is a Row Pause Command
Source: DUMB Module.asm
  1501 2CFF				ROW B_3 $08 v6 CMD4 $02
Macro: ROW [Source: DUMB Module.inc]
    33 = 0005						argnum = 5	; up to 5 arguments may be valid 
   140 2CFF 78							.BYTE NOTE + INSTRUMENT + VOLUME + COMMAND_1 
   141 2D00 2F							.BYTE B_3 
   142 2D01 88							.BYTE $08 + INSTRINIT
   143 2D02 60							.BYTE V6
   144 2D03 04							.BYTE CMD4 
   145 2D04 02							.BYTE $02 
Source: DUMB Module.asm
  1502 2D05				ROW PAUSE 
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 2D05 80							.BYTE PAUSE	; PAUSE is a Row Pause Command
Source: DUMB Module.asm
  1503 2D06				ROW B_3 $08 v4 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2D06 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2D07 2F							.BYTE B_3 
   111 2D08 88							.BYTE $08 + INSTRINIT
   112 2D09 40							.BYTE V4 
Source: DUMB Module.asm
  1504 2D0A				ROW PAUSE 
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 2D0A 80							.BYTE PAUSE	; PAUSE is a Row Pause Command
Source: DUMB Module.asm
  1505 2D0B				ROW B_3 $08 v2 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2D0B 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2D0C 2F							.BYTE B_3 
   111 2D0D 88							.BYTE $08 + INSTRINIT
   112 2D0E 20							.BYTE V2 
Source: DUMB Module.asm
  1506 2D0F				ROW PAUSE 
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 2D0F 80							.BYTE PAUSE	; PAUSE is a Row Pause Command
Source: DUMB Module.asm
  1507 2D10				ROW Gs3 $08 vF CMD4 $00
Macro: ROW [Source: DUMB Module.inc]
    33 = 0005						argnum = 5	; up to 5 arguments may be valid 
   140 2D10 78							.BYTE NOTE + INSTRUMENT + VOLUME + COMMAND_1 
   141 2D11 2C							.BYTE GS3 
   142 2D12 88							.BYTE $08 + INSTRINIT
   143 2D13 F0							.BYTE VF
   144 2D14 04							.BYTE CMD4 
   145 2D15 00							.BYTE $00 
Source: DUMB Module.asm
  1508 2D16				ROW PAUSE 
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 2D16 80							.BYTE PAUSE	; PAUSE is a Row Pause Command
Source: DUMB Module.asm
  1509 2D17				ROW A_3 $08 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2D17 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2D18 2D							.BYTE A_3 
   111 2D19 88							.BYTE $08 + INSTRINIT
   112 2D1A F0							.BYTE VF 
Source: DUMB Module.asm
  1510 2D1B				ROW PAUSE 
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 2D1B 80							.BYTE PAUSE	; PAUSE is a Row Pause Command
Source: DUMB Module.asm
  1511 2D1C				ROW A_3 $08 v6 CMD4 $02
Macro: ROW [Source: DUMB Module.inc]
    33 = 0005						argnum = 5	; up to 5 arguments may be valid 
   140 2D1C 78							.BYTE NOTE + INSTRUMENT + VOLUME + COMMAND_1 
   141 2D1D 2D							.BYTE A_3 
   142 2D1E 88							.BYTE $08 + INSTRINIT
   143 2D1F 60							.BYTE V6
   144 2D20 04							.BYTE CMD4 
   145 2D21 02							.BYTE $02 
Source: DUMB Module.asm
  1512 2D22				ROW Fs3 $08 vF CMD4 $00
Macro: ROW [Source: DUMB Module.inc]
    33 = 0005						argnum = 5	; up to 5 arguments may be valid 
   140 2D22 78							.BYTE NOTE + INSTRUMENT + VOLUME + COMMAND_1 
   141 2D23 2A							.BYTE FS3 
   142 2D24 88							.BYTE $08 + INSTRINIT
   143 2D25 F0							.BYTE VF
   144 2D26 04							.BYTE CMD4 
   145 2D27 00							.BYTE $00 
Source: DUMB Module.asm
  1513 2D28				ROW E_3 $08 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2D28 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2D29 28							.BYTE E_3 
   111 2D2A 88							.BYTE $08 + INSTRINIT
   112 2D2B F0							.BYTE VF 
Source: DUMB Module.asm
  1514 2D2C				ROW Fs3 $08 v6 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2D2C 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2D2D 2A							.BYTE FS3 
   111 2D2E 88							.BYTE $08 + INSTRINIT
   112 2D2F 60							.BYTE V6 
Source: DUMB Module.asm
  1515 2D30				ROW Fs3 $08 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2D30 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2D31 2A							.BYTE FS3 
   111 2D32 88							.BYTE $08 + INSTRINIT
   112 2D33 F0							.BYTE VF 
Source: DUMB Module.asm
  1516 2D34				ROW Fs3 $08 v2 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2D34 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2D35 2A							.BYTE FS3 
   111 2D36 88							.BYTE $08 + INSTRINIT
   112 2D37 20							.BYTE V2 
Source: DUMB Module.asm
  1517 2D38				ROW Fs3 $08 v6 CMD4 $02 
Macro: ROW [Source: DUMB Module.inc]
    33 = 0005						argnum = 5	; up to 5 arguments may be valid 
   140 2D38 78							.BYTE NOTE + INSTRUMENT + VOLUME + COMMAND_1 
   141 2D39 2A							.BYTE FS3 
   142 2D3A 88							.BYTE $08 + INSTRINIT
   143 2D3B 60							.BYTE V6
   144 2D3C 04							.BYTE CMD4 
   145 2D3D 02							.BYTE $02 
Source: DUMB Module.asm
  1518 2D3E				ROW PAUSE 
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 2D3E 80							.BYTE PAUSE	; PAUSE is a Row Pause Command
Source: DUMB Module.asm
  1519 2D3F				ROW Fs3 $08 v4 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2D3F 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2D40 2A							.BYTE FS3 
   111 2D41 88							.BYTE $08 + INSTRINIT
   112 2D42 40							.BYTE V4 
Source: DUMB Module.asm
  1520 2D43				ROW PAUSE 
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 2D43 80							.BYTE PAUSE	; PAUSE is a Row Pause Command
Source: DUMB Module.asm
  1521 2D44				ROW Fs3 $08 v2 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2D44 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2D45 2A							.BYTE FS3 
   111 2D46 88							.BYTE $08 + INSTRINIT
   112 2D47 20							.BYTE V2 
Source: DUMB Module.asm
  1522 2D48				ROW PAUSE 	
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 2D48 80							.BYTE PAUSE	; PAUSE is a Row Pause Command
Source: DUMB Module.asm
  1523 2D49				ROW B_3 $08 vF CMD4 $00
Macro: ROW [Source: DUMB Module.inc]
    33 = 0005						argnum = 5	; up to 5 arguments may be valid 
   140 2D49 78							.BYTE NOTE + INSTRUMENT + VOLUME + COMMAND_1 
   141 2D4A 2F							.BYTE B_3 
   142 2D4B 88							.BYTE $08 + INSTRINIT
   143 2D4C F0							.BYTE VF
   144 2D4D 04							.BYTE CMD4 
   145 2D4E 00							.BYTE $00 
Source: DUMB Module.asm
  1524 2D4F				ROW PAUSE
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 2D4F 80							.BYTE PAUSE	; PAUSE is a Row Pause Command
Source: DUMB Module.asm
  1525 2D50				ROW D_4 $08 vF
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2D50 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2D51 32							.BYTE D_4 
   111 2D52 88							.BYTE $08 + INSTRINIT
   112 2D53 F0							.BYTE VF 
Source: DUMB Module.asm
  1526 2D54				ROW E_4 $08 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2D54 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2D55 34							.BYTE E_4 
   111 2D56 88							.BYTE $08 + INSTRINIT
   112 2D57 F0							.BYTE VF 
Source: DUMB Module.asm
  1527 2D58				ROW D_4 $08 v6 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2D58 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2D59 32							.BYTE D_4 
   111 2D5A 88							.BYTE $08 + INSTRINIT
   112 2D5B 60							.BYTE V6 
Source: DUMB Module.asm
  1528 2D5C				ROW Cs4 $08 vF
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2D5C 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2D5D 31							.BYTE CS4 
   111 2D5E 88							.BYTE $08 + INSTRINIT
   112 2D5F F0							.BYTE VF 
Source: DUMB Module.asm
  1529 2D60				ROW B_3 $08 vF
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2D60 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2D61 2F							.BYTE B_3 
   111 2D62 88							.BYTE $08 + INSTRINIT
   112 2D63 F0							.BYTE VF 
Source: DUMB Module.asm
  1530 2D64				ROW Cs4 $08 v6
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2D64 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2D65 31							.BYTE CS4 
   111 2D66 88							.BYTE $08 + INSTRINIT
   112 2D67 60							.BYTE V6 
Source: DUMB Module.asm
  1531
  1532 2D68			PTN_2A
  1533 2D68				ROW E_3 $08 vF CMD4 $00
Macro: ROW [Source: DUMB Module.inc]
    33 = 0005						argnum = 5	; up to 5 arguments may be valid 
   140 2D68 78							.BYTE NOTE + INSTRUMENT + VOLUME + COMMAND_1 
   141 2D69 28							.BYTE E_3 
   142 2D6A 88							.BYTE $08 + INSTRINIT
   143 2D6B F0							.BYTE VF
   144 2D6C 04							.BYTE CMD4 
   145 2D6D 00							.BYTE $00 
Source: DUMB Module.asm
  1534 2D6E				ROW PAUSE 
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 2D6E 80							.BYTE PAUSE	; PAUSE is a Row Pause Command
Source: DUMB Module.asm
  1535 2D6F				ROW E_3 $08 v6 CMD4 $02
Macro: ROW [Source: DUMB Module.inc]
    33 = 0005						argnum = 5	; up to 5 arguments may be valid 
   140 2D6F 78							.BYTE NOTE + INSTRUMENT + VOLUME + COMMAND_1 
   141 2D70 28							.BYTE E_3 
   142 2D71 88							.BYTE $08 + INSTRINIT
   143 2D72 60							.BYTE V6
   144 2D73 04							.BYTE CMD4 
   145 2D74 02							.BYTE $02 
Source: DUMB Module.asm
  1536 2D75				ROW PAUSE 
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 2D75 80							.BYTE PAUSE	; PAUSE is a Row Pause Command
Source: DUMB Module.asm
  1537 2D76				ROW A_3 $08 vF CMD4 $00
Macro: ROW [Source: DUMB Module.inc]
    33 = 0005						argnum = 5	; up to 5 arguments may be valid 
   140 2D76 78							.BYTE NOTE + INSTRUMENT + VOLUME + COMMAND_1 
   141 2D77 2D							.BYTE A_3 
   142 2D78 88							.BYTE $08 + INSTRINIT
   143 2D79 F0							.BYTE VF
   144 2D7A 04							.BYTE CMD4 
   145 2D7B 00							.BYTE $00 
Source: DUMB Module.asm
  1538 2D7C				ROW PAUSE 
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 2D7C 80							.BYTE PAUSE	; PAUSE is a Row Pause Command
Source: DUMB Module.asm
  1539 2D7D				ROW A_3 $08 v6 CMD4 $02
Macro: ROW [Source: DUMB Module.inc]
    33 = 0005						argnum = 5	; up to 5 arguments may be valid 
   140 2D7D 78							.BYTE NOTE + INSTRUMENT + VOLUME + COMMAND_1 
   141 2D7E 2D							.BYTE A_3 
   142 2D7F 88							.BYTE $08 + INSTRINIT
   143 2D80 60							.BYTE V6
   144 2D81 04							.BYTE CMD4 
   145 2D82 02							.BYTE $02 
Source: DUMB Module.asm
  1540 2D83				ROW PAUSE 
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 2D83 80							.BYTE PAUSE	; PAUSE is a Row Pause Command
Source: DUMB Module.asm
  1541 2D84				ROW B_3 $08 vF CMD4 $00
Macro: ROW [Source: DUMB Module.inc]
    33 = 0005						argnum = 5	; up to 5 arguments may be valid 
   140 2D84 78							.BYTE NOTE + INSTRUMENT + VOLUME + COMMAND_1 
   141 2D85 2F							.BYTE B_3 
   142 2D86 88							.BYTE $08 + INSTRINIT
   143 2D87 F0							.BYTE VF
   144 2D88 04							.BYTE CMD4 
   145 2D89 00							.BYTE $00 
Source: DUMB Module.asm
  1542 2D8A				ROW PAUSE 
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 2D8A 80							.BYTE PAUSE	; PAUSE is a Row Pause Command
Source: DUMB Module.asm
  1543 2D8B				ROW Fs3 $08 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2D8B 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2D8C 2A							.BYTE FS3 
   111 2D8D 88							.BYTE $08 + INSTRINIT
   112 2D8E F0							.BYTE VF 
Source: DUMB Module.asm
  1544 2D8F				ROW PAUSE 
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 2D8F 80							.BYTE PAUSE	; PAUSE is a Row Pause Command
Source: DUMB Module.asm
  1545 2D90				ROW E_3 $08 vF CMD4 $00
Macro: ROW [Source: DUMB Module.inc]
    33 = 0005						argnum = 5	; up to 5 arguments may be valid 
   140 2D90 78							.BYTE NOTE + INSTRUMENT + VOLUME + COMMAND_1 
   141 2D91 28							.BYTE E_3 
   142 2D92 88							.BYTE $08 + INSTRINIT
   143 2D93 F0							.BYTE VF
   144 2D94 04							.BYTE CMD4 
   145 2D95 00							.BYTE $00 
Source: DUMB Module.asm
  1546 2D96				ROW Fs3 $08 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2D96 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2D97 2A							.BYTE FS3 
   111 2D98 88							.BYTE $08 + INSTRINIT
   112 2D99 F0							.BYTE VF 
Source: DUMB Module.asm
  1547 2D9A				ROW E_3 $08 v6 CMD4 $02
Macro: ROW [Source: DUMB Module.inc]
    33 = 0005						argnum = 5	; up to 5 arguments may be valid 
   140 2D9A 78							.BYTE NOTE + INSTRUMENT + VOLUME + COMMAND_1 
   141 2D9B 28							.BYTE E_3 
   142 2D9C 88							.BYTE $08 + INSTRINIT
   143 2D9D 60							.BYTE V6
   144 2D9E 04							.BYTE CMD4 
   145 2D9F 02							.BYTE $02 
Source: DUMB Module.asm
  1548 2DA0				ROW Fs3 $08 v6
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2DA0 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2DA1 2A							.BYTE FS3 
   111 2DA2 88							.BYTE $08 + INSTRINIT
   112 2DA3 60							.BYTE V6 
Source: DUMB Module.asm
  1549 2DA4				ROW E_3 $08 v2 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2DA4 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2DA5 28							.BYTE E_3 
   111 2DA6 88							.BYTE $08 + INSTRINIT
   112 2DA7 20							.BYTE V2 
Source: DUMB Module.asm
  1550 2DA8				ROW Fs3 $08 v2	
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2DA8 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2DA9 2A							.BYTE FS3 
   111 2DAA 88							.BYTE $08 + INSTRINIT
   112 2DAB 20							.BYTE V2 
Source: DUMB Module.asm
  1551 2DAC				ROW E_3 $08 vF CMD4 $00
Macro: ROW [Source: DUMB Module.inc]
    33 = 0005						argnum = 5	; up to 5 arguments may be valid 
   140 2DAC 78							.BYTE NOTE + INSTRUMENT + VOLUME + COMMAND_1 
   141 2DAD 28							.BYTE E_3 
   142 2DAE 88							.BYTE $08 + INSTRINIT
   143 2DAF F0							.BYTE VF
   144 2DB0 04							.BYTE CMD4 
   145 2DB1 00							.BYTE $00 
Source: DUMB Module.asm
  1552 2DB2				ROW PAUSE 
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 2DB2 80							.BYTE PAUSE	; PAUSE is a Row Pause Command
Source: DUMB Module.asm
  1553 2DB3				ROW E_3 $08 v6 CMD4 $02
Macro: ROW [Source: DUMB Module.inc]
    33 = 0005						argnum = 5	; up to 5 arguments may be valid 
   140 2DB3 78							.BYTE NOTE + INSTRUMENT + VOLUME + COMMAND_1 
   141 2DB4 28							.BYTE E_3 
   142 2DB5 88							.BYTE $08 + INSTRINIT
   143 2DB6 60							.BYTE V6
   144 2DB7 04							.BYTE CMD4 
   145 2DB8 02							.BYTE $02 
Source: DUMB Module.asm
  1554 2DB9				ROW A_3 $08 vF CMD4 $00
Macro: ROW [Source: DUMB Module.inc]
    33 = 0005						argnum = 5	; up to 5 arguments may be valid 
   140 2DB9 78							.BYTE NOTE + INSTRUMENT + VOLUME + COMMAND_1 
   141 2DBA 2D							.BYTE A_3 
   142 2DBB 88							.BYTE $08 + INSTRINIT
   143 2DBC F0							.BYTE VF
   144 2DBD 04							.BYTE CMD4 
   145 2DBE 00							.BYTE $00 
Source: DUMB Module.asm
  1555 2DBF				ROW E_3 $08 v2
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2DBF 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2DC0 28							.BYTE E_3 
   111 2DC1 88							.BYTE $08 + INSTRINIT
   112 2DC2 20							.BYTE V2 
Source: DUMB Module.asm
  1556 2DC3				ROW A_3 $08 v6 CMD4 $02
Macro: ROW [Source: DUMB Module.inc]
    33 = 0005						argnum = 5	; up to 5 arguments may be valid 
   140 2DC3 78							.BYTE NOTE + INSTRUMENT + VOLUME + COMMAND_1 
   141 2DC4 2D							.BYTE A_3 
   142 2DC5 88							.BYTE $08 + INSTRINIT
   143 2DC6 60							.BYTE V6
   144 2DC7 04							.BYTE CMD4 
   145 2DC8 02							.BYTE $02 
Source: DUMB Module.asm
  1557 2DC9				ROW Gs3 $08 vF CMD4 $00
Macro: ROW [Source: DUMB Module.inc]
    33 = 0005						argnum = 5	; up to 5 arguments may be valid 
   140 2DC9 78							.BYTE NOTE + INSTRUMENT + VOLUME + COMMAND_1 
   141 2DCA 2C							.BYTE GS3 
   142 2DCB 88							.BYTE $08 + INSTRINIT
   143 2DCC F0							.BYTE VF
   144 2DCD 04							.BYTE CMD4 
   145 2DCE 00							.BYTE $00 
Source: DUMB Module.asm
  1558 2DCF				ROW A_3 $08 v2
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2DCF 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2DD0 2D							.BYTE A_3 
   111 2DD1 88							.BYTE $08 + INSTRINIT
   112 2DD2 20							.BYTE V2 
Source: DUMB Module.asm
  1559 2DD3				ROW Fs3 $08 vF CMD4 $00
Macro: ROW [Source: DUMB Module.inc]
    33 = 0005						argnum = 5	; up to 5 arguments may be valid 
   140 2DD3 78							.BYTE NOTE + INSTRUMENT + VOLUME + COMMAND_1 
   141 2DD4 2A							.BYTE FS3 
   142 2DD5 88							.BYTE $08 + INSTRINIT
   143 2DD6 F0							.BYTE VF
   144 2DD7 04							.BYTE CMD4 
   145 2DD8 00							.BYTE $00 
Source: DUMB Module.asm
  1560 2DD9				ROW PAUSE 
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 2DD9 80							.BYTE PAUSE	; PAUSE is a Row Pause Command
Source: DUMB Module.asm
  1561 2DDA				ROW Fs3 $08 v6 CMD4 $02
Macro: ROW [Source: DUMB Module.inc]
    33 = 0005						argnum = 5	; up to 5 arguments may be valid 
   140 2DDA 78							.BYTE NOTE + INSTRUMENT + VOLUME + COMMAND_1 
   141 2DDB 2A							.BYTE FS3 
   142 2DDC 88							.BYTE $08 + INSTRINIT
   143 2DDD 60							.BYTE V6
   144 2DDE 04							.BYTE CMD4 
   145 2DDF 02							.BYTE $02 
Source: DUMB Module.asm
  1562 2DE0				ROW PAUSE 
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 2DE0 80							.BYTE PAUSE	; PAUSE is a Row Pause Command
Source: DUMB Module.asm
  1563 2DE1				ROW Fs3 $08 v2 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2DE1 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2DE2 2A							.BYTE FS3 
   111 2DE3 88							.BYTE $08 + INSTRINIT
   112 2DE4 20							.BYTE V2 
Source: DUMB Module.asm
  1564 2DE5				ROW PAUSE 
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 2DE5 80							.BYTE PAUSE	; PAUSE is a Row Pause Command
Source: DUMB Module.asm
  1565
  1566 2DE6			PTN_2B
  1567 2DE6				ROW E_3 $08 vF CMD4 $00
Macro: ROW [Source: DUMB Module.inc]
    33 = 0005						argnum = 5	; up to 5 arguments may be valid 
   140 2DE6 78							.BYTE NOTE + INSTRUMENT + VOLUME + COMMAND_1 
   141 2DE7 28							.BYTE E_3 
   142 2DE8 88							.BYTE $08 + INSTRINIT
   143 2DE9 F0							.BYTE VF
   144 2DEA 04							.BYTE CMD4 
   145 2DEB 00							.BYTE $00 
Source: DUMB Module.asm
  1568 2DEC				ROW PAUSE
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 2DEC 80							.BYTE PAUSE	; PAUSE is a Row Pause Command
Source: DUMB Module.asm
  1569 2DED				ROW D_4 $08 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2DED 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2DEE 32							.BYTE D_4 
   111 2DEF 88							.BYTE $08 + INSTRINIT
   112 2DF0 F0							.BYTE VF 
Source: DUMB Module.asm
  1570 2DF1				ROW PAUSE 
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 2DF1 80							.BYTE PAUSE	; PAUSE is a Row Pause Command
Source: DUMB Module.asm
  1571 2DF2				ROW E_4 $08 vF
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2DF2 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2DF3 34							.BYTE E_4 
   111 2DF4 88							.BYTE $08 + INSTRINIT
   112 2DF5 F0							.BYTE VF 
Source: DUMB Module.asm
  1572 2DF6				ROW D_4 $08 vF 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2DF6 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2DF7 32							.BYTE D_4 
   111 2DF8 88							.BYTE $08 + INSTRINIT
   112 2DF9 F0							.BYTE VF 
Source: DUMB Module.asm
  1573 2DFA				ROW E_4 $08 v6 CMD4 $02
Macro: ROW [Source: DUMB Module.inc]
    33 = 0005						argnum = 5	; up to 5 arguments may be valid 
   140 2DFA 78							.BYTE NOTE + INSTRUMENT + VOLUME + COMMAND_1 
   141 2DFB 34							.BYTE E_4 
   142 2DFC 88							.BYTE $08 + INSTRINIT
   143 2DFD 60							.BYTE V6
   144 2DFE 04							.BYTE CMD4 
   145 2DFF 02							.BYTE $02 
Source: DUMB Module.asm
  1574 2E00				ROW D_4 $08 v6 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2E00 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2E01 32							.BYTE D_4 
   111 2E02 88							.BYTE $08 + INSTRINIT
   112 2E03 60							.BYTE V6 
Source: DUMB Module.asm
  1575 2E04				ROW Cs4 $08 vF CMD4 $00
Macro: ROW [Source: DUMB Module.inc]
    33 = 0005						argnum = 5	; up to 5 arguments may be valid 
   140 2E04 78							.BYTE NOTE + INSTRUMENT + VOLUME + COMMAND_1 
   141 2E05 31							.BYTE CS4 
   142 2E06 88							.BYTE $08 + INSTRINIT
   143 2E07 F0							.BYTE VF
   144 2E08 04							.BYTE CMD4 
   145 2E09 00							.BYTE $00 
Source: DUMB Module.asm
  1576 2E0A				ROW D_4 $08 v2 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2E0A 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2E0B 32							.BYTE D_4 
   111 2E0C 88							.BYTE $08 + INSTRINIT
   112 2E0D 20							.BYTE V2 
Source: DUMB Module.asm
  1577 2E0E				ROW Cs4 $08 v6 CMD4 $02
Macro: ROW [Source: DUMB Module.inc]
    33 = 0005						argnum = 5	; up to 5 arguments may be valid 
   140 2E0E 78							.BYTE NOTE + INSTRUMENT + VOLUME + COMMAND_1 
   141 2E0F 31							.BYTE CS4 
   142 2E10 88							.BYTE $08 + INSTRINIT
   143 2E11 60							.BYTE V6
   144 2E12 04							.BYTE CMD4 
   145 2E13 02							.BYTE $02 
Source: DUMB Module.asm
  1578 2E14				ROW B_3 $08 vF CMD4 $00 
Macro: ROW [Source: DUMB Module.inc]
    33 = 0005						argnum = 5	; up to 5 arguments may be valid 
   140 2E14 78							.BYTE NOTE + INSTRUMENT + VOLUME + COMMAND_1 
   141 2E15 2F							.BYTE B_3 
   142 2E16 88							.BYTE $08 + INSTRINIT
   143 2E17 F0							.BYTE VF
   144 2E18 04							.BYTE CMD4 
   145 2E19 00							.BYTE $00 
Source: DUMB Module.asm
  1579 2E1A				ROW Cs4 $08 v2 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2E1A 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2E1B 31							.BYTE CS4 
   111 2E1C 88							.BYTE $08 + INSTRINIT
   112 2E1D 20							.BYTE V2 
Source: DUMB Module.asm
  1580 2E1E				ROW A_3 $08 vF
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2E1E 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2E1F 2D							.BYTE A_3 
   111 2E20 88							.BYTE $08 + INSTRINIT
   112 2E21 F0							.BYTE VF 
Source: DUMB Module.asm
  1581 2E22				ROW PAUSE 
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 2E22 80							.BYTE PAUSE	; PAUSE is a Row Pause Command
Source: DUMB Module.asm
  1582 2E23				ROW Cs4 $08 vF
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2E23 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2E24 31							.BYTE CS4 
   111 2E25 88							.BYTE $08 + INSTRINIT
   112 2E26 F0							.BYTE VF 
Source: DUMB Module.asm
  1583 2E27				ROW B_3 $08 vF
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2E27 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2E28 2F							.BYTE B_3 
   111 2E29 88							.BYTE $08 + INSTRINIT
   112 2E2A F0							.BYTE VF 
Source: DUMB Module.asm
  1584 2E2B				ROW Cs4 $08 v6 CMD4 $02 
Macro: ROW [Source: DUMB Module.inc]
    33 = 0005						argnum = 5	; up to 5 arguments may be valid 
   140 2E2B 78							.BYTE NOTE + INSTRUMENT + VOLUME + COMMAND_1 
   141 2E2C 31							.BYTE CS4 
   142 2E2D 88							.BYTE $08 + INSTRINIT
   143 2E2E 60							.BYTE V6
   144 2E2F 04							.BYTE CMD4 
   145 2E30 02							.BYTE $02 
Source: DUMB Module.asm
  1585 2E31				ROW B_3 $08 v6
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2E31 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2E32 2F							.BYTE B_3 
   111 2E33 88							.BYTE $08 + INSTRINIT
   112 2E34 60							.BYTE V6 
Source: DUMB Module.asm
  1586 2E35				ROW Cs4 $08 v2
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2E35 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2E36 31							.BYTE CS4 
   111 2E37 88							.BYTE $08 + INSTRINIT
   112 2E38 20							.BYTE V2 
Source: DUMB Module.asm
  1587 2E39				ROW B_3 $08 v2
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2E39 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2E3A 2F							.BYTE B_3 
   111 2E3B 88							.BYTE $08 + INSTRINIT
   112 2E3C 20							.BYTE V2 
Source: DUMB Module.asm
  1588 2E3D				ROW Cs4 $08 v1
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2E3D 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2E3E 31							.BYTE CS4 
   111 2E3F 88							.BYTE $08 + INSTRINIT
   112 2E40 10							.BYTE V1 
Source: DUMB Module.asm
  1589 2E41				ROW B_3 $08 v1
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2E41 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2E42 2F							.BYTE B_3 
   111 2E43 88							.BYTE $08 + INSTRINIT
   112 2E44 10							.BYTE V1 
Source: DUMB Module.asm
  1590 2E45				ROW Cs4 $08 v4
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2E45 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2E46 31							.BYTE CS4 
   111 2E47 88							.BYTE $08 + INSTRINIT
   112 2E48 40							.BYTE V4 
Source: DUMB Module.asm
  1591 2E49				ROW B_3 $08 v4
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2E49 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2E4A 2F							.BYTE B_3 
   111 2E4B 88							.BYTE $08 + INSTRINIT
   112 2E4C 40							.BYTE V4 
Source: DUMB Module.asm
  1592 2E4D				ROW Cs4 $08 v2
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2E4D 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2E4E 31							.BYTE CS4 
   111 2E4F 88							.BYTE $08 + INSTRINIT
   112 2E50 20							.BYTE V2 
Source: DUMB Module.asm
  1593 2E51				ROW B_3 $08 v2
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2E51 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2E52 2F							.BYTE B_3 
   111 2E53 88							.BYTE $08 + INSTRINIT
   112 2E54 20							.BYTE V2 
Source: DUMB Module.asm
  1594 2E55				ROW Cs4 $08 v1
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2E55 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2E56 31							.BYTE CS4 
   111 2E57 88							.BYTE $08 + INSTRINIT
   112 2E58 10							.BYTE V1 
Source: DUMB Module.asm
  1595 2E59				ROW B_3 $08 v1
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2E59 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2E5A 2F							.BYTE B_3 
   111 2E5B 88							.BYTE $08 + INSTRINIT
   112 2E5C 10							.BYTE V1 
Source: DUMB Module.asm
  1596 2E5D				END_PATTERN
Macro: END_PATTERN [Source: DUMB Module.inc]
     2 2E5D 00				.BYTE $00			; Pattern End 
Source: DUMB Module.asm
  1597
  1598 2E5E			PTN_2C
  1599 2E5E				ROW E_3 $07 vA CMD4 $00
Macro: ROW [Source: DUMB Module.inc]
    33 = 0005						argnum = 5	; up to 5 arguments may be valid 
   140 2E5E 78							.BYTE NOTE + INSTRUMENT + VOLUME + COMMAND_1 
   141 2E5F 28							.BYTE E_3 
   142 2E60 87							.BYTE $07 + INSTRINIT
   143 2E61 A0							.BYTE VA
   144 2E62 04							.BYTE CMD4 
   145 2E63 00							.BYTE $00 
Source: DUMB Module.asm
  1600 2E64				ROW PAUSE 
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 2E64 80							.BYTE PAUSE	; PAUSE is a Row Pause Command
Source: DUMB Module.asm
  1601 2E65				ROW E_3 $07 v3 CMD4 $02
Macro: ROW [Source: DUMB Module.inc]
    33 = 0005						argnum = 5	; up to 5 arguments may be valid 
   140 2E65 78							.BYTE NOTE + INSTRUMENT + VOLUME + COMMAND_1 
   141 2E66 28							.BYTE E_3 
   142 2E67 87							.BYTE $07 + INSTRINIT
   143 2E68 30							.BYTE V3
   144 2E69 04							.BYTE CMD4 
   145 2E6A 02							.BYTE $02 
Source: DUMB Module.asm
  1602 2E6B				ROW PAUSE 
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 2E6B 80							.BYTE PAUSE	; PAUSE is a Row Pause Command
Source: DUMB Module.asm
  1603 2E6C				ROW A_3 $07 vA CMD4 $00
Macro: ROW [Source: DUMB Module.inc]
    33 = 0005						argnum = 5	; up to 5 arguments may be valid 
   140 2E6C 78							.BYTE NOTE + INSTRUMENT + VOLUME + COMMAND_1 
   141 2E6D 2D							.BYTE A_3 
   142 2E6E 87							.BYTE $07 + INSTRINIT
   143 2E6F A0							.BYTE VA
   144 2E70 04							.BYTE CMD4 
   145 2E71 00							.BYTE $00 
Source: DUMB Module.asm
  1604 2E72				ROW PAUSE 
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 2E72 80							.BYTE PAUSE	; PAUSE is a Row Pause Command
Source: DUMB Module.asm
  1605 2E73				ROW A_3 $07 v3 CMD4 $02
Macro: ROW [Source: DUMB Module.inc]
    33 = 0005						argnum = 5	; up to 5 arguments may be valid 
   140 2E73 78							.BYTE NOTE + INSTRUMENT + VOLUME + COMMAND_1 
   141 2E74 2D							.BYTE A_3 
   142 2E75 87							.BYTE $07 + INSTRINIT
   143 2E76 30							.BYTE V3
   144 2E77 04							.BYTE CMD4 
   145 2E78 02							.BYTE $02 
Source: DUMB Module.asm
  1606 2E79				ROW PAUSE 
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 2E79 80							.BYTE PAUSE	; PAUSE is a Row Pause Command
Source: DUMB Module.asm
  1607 2E7A				ROW B_3 $07 vA CMD4 $00
Macro: ROW [Source: DUMB Module.inc]
    33 = 0005						argnum = 5	; up to 5 arguments may be valid 
   140 2E7A 78							.BYTE NOTE + INSTRUMENT + VOLUME + COMMAND_1 
   141 2E7B 2F							.BYTE B_3 
   142 2E7C 87							.BYTE $07 + INSTRINIT
   143 2E7D A0							.BYTE VA
   144 2E7E 04							.BYTE CMD4 
   145 2E7F 00							.BYTE $00 
Source: DUMB Module.asm
  1608 2E80				ROW PAUSE 
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 2E80 80							.BYTE PAUSE	; PAUSE is a Row Pause Command
Source: DUMB Module.asm
  1609 2E81				ROW B_3 $07 v3 CMD4 $02
Macro: ROW [Source: DUMB Module.inc]
    33 = 0005						argnum = 5	; up to 5 arguments may be valid 
   140 2E81 78							.BYTE NOTE + INSTRUMENT + VOLUME + COMMAND_1 
   141 2E82 2F							.BYTE B_3 
   142 2E83 87							.BYTE $07 + INSTRINIT
   143 2E84 30							.BYTE V3
   144 2E85 04							.BYTE CMD4 
   145 2E86 02							.BYTE $02 
Source: DUMB Module.asm
  1610 2E87				ROW PAUSE 
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 2E87 80							.BYTE PAUSE	; PAUSE is a Row Pause Command
Source: DUMB Module.asm
  1611 2E88				ROW E_3 $07 vA CMD4 $00
Macro: ROW [Source: DUMB Module.inc]
    33 = 0005						argnum = 5	; up to 5 arguments may be valid 
   140 2E88 78							.BYTE NOTE + INSTRUMENT + VOLUME + COMMAND_1 
   141 2E89 28							.BYTE E_3 
   142 2E8A 87							.BYTE $07 + INSTRINIT
   143 2E8B A0							.BYTE VA
   144 2E8C 04							.BYTE CMD4 
   145 2E8D 00							.BYTE $00 
Source: DUMB Module.asm
  1612 2E8E				ROW Fs3 $07 vA 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2E8E 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2E8F 2A							.BYTE FS3 
   111 2E90 87							.BYTE $07 + INSTRINIT
   112 2E91 A0							.BYTE VA 
Source: DUMB Module.asm
  1613 2E92				ROW E_3 $07 v3 CMD4 $02
Macro: ROW [Source: DUMB Module.inc]
    33 = 0005						argnum = 5	; up to 5 arguments may be valid 
   140 2E92 78							.BYTE NOTE + INSTRUMENT + VOLUME + COMMAND_1 
   141 2E93 28							.BYTE E_3 
   142 2E94 87							.BYTE $07 + INSTRINIT
   143 2E95 30							.BYTE V3
   144 2E96 04							.BYTE CMD4 
   145 2E97 02							.BYTE $02 
Source: DUMB Module.asm
  1614 2E98				ROW Fs3 $07 v3
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2E98 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2E99 2A							.BYTE FS3 
   111 2E9A 87							.BYTE $07 + INSTRINIT
   112 2E9B 30							.BYTE V3 
Source: DUMB Module.asm
  1615 2E9C				ROW E_3 $07 v1 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2E9C 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2E9D 28							.BYTE E_3 
   111 2E9E 87							.BYTE $07 + INSTRINIT
   112 2E9F 10							.BYTE V1 
Source: DUMB Module.asm
  1616 2EA0				ROW Fs3 $07 v1	
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2EA0 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2EA1 2A							.BYTE FS3 
   111 2EA2 87							.BYTE $07 + INSTRINIT
   112 2EA3 10							.BYTE V1 
Source: DUMB Module.asm
  1617 2EA4				ROW E_3 $07 vA CMD4 $00
Macro: ROW [Source: DUMB Module.inc]
    33 = 0005						argnum = 5	; up to 5 arguments may be valid 
   140 2EA4 78							.BYTE NOTE + INSTRUMENT + VOLUME + COMMAND_1 
   141 2EA5 28							.BYTE E_3 
   142 2EA6 87							.BYTE $07 + INSTRINIT
   143 2EA7 A0							.BYTE VA
   144 2EA8 04							.BYTE CMD4 
   145 2EA9 00							.BYTE $00 
Source: DUMB Module.asm
  1618 2EAA				ROW PAUSE 
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 2EAA 80							.BYTE PAUSE	; PAUSE is a Row Pause Command
Source: DUMB Module.asm
  1619 2EAB				ROW E_3 $07 v3 CMD4 $02
Macro: ROW [Source: DUMB Module.inc]
    33 = 0005						argnum = 5	; up to 5 arguments may be valid 
   140 2EAB 78							.BYTE NOTE + INSTRUMENT + VOLUME + COMMAND_1 
   141 2EAC 28							.BYTE E_3 
   142 2EAD 87							.BYTE $07 + INSTRINIT
   143 2EAE 30							.BYTE V3
   144 2EAF 04							.BYTE CMD4 
   145 2EB0 02							.BYTE $02 
Source: DUMB Module.asm
  1620 2EB1				ROW PAUSE 
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 2EB1 80							.BYTE PAUSE	; PAUSE is a Row Pause Command
Source: DUMB Module.asm
  1621 2EB2				ROW A_3 $07 vA CMD4 $00
Macro: ROW [Source: DUMB Module.inc]
    33 = 0005						argnum = 5	; up to 5 arguments may be valid 
   140 2EB2 78							.BYTE NOTE + INSTRUMENT + VOLUME + COMMAND_1 
   141 2EB3 2D							.BYTE A_3 
   142 2EB4 87							.BYTE $07 + INSTRINIT
   143 2EB5 A0							.BYTE VA
   144 2EB6 04							.BYTE CMD4 
   145 2EB7 00							.BYTE $00 
Source: DUMB Module.asm
  1622 2EB8				ROW PAUSE 
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 2EB8 80							.BYTE PAUSE	; PAUSE is a Row Pause Command
Source: DUMB Module.asm
  1623 2EB9				ROW A_3 $07 v3 CMD4 $02
Macro: ROW [Source: DUMB Module.inc]
    33 = 0005						argnum = 5	; up to 5 arguments may be valid 
   140 2EB9 78							.BYTE NOTE + INSTRUMENT + VOLUME + COMMAND_1 
   141 2EBA 2D							.BYTE A_3 
   142 2EBB 87							.BYTE $07 + INSTRINIT
   143 2EBC 30							.BYTE V3
   144 2EBD 04							.BYTE CMD4 
   145 2EBE 02							.BYTE $02 
Source: DUMB Module.asm
  1624 2EBF				ROW PAUSE 
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 2EBF 80							.BYTE PAUSE	; PAUSE is a Row Pause Command
Source: DUMB Module.asm
  1625 2EC0				ROW Cs4 $07 vA CMD4 $00
Macro: ROW [Source: DUMB Module.inc]
    33 = 0005						argnum = 5	; up to 5 arguments may be valid 
   140 2EC0 78							.BYTE NOTE + INSTRUMENT + VOLUME + COMMAND_1 
   141 2EC1 31							.BYTE CS4 
   142 2EC2 87							.BYTE $07 + INSTRINIT
   143 2EC3 A0							.BYTE VA
   144 2EC4 04							.BYTE CMD4 
   145 2EC5 00							.BYTE $00 
Source: DUMB Module.asm
  1626 2EC6				ROW B_3 $07 vA 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2EC6 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2EC7 2F							.BYTE B_3 
   111 2EC8 87							.BYTE $07 + INSTRINIT
   112 2EC9 A0							.BYTE VA 
Source: DUMB Module.asm
  1627 2ECA				ROW Cs4 $07 v3 CMD4 $02
Macro: ROW [Source: DUMB Module.inc]
    33 = 0005						argnum = 5	; up to 5 arguments may be valid 
   140 2ECA 78							.BYTE NOTE + INSTRUMENT + VOLUME + COMMAND_1 
   141 2ECB 31							.BYTE CS4 
   142 2ECC 87							.BYTE $07 + INSTRINIT
   143 2ECD 30							.BYTE V3
   144 2ECE 04							.BYTE CMD4 
   145 2ECF 02							.BYTE $02 
Source: DUMB Module.asm
  1628 2ED0				ROW B_3 $07 v3
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2ED0 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2ED1 2F							.BYTE B_3 
   111 2ED2 87							.BYTE $07 + INSTRINIT
   112 2ED3 30							.BYTE V3 
Source: DUMB Module.asm
  1629 2ED4				ROW Cs4 $07 v1 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2ED4 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2ED5 31							.BYTE CS4 
   111 2ED6 87							.BYTE $07 + INSTRINIT
   112 2ED7 10							.BYTE V1 
Source: DUMB Module.asm
  1630 2ED8				ROW B_3 $07 v1	
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2ED8 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2ED9 2F							.BYTE B_3 
   111 2EDA 87							.BYTE $07 + INSTRINIT
   112 2EDB 10							.BYTE V1 
Source: DUMB Module.asm
  1631
  1632 2EDC			PTN_2D
  1633 2EDC				ROW E_3 $07 vA CMD4 $00
Macro: ROW [Source: DUMB Module.inc]
    33 = 0005						argnum = 5	; up to 5 arguments may be valid 
   140 2EDC 78							.BYTE NOTE + INSTRUMENT + VOLUME + COMMAND_1 
   141 2EDD 28							.BYTE E_3 
   142 2EDE 87							.BYTE $07 + INSTRINIT
   143 2EDF A0							.BYTE VA
   144 2EE0 04							.BYTE CMD4 
   145 2EE1 00							.BYTE $00 
Source: DUMB Module.asm
  1634 2EE2				ROW PAUSE 
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 2EE2 80							.BYTE PAUSE	; PAUSE is a Row Pause Command
Source: DUMB Module.asm
  1635 2EE3				ROW E_3 $07 v3 CMD4 $02
Macro: ROW [Source: DUMB Module.inc]
    33 = 0005						argnum = 5	; up to 5 arguments may be valid 
   140 2EE3 78							.BYTE NOTE + INSTRUMENT + VOLUME + COMMAND_1 
   141 2EE4 28							.BYTE E_3 
   142 2EE5 87							.BYTE $07 + INSTRINIT
   143 2EE6 30							.BYTE V3
   144 2EE7 04							.BYTE CMD4 
   145 2EE8 02							.BYTE $02 
Source: DUMB Module.asm
  1636 2EE9				ROW PAUSE 
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 2EE9 80							.BYTE PAUSE	; PAUSE is a Row Pause Command
Source: DUMB Module.asm
  1637 2EEA				ROW A_3 $07 vA CMD4 $00
Macro: ROW [Source: DUMB Module.inc]
    33 = 0005						argnum = 5	; up to 5 arguments may be valid 
   140 2EEA 78							.BYTE NOTE + INSTRUMENT + VOLUME + COMMAND_1 
   141 2EEB 2D							.BYTE A_3 
   142 2EEC 87							.BYTE $07 + INSTRINIT
   143 2EED A0							.BYTE VA
   144 2EEE 04							.BYTE CMD4 
   145 2EEF 00							.BYTE $00 
Source: DUMB Module.asm
  1638 2EF0				ROW PAUSE 
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 2EF0 80							.BYTE PAUSE	; PAUSE is a Row Pause Command
Source: DUMB Module.asm
  1639 2EF1				ROW A_3 $07 v3 CMD4 $02
Macro: ROW [Source: DUMB Module.inc]
    33 = 0005						argnum = 5	; up to 5 arguments may be valid 
   140 2EF1 78							.BYTE NOTE + INSTRUMENT + VOLUME + COMMAND_1 
   141 2EF2 2D							.BYTE A_3 
   142 2EF3 87							.BYTE $07 + INSTRINIT
   143 2EF4 30							.BYTE V3
   144 2EF5 04							.BYTE CMD4 
   145 2EF6 02							.BYTE $02 
Source: DUMB Module.asm
  1640 2EF7				ROW PAUSE 
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 2EF7 80							.BYTE PAUSE	; PAUSE is a Row Pause Command
Source: DUMB Module.asm
  1641 2EF8				ROW B_3 $07 vA CMD4 $00
Macro: ROW [Source: DUMB Module.inc]
    33 = 0005						argnum = 5	; up to 5 arguments may be valid 
   140 2EF8 78							.BYTE NOTE + INSTRUMENT + VOLUME + COMMAND_1 
   141 2EF9 2F							.BYTE B_3 
   142 2EFA 87							.BYTE $07 + INSTRINIT
   143 2EFB A0							.BYTE VA
   144 2EFC 04							.BYTE CMD4 
   145 2EFD 00							.BYTE $00 
Source: DUMB Module.asm
  1642 2EFE				ROW PAUSE 
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 2EFE 80							.BYTE PAUSE	; PAUSE is a Row Pause Command
Source: DUMB Module.asm
  1643 2EFF				ROW B_3 $07 v3 CMD4 $02
Macro: ROW [Source: DUMB Module.inc]
    33 = 0005						argnum = 5	; up to 5 arguments may be valid 
   140 2EFF 78							.BYTE NOTE + INSTRUMENT + VOLUME + COMMAND_1 
   141 2F00 2F							.BYTE B_3 
   142 2F01 87							.BYTE $07 + INSTRINIT
   143 2F02 30							.BYTE V3
   144 2F03 04							.BYTE CMD4 
   145 2F04 02							.BYTE $02 
Source: DUMB Module.asm
  1644 2F05				ROW PAUSE 
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 2F05 80							.BYTE PAUSE	; PAUSE is a Row Pause Command
Source: DUMB Module.asm
  1645 2F06				ROW E_3 $07 vA CMD4 $00
Macro: ROW [Source: DUMB Module.inc]
    33 = 0005						argnum = 5	; up to 5 arguments may be valid 
   140 2F06 78							.BYTE NOTE + INSTRUMENT + VOLUME + COMMAND_1 
   141 2F07 28							.BYTE E_3 
   142 2F08 87							.BYTE $07 + INSTRINIT
   143 2F09 A0							.BYTE VA
   144 2F0A 04							.BYTE CMD4 
   145 2F0B 00							.BYTE $00 
Source: DUMB Module.asm
  1646 2F0C				ROW Fs3 $07 vA 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2F0C 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2F0D 2A							.BYTE FS3 
   111 2F0E 87							.BYTE $07 + INSTRINIT
   112 2F0F A0							.BYTE VA 
Source: DUMB Module.asm
  1647 2F10				ROW E_3 $07 v3 CMD4 $02
Macro: ROW [Source: DUMB Module.inc]
    33 = 0005						argnum = 5	; up to 5 arguments may be valid 
   140 2F10 78							.BYTE NOTE + INSTRUMENT + VOLUME + COMMAND_1 
   141 2F11 28							.BYTE E_3 
   142 2F12 87							.BYTE $07 + INSTRINIT
   143 2F13 30							.BYTE V3
   144 2F14 04							.BYTE CMD4 
   145 2F15 02							.BYTE $02 
Source: DUMB Module.asm
  1648 2F16				ROW Fs3 $07 v3
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2F16 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2F17 2A							.BYTE FS3 
   111 2F18 87							.BYTE $07 + INSTRINIT
   112 2F19 30							.BYTE V3 
Source: DUMB Module.asm
  1649 2F1A				ROW E_3 $07 v1 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2F1A 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2F1B 28							.BYTE E_3 
   111 2F1C 87							.BYTE $07 + INSTRINIT
   112 2F1D 10							.BYTE V1 
Source: DUMB Module.asm
  1650 2F1E				ROW Fs3 $07 v1	
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2F1E 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2F1F 2A							.BYTE FS3 
   111 2F20 87							.BYTE $07 + INSTRINIT
   112 2F21 10							.BYTE V1 
Source: DUMB Module.asm
  1651 2F22				ROW A_3 $07 vA CMD4 $00
Macro: ROW [Source: DUMB Module.inc]
    33 = 0005						argnum = 5	; up to 5 arguments may be valid 
   140 2F22 78							.BYTE NOTE + INSTRUMENT + VOLUME + COMMAND_1 
   141 2F23 2D							.BYTE A_3 
   142 2F24 87							.BYTE $07 + INSTRINIT
   143 2F25 A0							.BYTE VA
   144 2F26 04							.BYTE CMD4 
   145 2F27 00							.BYTE $00 
Source: DUMB Module.asm
  1652 2F28				ROW PAUSE 
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 2F28 80							.BYTE PAUSE	; PAUSE is a Row Pause Command
Source: DUMB Module.asm
  1653 2F29				ROW A_3 $07 v3 CMD4 $02
Macro: ROW [Source: DUMB Module.inc]
    33 = 0005						argnum = 5	; up to 5 arguments may be valid 
   140 2F29 78							.BYTE NOTE + INSTRUMENT + VOLUME + COMMAND_1 
   141 2F2A 2D							.BYTE A_3 
   142 2F2B 87							.BYTE $07 + INSTRINIT
   143 2F2C 30							.BYTE V3
   144 2F2D 04							.BYTE CMD4 
   145 2F2E 02							.BYTE $02 
Source: DUMB Module.asm
  1654 2F2F				ROW PAUSE 
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 2F2F 80							.BYTE PAUSE	; PAUSE is a Row Pause Command
Source: DUMB Module.asm
  1655 2F30				ROW D_4 $07 vA CMD4 $00
Macro: ROW [Source: DUMB Module.inc]
    33 = 0005						argnum = 5	; up to 5 arguments may be valid 
   140 2F30 78							.BYTE NOTE + INSTRUMENT + VOLUME + COMMAND_1 
   141 2F31 32							.BYTE D_4 
   142 2F32 87							.BYTE $07 + INSTRINIT
   143 2F33 A0							.BYTE VA
   144 2F34 04							.BYTE CMD4 
   145 2F35 00							.BYTE $00 
Source: DUMB Module.asm
  1656 2F36				ROW PAUSE 
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 2F36 80							.BYTE PAUSE	; PAUSE is a Row Pause Command
Source: DUMB Module.asm
  1657 2F37				ROW D_4 $07 v3 CMD4 $02
Macro: ROW [Source: DUMB Module.inc]
    33 = 0005						argnum = 5	; up to 5 arguments may be valid 
   140 2F37 78							.BYTE NOTE + INSTRUMENT + VOLUME + COMMAND_1 
   141 2F38 32							.BYTE D_4 
   142 2F39 87							.BYTE $07 + INSTRINIT
   143 2F3A 30							.BYTE V3
   144 2F3B 04							.BYTE CMD4 
   145 2F3C 02							.BYTE $02 
Source: DUMB Module.asm
  1658 2F3D				ROW PAUSE 
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 2F3D 80							.BYTE PAUSE	; PAUSE is a Row Pause Command
Source: DUMB Module.asm
  1659 2F3E				ROW D_4 $07 v1 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2F3E 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2F3F 32							.BYTE D_4 
   111 2F40 87							.BYTE $07 + INSTRINIT
   112 2F41 10							.BYTE V1 
Source: DUMB Module.asm
  1660 2F42				ROW PAUSE
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 2F42 80							.BYTE PAUSE	; PAUSE is a Row Pause Command
Source: DUMB Module.asm
  1661 2F43				ROW D_4 $07 vA CMD4 $00
Macro: ROW [Source: DUMB Module.inc]
    33 = 0005						argnum = 5	; up to 5 arguments may be valid 
   140 2F43 78							.BYTE NOTE + INSTRUMENT + VOLUME + COMMAND_1 
   141 2F44 32							.BYTE D_4 
   142 2F45 87							.BYTE $07 + INSTRINIT
   143 2F46 A0							.BYTE VA
   144 2F47 04							.BYTE CMD4 
   145 2F48 00							.BYTE $00 
Source: DUMB Module.asm
  1662 2F49				ROW Cs4 $07 vA 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2F49 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2F4A 31							.BYTE CS4 
   111 2F4B 87							.BYTE $07 + INSTRINIT
   112 2F4C A0							.BYTE VA 
Source: DUMB Module.asm
  1663 2F4D				ROW D_4 $07 v3 CMD4 $02
Macro: ROW [Source: DUMB Module.inc]
    33 = 0005						argnum = 5	; up to 5 arguments may be valid 
   140 2F4D 78							.BYTE NOTE + INSTRUMENT + VOLUME + COMMAND_1 
   141 2F4E 32							.BYTE D_4 
   142 2F4F 87							.BYTE $07 + INSTRINIT
   143 2F50 30							.BYTE V3
   144 2F51 04							.BYTE CMD4 
   145 2F52 02							.BYTE $02 
Source: DUMB Module.asm
  1664 2F53				ROW Cs4 $07 v3
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2F53 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2F54 31							.BYTE CS4 
   111 2F55 87							.BYTE $07 + INSTRINIT
   112 2F56 30							.BYTE V3 
Source: DUMB Module.asm
  1665
  1666 2F57			PTN_2E 
  1667 2F57				ROW B_3 $07 vA CMD4 $00
Macro: ROW [Source: DUMB Module.inc]
    33 = 0005						argnum = 5	; up to 5 arguments may be valid 
   140 2F57 78							.BYTE NOTE + INSTRUMENT + VOLUME + COMMAND_1 
   141 2F58 2F							.BYTE B_3 
   142 2F59 87							.BYTE $07 + INSTRINIT
   143 2F5A A0							.BYTE VA
   144 2F5B 04							.BYTE CMD4 
   145 2F5C 00							.BYTE $00 
Source: DUMB Module.asm
  1668 2F5D				ROW PAUSE 
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 2F5D 80							.BYTE PAUSE	; PAUSE is a Row Pause Command
Source: DUMB Module.asm
  1669 2F5E				ROW B_3 $07 v3 CMD4 $02
Macro: ROW [Source: DUMB Module.inc]
    33 = 0005						argnum = 5	; up to 5 arguments may be valid 
   140 2F5E 78							.BYTE NOTE + INSTRUMENT + VOLUME + COMMAND_1 
   141 2F5F 2F							.BYTE B_3 
   142 2F60 87							.BYTE $07 + INSTRINIT
   143 2F61 30							.BYTE V3
   144 2F62 04							.BYTE CMD4 
   145 2F63 02							.BYTE $02 
Source: DUMB Module.asm
  1670 2F64				ROW PAUSE 
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 2F64 80							.BYTE PAUSE	; PAUSE is a Row Pause Command
Source: DUMB Module.asm
  1671 2F65				ROW B_3 $07 v2 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2F65 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2F66 2F							.BYTE B_3 
   111 2F67 87							.BYTE $07 + INSTRINIT
   112 2F68 20							.BYTE V2 
Source: DUMB Module.asm
  1672 2F69				ROW PAUSE 
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 2F69 80							.BYTE PAUSE	; PAUSE is a Row Pause Command
Source: DUMB Module.asm
  1673 2F6A				ROW B_3 $07 v1 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2F6A 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2F6B 2F							.BYTE B_3 
   111 2F6C 87							.BYTE $07 + INSTRINIT
   112 2F6D 10							.BYTE V1 
Source: DUMB Module.asm
  1674 2F6E				ROW PAUSE 
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 2F6E 80							.BYTE PAUSE	; PAUSE is a Row Pause Command
Source: DUMB Module.asm
  1675 2F6F				ROW Gs3 $07 vA CMD4 $00
Macro: ROW [Source: DUMB Module.inc]
    33 = 0005						argnum = 5	; up to 5 arguments may be valid 
   140 2F6F 78							.BYTE NOTE + INSTRUMENT + VOLUME + COMMAND_1 
   141 2F70 2C							.BYTE GS3 
   142 2F71 87							.BYTE $07 + INSTRINIT
   143 2F72 A0							.BYTE VA
   144 2F73 04							.BYTE CMD4 
   145 2F74 00							.BYTE $00 
Source: DUMB Module.asm
  1676 2F75				ROW PAUSE 
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 2F75 80							.BYTE PAUSE	; PAUSE is a Row Pause Command
Source: DUMB Module.asm
  1677 2F76				ROW A_3 $07 vA 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2F76 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2F77 2D							.BYTE A_3 
   111 2F78 87							.BYTE $07 + INSTRINIT
   112 2F79 A0							.BYTE VA 
Source: DUMB Module.asm
  1678 2F7A				ROW PAUSE 
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 2F7A 80							.BYTE PAUSE	; PAUSE is a Row Pause Command
Source: DUMB Module.asm
  1679 2F7B				ROW A_3 $07 v3 CMD4 $02
Macro: ROW [Source: DUMB Module.inc]
    33 = 0005						argnum = 5	; up to 5 arguments may be valid 
   140 2F7B 78							.BYTE NOTE + INSTRUMENT + VOLUME + COMMAND_1 
   141 2F7C 2D							.BYTE A_3 
   142 2F7D 87							.BYTE $07 + INSTRINIT
   143 2F7E 30							.BYTE V3
   144 2F7F 04							.BYTE CMD4 
   145 2F80 02							.BYTE $02 
Source: DUMB Module.asm
  1680 2F81				ROW Fs3 $07 vA CMD4 $00
Macro: ROW [Source: DUMB Module.inc]
    33 = 0005						argnum = 5	; up to 5 arguments may be valid 
   140 2F81 78							.BYTE NOTE + INSTRUMENT + VOLUME + COMMAND_1 
   141 2F82 2A							.BYTE FS3 
   142 2F83 87							.BYTE $07 + INSTRINIT
   143 2F84 A0							.BYTE VA
   144 2F85 04							.BYTE CMD4 
   145 2F86 00							.BYTE $00 
Source: DUMB Module.asm
  1681 2F87				ROW E_3 $07 vA 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2F87 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2F88 28							.BYTE E_3 
   111 2F89 87							.BYTE $07 + INSTRINIT
   112 2F8A A0							.BYTE VA 
Source: DUMB Module.asm
  1682 2F8B				ROW Fs3 $07 v3 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2F8B 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2F8C 2A							.BYTE FS3 
   111 2F8D 87							.BYTE $07 + INSTRINIT
   112 2F8E 30							.BYTE V3 
Source: DUMB Module.asm
  1683 2F8F				ROW Fs3 $07 vA 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2F8F 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2F90 2A							.BYTE FS3 
   111 2F91 87							.BYTE $07 + INSTRINIT
   112 2F92 A0							.BYTE VA 
Source: DUMB Module.asm
  1684 2F93				ROW Fs3 $07 v1 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2F93 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2F94 2A							.BYTE FS3 
   111 2F95 87							.BYTE $07 + INSTRINIT
   112 2F96 10							.BYTE V1 
Source: DUMB Module.asm
  1685 2F97				ROW Fs3 $07 v3 CMD4 $02 
Macro: ROW [Source: DUMB Module.inc]
    33 = 0005						argnum = 5	; up to 5 arguments may be valid 
   140 2F97 78							.BYTE NOTE + INSTRUMENT + VOLUME + COMMAND_1 
   141 2F98 2A							.BYTE FS3 
   142 2F99 87							.BYTE $07 + INSTRINIT
   143 2F9A 30							.BYTE V3
   144 2F9B 04							.BYTE CMD4 
   145 2F9C 02							.BYTE $02 
Source: DUMB Module.asm
  1686 2F9D				ROW PAUSE 
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 2F9D 80							.BYTE PAUSE	; PAUSE is a Row Pause Command
Source: DUMB Module.asm
  1687 2F9E				ROW Fs3 $07 v2 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2F9E 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2F9F 2A							.BYTE FS3 
   111 2FA0 87							.BYTE $07 + INSTRINIT
   112 2FA1 20							.BYTE V2 
Source: DUMB Module.asm
  1688 2FA2				ROW PAUSE 
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 2FA2 80							.BYTE PAUSE	; PAUSE is a Row Pause Command
Source: DUMB Module.asm
  1689 2FA3				ROW Fs3 $07 v1 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2FA3 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2FA4 2A							.BYTE FS3 
   111 2FA5 87							.BYTE $07 + INSTRINIT
   112 2FA6 10							.BYTE V1 
Source: DUMB Module.asm
  1690 2FA7				ROW PAUSE 	
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 2FA7 80							.BYTE PAUSE	; PAUSE is a Row Pause Command
Source: DUMB Module.asm
  1691 2FA8				ROW B_3 $07 vA CMD4 $00
Macro: ROW [Source: DUMB Module.inc]
    33 = 0005						argnum = 5	; up to 5 arguments may be valid 
   140 2FA8 78							.BYTE NOTE + INSTRUMENT + VOLUME + COMMAND_1 
   141 2FA9 2F							.BYTE B_3 
   142 2FAA 87							.BYTE $07 + INSTRINIT
   143 2FAB A0							.BYTE VA
   144 2FAC 04							.BYTE CMD4 
   145 2FAD 00							.BYTE $00 
Source: DUMB Module.asm
  1692 2FAE				ROW PAUSE
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 2FAE 80							.BYTE PAUSE	; PAUSE is a Row Pause Command
Source: DUMB Module.asm
  1693 2FAF				ROW D_4 $07 vA
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2FAF 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2FB0 32							.BYTE D_4 
   111 2FB1 87							.BYTE $07 + INSTRINIT
   112 2FB2 A0							.BYTE VA 
Source: DUMB Module.asm
  1694 2FB3				ROW B_3 $07 vA
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2FB3 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2FB4 2F							.BYTE B_3 
   111 2FB5 87							.BYTE $07 + INSTRINIT
   112 2FB6 A0							.BYTE VA 
Source: DUMB Module.asm
  1695 2FB7				ROW D_4 $07 v3
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2FB7 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2FB8 32							.BYTE D_4 
   111 2FB9 87							.BYTE $07 + INSTRINIT
   112 2FBA 30							.BYTE V3 
Source: DUMB Module.asm
  1696 2FBB				ROW Cs4 $07 vA
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2FBB 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2FBC 31							.BYTE CS4 
   111 2FBD 87							.BYTE $07 + INSTRINIT
   112 2FBE A0							.BYTE VA 
Source: DUMB Module.asm
  1697 2FBF				ROW D_4 $07 v1
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2FBF 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2FC0 32							.BYTE D_4 
   111 2FC1 87							.BYTE $07 + INSTRINIT
   112 2FC2 10							.BYTE V1 
Source: DUMB Module.asm
  1698 2FC3				ROW A_3 $07 vA 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2FC3 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2FC4 2D							.BYTE A_3 
   111 2FC5 87							.BYTE $07 + INSTRINIT
   112 2FC6 A0							.BYTE VA 
Source: DUMB Module.asm
  1699 					
  1700 2FC7			PTN_2F
  1701 2FC7				ROW B_3 $07 vA CMD4 $00
Macro: ROW [Source: DUMB Module.inc]
    33 = 0005						argnum = 5	; up to 5 arguments may be valid 
   140 2FC7 78							.BYTE NOTE + INSTRUMENT + VOLUME + COMMAND_1 
   141 2FC8 2F							.BYTE B_3 
   142 2FC9 87							.BYTE $07 + INSTRINIT
   143 2FCA A0							.BYTE VA
   144 2FCB 04							.BYTE CMD4 
   145 2FCC 00							.BYTE $00 
Source: DUMB Module.asm
  1702 2FCD				ROW PAUSE 
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 2FCD 80							.BYTE PAUSE	; PAUSE is a Row Pause Command
Source: DUMB Module.asm
  1703 2FCE				ROW B_3 $07 v3 CMD4 $02
Macro: ROW [Source: DUMB Module.inc]
    33 = 0005						argnum = 5	; up to 5 arguments may be valid 
   140 2FCE 78							.BYTE NOTE + INSTRUMENT + VOLUME + COMMAND_1 
   141 2FCF 2F							.BYTE B_3 
   142 2FD0 87							.BYTE $07 + INSTRINIT
   143 2FD1 30							.BYTE V3
   144 2FD2 04							.BYTE CMD4 
   145 2FD3 02							.BYTE $02 
Source: DUMB Module.asm
  1704 2FD4				ROW PAUSE 
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 2FD4 80							.BYTE PAUSE	; PAUSE is a Row Pause Command
Source: DUMB Module.asm
  1705 2FD5				ROW B_3 $07 v2 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2FD5 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2FD6 2F							.BYTE B_3 
   111 2FD7 87							.BYTE $07 + INSTRINIT
   112 2FD8 20							.BYTE V2 
Source: DUMB Module.asm
  1706 2FD9				ROW PAUSE 
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 2FD9 80							.BYTE PAUSE	; PAUSE is a Row Pause Command
Source: DUMB Module.asm
  1707 2FDA				ROW B_3 $07 v1 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2FDA 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2FDB 2F							.BYTE B_3 
   111 2FDC 87							.BYTE $07 + INSTRINIT
   112 2FDD 10							.BYTE V1 
Source: DUMB Module.asm
  1708 2FDE				ROW PAUSE 
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 2FDE 80							.BYTE PAUSE	; PAUSE is a Row Pause Command
Source: DUMB Module.asm
  1709 2FDF				ROW Gs3 $07 vA CMD4 $00
Macro: ROW [Source: DUMB Module.inc]
    33 = 0005						argnum = 5	; up to 5 arguments may be valid 
   140 2FDF 78							.BYTE NOTE + INSTRUMENT + VOLUME + COMMAND_1 
   141 2FE0 2C							.BYTE GS3 
   142 2FE1 87							.BYTE $07 + INSTRINIT
   143 2FE2 A0							.BYTE VA
   144 2FE3 04							.BYTE CMD4 
   145 2FE4 00							.BYTE $00 
Source: DUMB Module.asm
  1710 2FE5				ROW PAUSE 
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 2FE5 80							.BYTE PAUSE	; PAUSE is a Row Pause Command
Source: DUMB Module.asm
  1711 2FE6				ROW A_3 $07 vA 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2FE6 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2FE7 2D							.BYTE A_3 
   111 2FE8 87							.BYTE $07 + INSTRINIT
   112 2FE9 A0							.BYTE VA 
Source: DUMB Module.asm
  1712 2FEA				ROW PAUSE 
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 2FEA 80							.BYTE PAUSE	; PAUSE is a Row Pause Command
Source: DUMB Module.asm
  1713 2FEB				ROW A_3 $07 v3 CMD4 $02
Macro: ROW [Source: DUMB Module.inc]
    33 = 0005						argnum = 5	; up to 5 arguments may be valid 
   140 2FEB 78							.BYTE NOTE + INSTRUMENT + VOLUME + COMMAND_1 
   141 2FEC 2D							.BYTE A_3 
   142 2FED 87							.BYTE $07 + INSTRINIT
   143 2FEE 30							.BYTE V3
   144 2FEF 04							.BYTE CMD4 
   145 2FF0 02							.BYTE $02 
Source: DUMB Module.asm
  1714 2FF1				ROW Fs3 $07 vA CMD4 $00
Macro: ROW [Source: DUMB Module.inc]
    33 = 0005						argnum = 5	; up to 5 arguments may be valid 
   140 2FF1 78							.BYTE NOTE + INSTRUMENT + VOLUME + COMMAND_1 
   141 2FF2 2A							.BYTE FS3 
   142 2FF3 87							.BYTE $07 + INSTRINIT
   143 2FF4 A0							.BYTE VA
   144 2FF5 04							.BYTE CMD4 
   145 2FF6 00							.BYTE $00 
Source: DUMB Module.asm
  1715 2FF7				ROW E_3 $07 vA 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2FF7 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2FF8 28							.BYTE E_3 
   111 2FF9 87							.BYTE $07 + INSTRINIT
   112 2FFA A0							.BYTE VA 
Source: DUMB Module.asm
  1716 2FFB				ROW Fs3 $07 v3 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2FFB 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 2FFC 2A							.BYTE FS3 
   111 2FFD 87							.BYTE $07 + INSTRINIT
   112 2FFE 30							.BYTE V3 
Source: DUMB Module.asm
  1717 2FFF				ROW Fs3 $07 vA 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 2FFF 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 3000 2A							.BYTE FS3 
   111 3001 87							.BYTE $07 + INSTRINIT
   112 3002 A0							.BYTE VA 
Source: DUMB Module.asm
  1718 3003				ROW Fs3 $07 v1 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 3003 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 3004 2A							.BYTE FS3 
   111 3005 87							.BYTE $07 + INSTRINIT
   112 3006 10							.BYTE V1 
Source: DUMB Module.asm
  1719 3007				ROW Fs3 $07 v3 CMD4 $02 
Macro: ROW [Source: DUMB Module.inc]
    33 = 0005						argnum = 5	; up to 5 arguments may be valid 
   140 3007 78							.BYTE NOTE + INSTRUMENT + VOLUME + COMMAND_1 
   141 3008 2A							.BYTE FS3 
   142 3009 87							.BYTE $07 + INSTRINIT
   143 300A 30							.BYTE V3
   144 300B 04							.BYTE CMD4 
   145 300C 02							.BYTE $02 
Source: DUMB Module.asm
  1720 300D				ROW PAUSE 
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 300D 80							.BYTE PAUSE	; PAUSE is a Row Pause Command
Source: DUMB Module.asm
  1721 300E				ROW Fs3 $07 v2 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 300E 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 300F 2A							.BYTE FS3 
   111 3010 87							.BYTE $07 + INSTRINIT
   112 3011 20							.BYTE V2 
Source: DUMB Module.asm
  1722 3012				ROW PAUSE 
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 3012 80							.BYTE PAUSE	; PAUSE is a Row Pause Command
Source: DUMB Module.asm
  1723 3013				ROW Fs3 $07 v1 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 3013 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 3014 2A							.BYTE FS3 
   111 3015 87							.BYTE $07 + INSTRINIT
   112 3016 10							.BYTE V1 
Source: DUMB Module.asm
  1724 3017				ROW PAUSE 	
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 3017 80							.BYTE PAUSE	; PAUSE is a Row Pause Command
Source: DUMB Module.asm
  1725 3018				ROW B_3 $07 vA CMD4 $00
Macro: ROW [Source: DUMB Module.inc]
    33 = 0005						argnum = 5	; up to 5 arguments may be valid 
   140 3018 78							.BYTE NOTE + INSTRUMENT + VOLUME + COMMAND_1 
   141 3019 2F							.BYTE B_3 
   142 301A 87							.BYTE $07 + INSTRINIT
   143 301B A0							.BYTE VA
   144 301C 04							.BYTE CMD4 
   145 301D 00							.BYTE $00 
Source: DUMB Module.asm
  1726 301E				ROW PAUSE
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 301E 80							.BYTE PAUSE	; PAUSE is a Row Pause Command
Source: DUMB Module.asm
  1727 301F				ROW D_4 $07 vA
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 301F 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 3020 32							.BYTE D_4 
   111 3021 87							.BYTE $07 + INSTRINIT
   112 3022 A0							.BYTE VA 
Source: DUMB Module.asm
  1728 3023				ROW E_4 $07 vA 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 3023 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 3024 34							.BYTE E_4 
   111 3025 87							.BYTE $07 + INSTRINIT
   112 3026 A0							.BYTE VA 
Source: DUMB Module.asm
  1729 3027				ROW D_4 $07 v3 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 3027 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 3028 32							.BYTE D_4 
   111 3029 87							.BYTE $07 + INSTRINIT
   112 302A 30							.BYTE V3 
Source: DUMB Module.asm
  1730 302B				ROW Cs4 $07 vA
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 302B 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 302C 31							.BYTE CS4 
   111 302D 87							.BYTE $07 + INSTRINIT
   112 302E A0							.BYTE VA 
Source: DUMB Module.asm
  1731 302F				ROW B_3 $07 vA
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 302F 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 3030 2F							.BYTE B_3 
   111 3031 87							.BYTE $07 + INSTRINIT
   112 3032 A0							.BYTE VA 
Source: DUMB Module.asm
  1732 3033				ROW Cs4 $07 v3
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 3033 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 3034 31							.BYTE CS4 
   111 3035 87							.BYTE $07 + INSTRINIT
   112 3036 30							.BYTE V3 
Source: DUMB Module.asm
  1733
  1734 3037			PTN_30
  1735 3037				ROW E_3 $07 vA CMD4 $00
Macro: ROW [Source: DUMB Module.inc]
    33 = 0005						argnum = 5	; up to 5 arguments may be valid 
   140 3037 78							.BYTE NOTE + INSTRUMENT + VOLUME + COMMAND_1 
   141 3038 28							.BYTE E_3 
   142 3039 87							.BYTE $07 + INSTRINIT
   143 303A A0							.BYTE VA
   144 303B 04							.BYTE CMD4 
   145 303C 00							.BYTE $00 
Source: DUMB Module.asm
  1736 303D				ROW PAUSE 
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 303D 80							.BYTE PAUSE	; PAUSE is a Row Pause Command
Source: DUMB Module.asm
  1737 303E				ROW E_3 $07 v3 CMD4 $02
Macro: ROW [Source: DUMB Module.inc]
    33 = 0005						argnum = 5	; up to 5 arguments may be valid 
   140 303E 78							.BYTE NOTE + INSTRUMENT + VOLUME + COMMAND_1 
   141 303F 28							.BYTE E_3 
   142 3040 87							.BYTE $07 + INSTRINIT
   143 3041 30							.BYTE V3
   144 3042 04							.BYTE CMD4 
   145 3043 02							.BYTE $02 
Source: DUMB Module.asm
  1738 3044				ROW PAUSE 
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 3044 80							.BYTE PAUSE	; PAUSE is a Row Pause Command
Source: DUMB Module.asm
  1739 3045				ROW A_3 $07 vA CMD4 $00
Macro: ROW [Source: DUMB Module.inc]
    33 = 0005						argnum = 5	; up to 5 arguments may be valid 
   140 3045 78							.BYTE NOTE + INSTRUMENT + VOLUME + COMMAND_1 
   141 3046 2D							.BYTE A_3 
   142 3047 87							.BYTE $07 + INSTRINIT
   143 3048 A0							.BYTE VA
   144 3049 04							.BYTE CMD4 
   145 304A 00							.BYTE $00 
Source: DUMB Module.asm
  1740 304B				ROW PAUSE 
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 304B 80							.BYTE PAUSE	; PAUSE is a Row Pause Command
Source: DUMB Module.asm
  1741 304C				ROW A_3 $07 v3 CMD4 $02
Macro: ROW [Source: DUMB Module.inc]
    33 = 0005						argnum = 5	; up to 5 arguments may be valid 
   140 304C 78							.BYTE NOTE + INSTRUMENT + VOLUME + COMMAND_1 
   141 304D 2D							.BYTE A_3 
   142 304E 87							.BYTE $07 + INSTRINIT
   143 304F 30							.BYTE V3
   144 3050 04							.BYTE CMD4 
   145 3051 02							.BYTE $02 
Source: DUMB Module.asm
  1742 3052				ROW PAUSE 
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 3052 80							.BYTE PAUSE	; PAUSE is a Row Pause Command
Source: DUMB Module.asm
  1743 3053				ROW B_3 $07 vA CMD4 $00
Macro: ROW [Source: DUMB Module.inc]
    33 = 0005						argnum = 5	; up to 5 arguments may be valid 
   140 3053 78							.BYTE NOTE + INSTRUMENT + VOLUME + COMMAND_1 
   141 3054 2F							.BYTE B_3 
   142 3055 87							.BYTE $07 + INSTRINIT
   143 3056 A0							.BYTE VA
   144 3057 04							.BYTE CMD4 
   145 3058 00							.BYTE $00 
Source: DUMB Module.asm
  1744 3059				ROW PAUSE 
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 3059 80							.BYTE PAUSE	; PAUSE is a Row Pause Command
Source: DUMB Module.asm
  1745 305A				ROW Fs3 $07 vA 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 305A 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 305B 2A							.BYTE FS3 
   111 305C 87							.BYTE $07 + INSTRINIT
   112 305D A0							.BYTE VA 
Source: DUMB Module.asm
  1746 305E				ROW PAUSE 
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 305E 80							.BYTE PAUSE	; PAUSE is a Row Pause Command
Source: DUMB Module.asm
  1747 305F				ROW E_3 $07 vA CMD4 $00
Macro: ROW [Source: DUMB Module.inc]
    33 = 0005						argnum = 5	; up to 5 arguments may be valid 
   140 305F 78							.BYTE NOTE + INSTRUMENT + VOLUME + COMMAND_1 
   141 3060 28							.BYTE E_3 
   142 3061 87							.BYTE $07 + INSTRINIT
   143 3062 A0							.BYTE VA
   144 3063 04							.BYTE CMD4 
   145 3064 00							.BYTE $00 
Source: DUMB Module.asm
  1748 3065				ROW Fs3 $07 vA 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 3065 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 3066 2A							.BYTE FS3 
   111 3067 87							.BYTE $07 + INSTRINIT
   112 3068 A0							.BYTE VA 
Source: DUMB Module.asm
  1749 3069				ROW E_3 $07 v3 CMD4 $02
Macro: ROW [Source: DUMB Module.inc]
    33 = 0005						argnum = 5	; up to 5 arguments may be valid 
   140 3069 78							.BYTE NOTE + INSTRUMENT + VOLUME + COMMAND_1 
   141 306A 28							.BYTE E_3 
   142 306B 87							.BYTE $07 + INSTRINIT
   143 306C 30							.BYTE V3
   144 306D 04							.BYTE CMD4 
   145 306E 02							.BYTE $02 
Source: DUMB Module.asm
  1750 306F				ROW Fs3 $07 v3
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 306F 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 3070 2A							.BYTE FS3 
   111 3071 87							.BYTE $07 + INSTRINIT
   112 3072 30							.BYTE V3 
Source: DUMB Module.asm
  1751 3073				ROW E_3 $07 v1 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 3073 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 3074 28							.BYTE E_3 
   111 3075 87							.BYTE $07 + INSTRINIT
   112 3076 10							.BYTE V1 
Source: DUMB Module.asm
  1752 3077				ROW Fs3 $07 v1	
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 3077 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 3078 2A							.BYTE FS3 
   111 3079 87							.BYTE $07 + INSTRINIT
   112 307A 10							.BYTE V1 
Source: DUMB Module.asm
  1753 307B				ROW E_3 $07 vA CMD4 $00
Macro: ROW [Source: DUMB Module.inc]
    33 = 0005						argnum = 5	; up to 5 arguments may be valid 
   140 307B 78							.BYTE NOTE + INSTRUMENT + VOLUME + COMMAND_1 
   141 307C 28							.BYTE E_3 
   142 307D 87							.BYTE $07 + INSTRINIT
   143 307E A0							.BYTE VA
   144 307F 04							.BYTE CMD4 
   145 3080 00							.BYTE $00 
Source: DUMB Module.asm
  1754 3081				ROW PAUSE 
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 3081 80							.BYTE PAUSE	; PAUSE is a Row Pause Command
Source: DUMB Module.asm
  1755 3082				ROW E_3 $07 v3 CMD4 $02
Macro: ROW [Source: DUMB Module.inc]
    33 = 0005						argnum = 5	; up to 5 arguments may be valid 
   140 3082 78							.BYTE NOTE + INSTRUMENT + VOLUME + COMMAND_1 
   141 3083 28							.BYTE E_3 
   142 3084 87							.BYTE $07 + INSTRINIT
   143 3085 30							.BYTE V3
   144 3086 04							.BYTE CMD4 
   145 3087 02							.BYTE $02 
Source: DUMB Module.asm
  1756 3088				ROW A_3 $07 vA CMD4 $00
Macro: ROW [Source: DUMB Module.inc]
    33 = 0005						argnum = 5	; up to 5 arguments may be valid 
   140 3088 78							.BYTE NOTE + INSTRUMENT + VOLUME + COMMAND_1 
   141 3089 2D							.BYTE A_3 
   142 308A 87							.BYTE $07 + INSTRINIT
   143 308B A0							.BYTE VA
   144 308C 04							.BYTE CMD4 
   145 308D 00							.BYTE $00 
Source: DUMB Module.asm
  1757 308E				ROW E_3 $07 v1
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 308E 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 308F 28							.BYTE E_3 
   111 3090 87							.BYTE $07 + INSTRINIT
   112 3091 10							.BYTE V1 
Source: DUMB Module.asm
  1758 3092				ROW A_3 $07 v3 CMD4 $02
Macro: ROW [Source: DUMB Module.inc]
    33 = 0005						argnum = 5	; up to 5 arguments may be valid 
   140 3092 78							.BYTE NOTE + INSTRUMENT + VOLUME + COMMAND_1 
   141 3093 2D							.BYTE A_3 
   142 3094 87							.BYTE $07 + INSTRINIT
   143 3095 30							.BYTE V3
   144 3096 04							.BYTE CMD4 
   145 3097 02							.BYTE $02 
Source: DUMB Module.asm
  1759 3098				ROW Gs3 $07 vA CMD4 $00
Macro: ROW [Source: DUMB Module.inc]
    33 = 0005						argnum = 5	; up to 5 arguments may be valid 
   140 3098 78							.BYTE NOTE + INSTRUMENT + VOLUME + COMMAND_1 
   141 3099 2C							.BYTE GS3 
   142 309A 87							.BYTE $07 + INSTRINIT
   143 309B A0							.BYTE VA
   144 309C 04							.BYTE CMD4 
   145 309D 00							.BYTE $00 
Source: DUMB Module.asm
  1760 309E				ROW A_3 $07 v1
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 309E 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 309F 2D							.BYTE A_3 
   111 30A0 87							.BYTE $07 + INSTRINIT
   112 30A1 10							.BYTE V1 
Source: DUMB Module.asm
  1761 30A2				ROW Fs3 $07 vA CMD4 $00
Macro: ROW [Source: DUMB Module.inc]
    33 = 0005						argnum = 5	; up to 5 arguments may be valid 
   140 30A2 78							.BYTE NOTE + INSTRUMENT + VOLUME + COMMAND_1 
   141 30A3 2A							.BYTE FS3 
   142 30A4 87							.BYTE $07 + INSTRINIT
   143 30A5 A0							.BYTE VA
   144 30A6 04							.BYTE CMD4 
   145 30A7 00							.BYTE $00 
Source: DUMB Module.asm
  1762 30A8				ROW PAUSE 
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 30A8 80							.BYTE PAUSE	; PAUSE is a Row Pause Command
Source: DUMB Module.asm
  1763 30A9				ROW Fs3 $07 v3 CMD4 $02
Macro: ROW [Source: DUMB Module.inc]
    33 = 0005						argnum = 5	; up to 5 arguments may be valid 
   140 30A9 78							.BYTE NOTE + INSTRUMENT + VOLUME + COMMAND_1 
   141 30AA 2A							.BYTE FS3 
   142 30AB 87							.BYTE $07 + INSTRINIT
   143 30AC 30							.BYTE V3
   144 30AD 04							.BYTE CMD4 
   145 30AE 02							.BYTE $02 
Source: DUMB Module.asm
  1764 30AF				ROW PAUSE 
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 30AF 80							.BYTE PAUSE	; PAUSE is a Row Pause Command
Source: DUMB Module.asm
  1765 30B0				ROW Fs3 $07 v1 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 30B0 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 30B1 2A							.BYTE FS3 
   111 30B2 87							.BYTE $07 + INSTRINIT
   112 30B3 10							.BYTE V1 
Source: DUMB Module.asm
  1766 30B4				ROW PAUSE 
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 30B4 80							.BYTE PAUSE	; PAUSE is a Row Pause Command
Source: DUMB Module.asm
  1767
  1768 30B5			PTN_31
  1769 30B5				ROW E_3 $07 vA CMD4 $00
Macro: ROW [Source: DUMB Module.inc]
    33 = 0005						argnum = 5	; up to 5 arguments may be valid 
   140 30B5 78							.BYTE NOTE + INSTRUMENT + VOLUME + COMMAND_1 
   141 30B6 28							.BYTE E_3 
   142 30B7 87							.BYTE $07 + INSTRINIT
   143 30B8 A0							.BYTE VA
   144 30B9 04							.BYTE CMD4 
   145 30BA 00							.BYTE $00 
Source: DUMB Module.asm
  1770 30BB				ROW PAUSE
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 30BB 80							.BYTE PAUSE	; PAUSE is a Row Pause Command
Source: DUMB Module.asm
  1771 30BC				ROW D_4 $07 vA 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 30BC 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 30BD 32							.BYTE D_4 
   111 30BE 87							.BYTE $07 + INSTRINIT
   112 30BF A0							.BYTE VA 
Source: DUMB Module.asm
  1772 30C0				ROW PAUSE 
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 30C0 80							.BYTE PAUSE	; PAUSE is a Row Pause Command
Source: DUMB Module.asm
  1773 30C1				ROW E_4 $07 vA
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 30C1 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 30C2 34							.BYTE E_4 
   111 30C3 87							.BYTE $07 + INSTRINIT
   112 30C4 A0							.BYTE VA 
Source: DUMB Module.asm
  1774 30C5				ROW D_4 $07 vA 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 30C5 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 30C6 32							.BYTE D_4 
   111 30C7 87							.BYTE $07 + INSTRINIT
   112 30C8 A0							.BYTE VA 
Source: DUMB Module.asm
  1775 30C9				ROW E_4 $07 v3 CMD4 $02
Macro: ROW [Source: DUMB Module.inc]
    33 = 0005						argnum = 5	; up to 5 arguments may be valid 
   140 30C9 78							.BYTE NOTE + INSTRUMENT + VOLUME + COMMAND_1 
   141 30CA 34							.BYTE E_4 
   142 30CB 87							.BYTE $07 + INSTRINIT
   143 30CC 30							.BYTE V3
   144 30CD 04							.BYTE CMD4 
   145 30CE 02							.BYTE $02 
Source: DUMB Module.asm
  1776 30CF				ROW D_4 $07 v3 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 30CF 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 30D0 32							.BYTE D_4 
   111 30D1 87							.BYTE $07 + INSTRINIT
   112 30D2 30							.BYTE V3 
Source: DUMB Module.asm
  1777 30D3				ROW Cs4 $07 vA CMD4 $00
Macro: ROW [Source: DUMB Module.inc]
    33 = 0005						argnum = 5	; up to 5 arguments may be valid 
   140 30D3 78							.BYTE NOTE + INSTRUMENT + VOLUME + COMMAND_1 
   141 30D4 31							.BYTE CS4 
   142 30D5 87							.BYTE $07 + INSTRINIT
   143 30D6 A0							.BYTE VA
   144 30D7 04							.BYTE CMD4 
   145 30D8 00							.BYTE $00 
Source: DUMB Module.asm
  1778 30D9				ROW D_4 $07 v1 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 30D9 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 30DA 32							.BYTE D_4 
   111 30DB 87							.BYTE $07 + INSTRINIT
   112 30DC 10							.BYTE V1 
Source: DUMB Module.asm
  1779 30DD				ROW Cs4 $07 v3 CMD4 $02
Macro: ROW [Source: DUMB Module.inc]
    33 = 0005						argnum = 5	; up to 5 arguments may be valid 
   140 30DD 78							.BYTE NOTE + INSTRUMENT + VOLUME + COMMAND_1 
   141 30DE 31							.BYTE CS4 
   142 30DF 87							.BYTE $07 + INSTRINIT
   143 30E0 30							.BYTE V3
   144 30E1 04							.BYTE CMD4 
   145 30E2 02							.BYTE $02 
Source: DUMB Module.asm
  1780 30E3				ROW B_3 $07 vA CMD4 $00 
Macro: ROW [Source: DUMB Module.inc]
    33 = 0005						argnum = 5	; up to 5 arguments may be valid 
   140 30E3 78							.BYTE NOTE + INSTRUMENT + VOLUME + COMMAND_1 
   141 30E4 2F							.BYTE B_3 
   142 30E5 87							.BYTE $07 + INSTRINIT
   143 30E6 A0							.BYTE VA
   144 30E7 04							.BYTE CMD4 
   145 30E8 00							.BYTE $00 
Source: DUMB Module.asm
  1781 30E9				ROW Cs4 $07 v1 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 30E9 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 30EA 31							.BYTE CS4 
   111 30EB 87							.BYTE $07 + INSTRINIT
   112 30EC 10							.BYTE V1 
Source: DUMB Module.asm
  1782 30ED				ROW A_3 $07 vA
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 30ED 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 30EE 2D							.BYTE A_3 
   111 30EF 87							.BYTE $07 + INSTRINIT
   112 30F0 A0							.BYTE VA 
Source: DUMB Module.asm
  1783 30F1				ROW PAUSE 
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    60 30F1 80							.BYTE PAUSE	; PAUSE is a Row Pause Command
Source: DUMB Module.asm
  1784 30F2				ROW Cs4 $07 vA
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 30F2 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 30F3 31							.BYTE CS4 
   111 30F4 87							.BYTE $07 + INSTRINIT
   112 30F5 A0							.BYTE VA 
Source: DUMB Module.asm
  1785 30F6				ROW B_3 $07 vA
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 30F6 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 30F7 2F							.BYTE B_3 
   111 30F8 87							.BYTE $07 + INSTRINIT
   112 30F9 A0							.BYTE VA 
Source: DUMB Module.asm
  1786 30FA				ROW Cs4 $07 v3 CMD4 $02 
Macro: ROW [Source: DUMB Module.inc]
    33 = 0005						argnum = 5	; up to 5 arguments may be valid 
   140 30FA 78							.BYTE NOTE + INSTRUMENT + VOLUME + COMMAND_1 
   141 30FB 31							.BYTE CS4 
   142 30FC 87							.BYTE $07 + INSTRINIT
   143 30FD 30							.BYTE V3
   144 30FE 04							.BYTE CMD4 
   145 30FF 02							.BYTE $02 
Source: DUMB Module.asm
  1787 3100				ROW B_3 $07 v3
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 3100 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 3101 2F							.BYTE B_3 
   111 3102 87							.BYTE $07 + INSTRINIT
   112 3103 30							.BYTE V3 
Source: DUMB Module.asm
  1788 3104				ROW Cs4 $07 v2
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 3104 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 3105 31							.BYTE CS4 
   111 3106 87							.BYTE $07 + INSTRINIT
   112 3107 20							.BYTE V2 
Source: DUMB Module.asm
  1789 3108				ROW B_3 $07 v2
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 3108 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 3109 2F							.BYTE B_3 
   111 310A 87							.BYTE $07 + INSTRINIT
   112 310B 20							.BYTE V2 
Source: DUMB Module.asm
  1790 310C				ROW Cs4 $07 v1
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 310C 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 310D 31							.BYTE CS4 
   111 310E 87							.BYTE $07 + INSTRINIT
   112 310F 10							.BYTE V1 
Source: DUMB Module.asm
  1791 3110				ROW B_3 $07 v1
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 3110 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 3111 2F							.BYTE B_3 
   111 3112 87							.BYTE $07 + INSTRINIT
   112 3113 10							.BYTE V1 
Source: DUMB Module.asm
  1792 3114				ROW Cs4 $07 v3
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 3114 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 3115 31							.BYTE CS4 
   111 3116 87							.BYTE $07 + INSTRINIT
   112 3117 30							.BYTE V3 
Source: DUMB Module.asm
  1793 3118				ROW B_3 $07 v3
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 3118 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 3119 2F							.BYTE B_3 
   111 311A 87							.BYTE $07 + INSTRINIT
   112 311B 30							.BYTE V3 
Source: DUMB Module.asm
  1794 311C				ROW Cs4 $07 v2
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 311C 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 311D 31							.BYTE CS4 
   111 311E 87							.BYTE $07 + INSTRINIT
   112 311F 20							.BYTE V2 
Source: DUMB Module.asm
  1795 3120				ROW B_3 $07 v2
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 3120 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 3121 2F							.BYTE B_3 
   111 3122 87							.BYTE $07 + INSTRINIT
   112 3123 20							.BYTE V2 
Source: DUMB Module.asm
  1796 3124				ROW Cs4 $07 v1
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 3124 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 3125 31							.BYTE CS4 
   111 3126 87							.BYTE $07 + INSTRINIT
   112 3127 10							.BYTE V1 
Source: DUMB Module.asm
  1797 3128				ROW B_3 $07 v1
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 3128 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 3129 2F							.BYTE B_3 
   111 312A 87							.BYTE $07 + INSTRINIT
   112 312B 10							.BYTE V1 
Source: DUMB Module.asm
  1798 312C				END_PATTERN 
Macro: END_PATTERN [Source: DUMB Module.inc]
     2 312C 00				.BYTE $00			; Pattern End 
Source: DUMB Module.asm
  1799 					
  1800 312D			PTN_32
  1801 312D				ROW C_5 $0A v6 CMD0 $74
Macro: ROW [Source: DUMB Module.inc]
    33 = 0005						argnum = 5	; up to 5 arguments may be valid 
   140 312D 78							.BYTE NOTE + INSTRUMENT + VOLUME + COMMAND_1 
   141 312E 3C							.BYTE C_5 
   142 312F 8A							.BYTE $0A + INSTRINIT
   143 3130 60							.BYTE V6
   144 3131 00							.BYTE CMD0 
   145 3132 74							.BYTE $74 
Source: DUMB Module.asm
  1802 3133				ROW ___ ___ v3
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 3133 10							.BYTE VOLUME 
    83 3134 30							.BYTE V3 
Source: DUMB Module.asm
  1803 3135				ROW REL 
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    67 3135 40							.BYTE NOTE 
    68 3136 60							.BYTE REL 
Source: DUMB Module.asm
  1804 3137				ROW C_5 $0A v6
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 3137 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 3138 3C							.BYTE C_5 
   111 3139 8A							.BYTE $0A + INSTRINIT
   112 313A 60							.BYTE V6 
Source: DUMB Module.asm
  1805 313B				ROW ___ ___ v3
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 313B 10							.BYTE VOLUME 
    83 313C 30							.BYTE V3 
Source: DUMB Module.asm
  1806 313D				ROW REL 
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    67 313D 40							.BYTE NOTE 
    68 313E 60							.BYTE REL 
Source: DUMB Module.asm
  1807 313F				ROW C_5 $0A v6
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 313F 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 3140 3C							.BYTE C_5 
   111 3141 8A							.BYTE $0A + INSTRINIT
   112 3142 60							.BYTE V6 
Source: DUMB Module.asm
  1808 3143				ROW REL 
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    67 3143 40							.BYTE NOTE 
    68 3144 60							.BYTE REL 
Source: DUMB Module.asm
  1809 3145				ROW G_5 $0A v6 CMD0 $73
Macro: ROW [Source: DUMB Module.inc]
    33 = 0005						argnum = 5	; up to 5 arguments may be valid 
   140 3145 78							.BYTE NOTE + INSTRUMENT + VOLUME + COMMAND_1 
   141 3146 43							.BYTE G_5 
   142 3147 8A							.BYTE $0A + INSTRINIT
   143 3148 60							.BYTE V6
   144 3149 00							.BYTE CMD0 
   145 314A 73							.BYTE $73 
Source: DUMB Module.asm
  1810 314B				ROW ___ ___ v3
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 314B 10							.BYTE VOLUME 
    83 314C 30							.BYTE V3 
Source: DUMB Module.asm
  1811 314D				ROW REL 
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    67 314D 40							.BYTE NOTE 
    68 314E 60							.BYTE REL 
Source: DUMB Module.asm
  1812 314F				ROW G_5 $0A v6
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 314F 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 3150 43							.BYTE G_5 
   111 3151 8A							.BYTE $0A + INSTRINIT
   112 3152 60							.BYTE V6 
Source: DUMB Module.asm
  1813 3153				ROW ___ ___ v3
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 3153 10							.BYTE VOLUME 
    83 3154 30							.BYTE V3 
Source: DUMB Module.asm
  1814 3155				ROW REL 
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    67 3155 40							.BYTE NOTE 
    68 3156 60							.BYTE REL 
Source: DUMB Module.asm
  1815 3157				ROW G_5 $0A v6
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 3157 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 3158 43							.BYTE G_5 
   111 3159 8A							.BYTE $0A + INSTRINIT
   112 315A 60							.BYTE V6 
Source: DUMB Module.asm
  1816 315B				ROW REL 
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    67 315B 40							.BYTE NOTE 
    68 315C 60							.BYTE REL 
Source: DUMB Module.asm
  1817 315D				ROW E_5 $0A v6 CMD0 $63
Macro: ROW [Source: DUMB Module.inc]
    33 = 0005						argnum = 5	; up to 5 arguments may be valid 
   140 315D 78							.BYTE NOTE + INSTRUMENT + VOLUME + COMMAND_1 
   141 315E 40							.BYTE E_5 
   142 315F 8A							.BYTE $0A + INSTRINIT
   143 3160 60							.BYTE V6
   144 3161 00							.BYTE CMD0 
   145 3162 63							.BYTE $63 
Source: DUMB Module.asm
  1818 3163				ROW ___ ___ v3
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 3163 10							.BYTE VOLUME 
    83 3164 30							.BYTE V3 
Source: DUMB Module.asm
  1819 3165				ROW REL 
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    67 3165 40							.BYTE NOTE 
    68 3166 60							.BYTE REL 
Source: DUMB Module.asm
  1820 3167				ROW E_5 $0A v6
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 3167 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 3168 40							.BYTE E_5 
   111 3169 8A							.BYTE $0A + INSTRINIT
   112 316A 60							.BYTE V6 
Source: DUMB Module.asm
  1821 316B				ROW ___ ___ v3
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 316B 10							.BYTE VOLUME 
    83 316C 30							.BYTE V3 
Source: DUMB Module.asm
  1822 316D				ROW REL 
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    67 316D 40							.BYTE NOTE 
    68 316E 60							.BYTE REL 
Source: DUMB Module.asm
  1823 316F				ROW E_5 $0A v6
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 316F 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 3170 40							.BYTE E_5 
   111 3171 8A							.BYTE $0A + INSTRINIT
   112 3172 60							.BYTE V6 
Source: DUMB Module.asm
  1824 3173				ROW REL 
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    67 3173 40							.BYTE NOTE 
    68 3174 60							.BYTE REL 
Source: DUMB Module.asm
  1825 3175				ROW F_5 $0A v6 CMD0 $74
Macro: ROW [Source: DUMB Module.inc]
    33 = 0005						argnum = 5	; up to 5 arguments may be valid 
   140 3175 78							.BYTE NOTE + INSTRUMENT + VOLUME + COMMAND_1 
   141 3176 41							.BYTE F_5 
   142 3177 8A							.BYTE $0A + INSTRINIT
   143 3178 60							.BYTE V6
   144 3179 00							.BYTE CMD0 
   145 317A 74							.BYTE $74 
Source: DUMB Module.asm
  1826 317B				ROW ___ ___ v3
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 317B 10							.BYTE VOLUME 
    83 317C 30							.BYTE V3 
Source: DUMB Module.asm
  1827 317D				ROW REL 
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    67 317D 40							.BYTE NOTE 
    68 317E 60							.BYTE REL 
Source: DUMB Module.asm
  1828 317F				ROW F_5 $0A v6
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 317F 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 3180 41							.BYTE F_5 
   111 3181 8A							.BYTE $0A + INSTRINIT
   112 3182 60							.BYTE V6 
Source: DUMB Module.asm
  1829 3183				ROW ___ ___ v3
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 3183 10							.BYTE VOLUME 
    83 3184 30							.BYTE V3 
Source: DUMB Module.asm
  1830 3185				ROW REL 
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    67 3185 40							.BYTE NOTE 
    68 3186 60							.BYTE REL 
Source: DUMB Module.asm
  1831 3187				ROW F_5 $0A v6
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 3187 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 3188 41							.BYTE F_5 
   111 3189 8A							.BYTE $0A + INSTRINIT
   112 318A 60							.BYTE V6 
Source: DUMB Module.asm
  1832 318B				ROW ___ ___ v3 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 318B 10							.BYTE VOLUME 
    83 318C 30							.BYTE V3 
Source: DUMB Module.asm
  1833
  1834 318D			PTN_33
  1835 318D				ROW C_5 $0A v6 CMD0 $74
Macro: ROW [Source: DUMB Module.inc]
    33 = 0005						argnum = 5	; up to 5 arguments may be valid 
   140 318D 78							.BYTE NOTE + INSTRUMENT + VOLUME + COMMAND_1 
   141 318E 3C							.BYTE C_5 
   142 318F 8A							.BYTE $0A + INSTRINIT
   143 3190 60							.BYTE V6
   144 3191 00							.BYTE CMD0 
   145 3192 74							.BYTE $74 
Source: DUMB Module.asm
  1836 3193				ROW ___ ___ v3
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 3193 10							.BYTE VOLUME 
    83 3194 30							.BYTE V3 
Source: DUMB Module.asm
  1837 3195				ROW REL 
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    67 3195 40							.BYTE NOTE 
    68 3196 60							.BYTE REL 
Source: DUMB Module.asm
  1838 3197				ROW C_5 $0A v6
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 3197 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 3198 3C							.BYTE C_5 
   111 3199 8A							.BYTE $0A + INSTRINIT
   112 319A 60							.BYTE V6 
Source: DUMB Module.asm
  1839 319B				ROW ___ ___ v3
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 319B 10							.BYTE VOLUME 
    83 319C 30							.BYTE V3 
Source: DUMB Module.asm
  1840 319D				ROW REL 
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    67 319D 40							.BYTE NOTE 
    68 319E 60							.BYTE REL 
Source: DUMB Module.asm
  1841 319F				ROW C_5 $0A v6
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 319F 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 31A0 3C							.BYTE C_5 
   111 31A1 8A							.BYTE $0A + INSTRINIT
   112 31A2 60							.BYTE V6 
Source: DUMB Module.asm
  1842 31A3				ROW ___ ___ v3
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 31A3 10							.BYTE VOLUME 
    83 31A4 30							.BYTE V3 
Source: DUMB Module.asm
  1843 31A5				ROW G_5 $0A v6 CMD0 $73
Macro: ROW [Source: DUMB Module.inc]
    33 = 0005						argnum = 5	; up to 5 arguments may be valid 
   140 31A5 78							.BYTE NOTE + INSTRUMENT + VOLUME + COMMAND_1 
   141 31A6 43							.BYTE G_5 
   142 31A7 8A							.BYTE $0A + INSTRINIT
   143 31A8 60							.BYTE V6
   144 31A9 00							.BYTE CMD0 
   145 31AA 73							.BYTE $73 
Source: DUMB Module.asm
  1844 31AB				ROW ___ ___ v3
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 31AB 10							.BYTE VOLUME 
    83 31AC 30							.BYTE V3 
Source: DUMB Module.asm
  1845 31AD				ROW REL 
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    67 31AD 40							.BYTE NOTE 
    68 31AE 60							.BYTE REL 
Source: DUMB Module.asm
  1846 31AF				ROW G_5 $0A v6
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 31AF 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 31B0 43							.BYTE G_5 
   111 31B1 8A							.BYTE $0A + INSTRINIT
   112 31B2 60							.BYTE V6 
Source: DUMB Module.asm
  1847 31B3				ROW ___ ___ v3
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 31B3 10							.BYTE VOLUME 
    83 31B4 30							.BYTE V3 
Source: DUMB Module.asm
  1848 31B5				ROW REL 
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    67 31B5 40							.BYTE NOTE 
    68 31B6 60							.BYTE REL 
Source: DUMB Module.asm
  1849 31B7				ROW G_5 $0A v6
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 31B7 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 31B8 43							.BYTE G_5 
   111 31B9 8A							.BYTE $0A + INSTRINIT
   112 31BA 60							.BYTE V6 
Source: DUMB Module.asm
  1850 31BB				ROW ___ ___ v3
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 31BB 10							.BYTE VOLUME 
    83 31BC 30							.BYTE V3 
Source: DUMB Module.asm
  1851 31BD				ROW As5 $0A v6 CMD0 $74
Macro: ROW [Source: DUMB Module.inc]
    33 = 0005						argnum = 5	; up to 5 arguments may be valid 
   140 31BD 78							.BYTE NOTE + INSTRUMENT + VOLUME + COMMAND_1 
   141 31BE 46							.BYTE AS5 
   142 31BF 8A							.BYTE $0A + INSTRINIT
   143 31C0 60							.BYTE V6
   144 31C1 00							.BYTE CMD0 
   145 31C2 74							.BYTE $74 
Source: DUMB Module.asm
  1852 31C3				ROW ___ ___ v3
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 31C3 10							.BYTE VOLUME 
    83 31C4 30							.BYTE V3 
Source: DUMB Module.asm
  1853 31C5				ROW REL 
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    67 31C5 40							.BYTE NOTE 
    68 31C6 60							.BYTE REL 
Source: DUMB Module.asm
  1854 31C7				ROW As5 $0A v6
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 31C7 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 31C8 46							.BYTE AS5 
   111 31C9 8A							.BYTE $0A + INSTRINIT
   112 31CA 60							.BYTE V6 
Source: DUMB Module.asm
  1855 31CB				ROW ___ ___ v3
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 31CB 10							.BYTE VOLUME 
    83 31CC 30							.BYTE V3 
Source: DUMB Module.asm
  1856 31CD				ROW REL 
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    67 31CD 40							.BYTE NOTE 
    68 31CE 60							.BYTE REL 
Source: DUMB Module.asm
  1857 31CF				ROW As5 $0A v6
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 31CF 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 31D0 46							.BYTE AS5 
   111 31D1 8A							.BYTE $0A + INSTRINIT
   112 31D2 60							.BYTE V6 
Source: DUMB Module.asm
  1858 31D3				ROW ___ ___ v3
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 31D3 10							.BYTE VOLUME 
    83 31D4 30							.BYTE V3 
Source: DUMB Module.asm
  1859 31D5				ROW F_5 $0A v6 CMD0 $74
Macro: ROW [Source: DUMB Module.inc]
    33 = 0005						argnum = 5	; up to 5 arguments may be valid 
   140 31D5 78							.BYTE NOTE + INSTRUMENT + VOLUME + COMMAND_1 
   141 31D6 41							.BYTE F_5 
   142 31D7 8A							.BYTE $0A + INSTRINIT
   143 31D8 60							.BYTE V6
   144 31D9 00							.BYTE CMD0 
   145 31DA 74							.BYTE $74 
Source: DUMB Module.asm
  1860 31DB				ROW ___ ___ v3
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 31DB 10							.BYTE VOLUME 
    83 31DC 30							.BYTE V3 
Source: DUMB Module.asm
  1861 31DD				ROW REL 
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    67 31DD 40							.BYTE NOTE 
    68 31DE 60							.BYTE REL 
Source: DUMB Module.asm
  1862 31DF				ROW F_5 $0A v6
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 31DF 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 31E0 41							.BYTE F_5 
   111 31E1 8A							.BYTE $0A + INSTRINIT
   112 31E2 60							.BYTE V6 
Source: DUMB Module.asm
  1863 31E3				ROW ___ ___ v3
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 31E3 10							.BYTE VOLUME 
    83 31E4 30							.BYTE V3 
Source: DUMB Module.asm
  1864 31E5				ROW REL 
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    67 31E5 40							.BYTE NOTE 
    68 31E6 60							.BYTE REL 
Source: DUMB Module.asm
  1865 31E7				ROW F_5 $0A v6
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 31E7 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 31E8 41							.BYTE F_5 
   111 31E9 8A							.BYTE $0A + INSTRINIT
   112 31EA 60							.BYTE V6 
Source: DUMB Module.asm
  1866 31EB				ROW ___ ___ v3 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 31EB 10							.BYTE VOLUME 
    83 31EC 30							.BYTE V3 
Source: DUMB Module.asm
  1867 					
  1868 31ED			PTN_34
  1869 31ED				ROW G_5 $0A v6 CMD0 $73
Macro: ROW [Source: DUMB Module.inc]
    33 = 0005						argnum = 5	; up to 5 arguments may be valid 
   140 31ED 78							.BYTE NOTE + INSTRUMENT + VOLUME + COMMAND_1 
   141 31EE 43							.BYTE G_5 
   142 31EF 8A							.BYTE $0A + INSTRINIT
   143 31F0 60							.BYTE V6
   144 31F1 00							.BYTE CMD0 
   145 31F2 73							.BYTE $73 
Source: DUMB Module.asm
  1870 31F3				ROW ___ ___ v3
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 31F3 10							.BYTE VOLUME 
    83 31F4 30							.BYTE V3 
Source: DUMB Module.asm
  1871 31F5				ROW REL 
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    67 31F5 40							.BYTE NOTE 
    68 31F6 60							.BYTE REL 
Source: DUMB Module.asm
  1872 31F7				ROW G_5 $0A v6
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 31F7 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 31F8 43							.BYTE G_5 
   111 31F9 8A							.BYTE $0A + INSTRINIT
   112 31FA 60							.BYTE V6 
Source: DUMB Module.asm
  1873 31FB				ROW ___ ___ v3
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 31FB 10							.BYTE VOLUME 
    83 31FC 30							.BYTE V3 
Source: DUMB Module.asm
  1874 31FD				ROW REL 
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    67 31FD 40							.BYTE NOTE 
    68 31FE 60							.BYTE REL 
Source: DUMB Module.asm
  1875 31FF				ROW G_5 $0A v6
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 31FF 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 3200 43							.BYTE G_5 
   111 3201 8A							.BYTE $0A + INSTRINIT
   112 3202 60							.BYTE V6 
Source: DUMB Module.asm
  1876 3203				ROW ___ ___ v3
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 3203 10							.BYTE VOLUME 
    83 3204 30							.BYTE V3 
Source: DUMB Module.asm
  1877 3205				ROW D_6 $0A v6 CMD0 $73
Macro: ROW [Source: DUMB Module.inc]
    33 = 0005						argnum = 5	; up to 5 arguments may be valid 
   140 3205 78							.BYTE NOTE + INSTRUMENT + VOLUME + COMMAND_1 
   141 3206 4A							.BYTE D_6 
   142 3207 8A							.BYTE $0A + INSTRINIT
   143 3208 60							.BYTE V6
   144 3209 00							.BYTE CMD0 
   145 320A 73							.BYTE $73 
Source: DUMB Module.asm
  1878 320B				ROW ___ ___ v3
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 320B 10							.BYTE VOLUME 
    83 320C 30							.BYTE V3 
Source: DUMB Module.asm
  1879 320D				ROW REL 
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    67 320D 40							.BYTE NOTE 
    68 320E 60							.BYTE REL 
Source: DUMB Module.asm
  1880 320F				ROW D_6 $0A v6
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 320F 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 3210 4A							.BYTE D_6 
   111 3211 8A							.BYTE $0A + INSTRINIT
   112 3212 60							.BYTE V6 
Source: DUMB Module.asm
  1881 3213				ROW ___ ___ v3
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 3213 10							.BYTE VOLUME 
    83 3214 30							.BYTE V3 
Source: DUMB Module.asm
  1882 3215				ROW REL 
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    67 3215 40							.BYTE NOTE 
    68 3216 60							.BYTE REL 
Source: DUMB Module.asm
  1883 3217				ROW D_6 $0A v6
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 3217 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 3218 4A							.BYTE D_6 
   111 3219 8A							.BYTE $0A + INSTRINIT
   112 321A 60							.BYTE V6 
Source: DUMB Module.asm
  1884 321B				ROW ___ ___ v3
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 321B 10							.BYTE VOLUME 
    83 321C 30							.BYTE V3 
Source: DUMB Module.asm
  1885 321D				ROW A_5 $0A v6 CMD0 $73
Macro: ROW [Source: DUMB Module.inc]
    33 = 0005						argnum = 5	; up to 5 arguments may be valid 
   140 321D 78							.BYTE NOTE + INSTRUMENT + VOLUME + COMMAND_1 
   141 321E 45							.BYTE A_5 
   142 321F 8A							.BYTE $0A + INSTRINIT
   143 3220 60							.BYTE V6
   144 3221 00							.BYTE CMD0 
   145 3222 73							.BYTE $73 
Source: DUMB Module.asm
  1886 3223				ROW ___ ___ v3
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 3223 10							.BYTE VOLUME 
    83 3224 30							.BYTE V3 
Source: DUMB Module.asm
  1887 3225				ROW REL 
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    67 3225 40							.BYTE NOTE 
    68 3226 60							.BYTE REL 
Source: DUMB Module.asm
  1888 3227				ROW A_5 $0A v6
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 3227 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 3228 45							.BYTE A_5 
   111 3229 8A							.BYTE $0A + INSTRINIT
   112 322A 60							.BYTE V6 
Source: DUMB Module.asm
  1889 322B				ROW ___ ___ v3
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 322B 10							.BYTE VOLUME 
    83 322C 30							.BYTE V3 
Source: DUMB Module.asm
  1890 322D				ROW REL 
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    67 322D 40							.BYTE NOTE 
    68 322E 60							.BYTE REL 
Source: DUMB Module.asm
  1891 322F				ROW A_5 $0A v6
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 322F 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 3230 45							.BYTE A_5 
   111 3231 8A							.BYTE $0A + INSTRINIT
   112 3232 60							.BYTE V6 
Source: DUMB Module.asm
  1892 3233				ROW ___ ___ v3
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 3233 10							.BYTE VOLUME 
    83 3234 30							.BYTE V3 
Source: DUMB Module.asm
  1893 3235				ROW As5 $0A v6 CMD0 $74
Macro: ROW [Source: DUMB Module.inc]
    33 = 0005						argnum = 5	; up to 5 arguments may be valid 
   140 3235 78							.BYTE NOTE + INSTRUMENT + VOLUME + COMMAND_1 
   141 3236 46							.BYTE AS5 
   142 3237 8A							.BYTE $0A + INSTRINIT
   143 3238 60							.BYTE V6
   144 3239 00							.BYTE CMD0 
   145 323A 74							.BYTE $74 
Source: DUMB Module.asm
  1894 323B				ROW ___ ___ v3
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 323B 10							.BYTE VOLUME 
    83 323C 30							.BYTE V3 
Source: DUMB Module.asm
  1895 323D				ROW REL 
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    67 323D 40							.BYTE NOTE 
    68 323E 60							.BYTE REL 
Source: DUMB Module.asm
  1896 323F				ROW As5 $0A v6
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 323F 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 3240 46							.BYTE AS5 
   111 3241 8A							.BYTE $0A + INSTRINIT
   112 3242 60							.BYTE V6 
Source: DUMB Module.asm
  1897 3243				ROW ___ ___ v3
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 3243 10							.BYTE VOLUME 
    83 3244 30							.BYTE V3 
Source: DUMB Module.asm
  1898 3245				ROW REL 
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    67 3245 40							.BYTE NOTE 
    68 3246 60							.BYTE REL 
Source: DUMB Module.asm
  1899 3247				ROW As5 $0A v6
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 3247 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 3248 46							.BYTE AS5 
   111 3249 8A							.BYTE $0A + INSTRINIT
   112 324A 60							.BYTE V6 
Source: DUMB Module.asm
  1900 324B				ROW ___ ___ v3 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 324B 10							.BYTE VOLUME 
    83 324C 30							.BYTE V3 
Source: DUMB Module.asm
  1901
  1902 324D			PTN_35
  1903 324D				ROW G_5 $0A v6 CMD0 $73
Macro: ROW [Source: DUMB Module.inc]
    33 = 0005						argnum = 5	; up to 5 arguments may be valid 
   140 324D 78							.BYTE NOTE + INSTRUMENT + VOLUME + COMMAND_1 
   141 324E 43							.BYTE G_5 
   142 324F 8A							.BYTE $0A + INSTRINIT
   143 3250 60							.BYTE V6
   144 3251 00							.BYTE CMD0 
   145 3252 73							.BYTE $73 
Source: DUMB Module.asm
  1904 3253				ROW ___ ___ v3
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 3253 10							.BYTE VOLUME 
    83 3254 30							.BYTE V3 
Source: DUMB Module.asm
  1905 3255				ROW REL 
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    67 3255 40							.BYTE NOTE 
    68 3256 60							.BYTE REL 
Source: DUMB Module.asm
  1906 3257				ROW G_5 $0A v6
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 3257 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 3258 43							.BYTE G_5 
   111 3259 8A							.BYTE $0A + INSTRINIT
   112 325A 60							.BYTE V6 
Source: DUMB Module.asm
  1907 325B				ROW ___ ___ v3
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 325B 10							.BYTE VOLUME 
    83 325C 30							.BYTE V3 
Source: DUMB Module.asm
  1908 325D				ROW REL 
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    67 325D 40							.BYTE NOTE 
    68 325E 60							.BYTE REL 
Source: DUMB Module.asm
  1909 325F				ROW G_5 $0A v6
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 325F 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 3260 43							.BYTE G_5 
   111 3261 8A							.BYTE $0A + INSTRINIT
   112 3262 60							.BYTE V6 
Source: DUMB Module.asm
  1910 3263				ROW ___ ___ v3
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 3263 10							.BYTE VOLUME 
    83 3264 30							.BYTE V3 
Source: DUMB Module.asm
  1911 3265				ROW D_6 $0A v6 CMD0 $73
Macro: ROW [Source: DUMB Module.inc]
    33 = 0005						argnum = 5	; up to 5 arguments may be valid 
   140 3265 78							.BYTE NOTE + INSTRUMENT + VOLUME + COMMAND_1 
   141 3266 4A							.BYTE D_6 
   142 3267 8A							.BYTE $0A + INSTRINIT
   143 3268 60							.BYTE V6
   144 3269 00							.BYTE CMD0 
   145 326A 73							.BYTE $73 
Source: DUMB Module.asm
  1912 326B				ROW ___ ___ v3
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 326B 10							.BYTE VOLUME 
    83 326C 30							.BYTE V3 
Source: DUMB Module.asm
  1913 326D				ROW REL 
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    67 326D 40							.BYTE NOTE 
    68 326E 60							.BYTE REL 
Source: DUMB Module.asm
  1914 326F				ROW D_6 $0A v6
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 326F 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 3270 4A							.BYTE D_6 
   111 3271 8A							.BYTE $0A + INSTRINIT
   112 3272 60							.BYTE V6 
Source: DUMB Module.asm
  1915 3273				ROW ___ ___ v3
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 3273 10							.BYTE VOLUME 
    83 3274 30							.BYTE V3 
Source: DUMB Module.asm
  1916 3275				ROW REL 
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    67 3275 40							.BYTE NOTE 
    68 3276 60							.BYTE REL 
Source: DUMB Module.asm
  1917 3277				ROW D_6 $0A v6
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 3277 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 3278 4A							.BYTE D_6 
   111 3279 8A							.BYTE $0A + INSTRINIT
   112 327A 60							.BYTE V6 
Source: DUMB Module.asm
  1918 327B				ROW ___ ___ v3
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 327B 10							.BYTE VOLUME 
    83 327C 30							.BYTE V3 
Source: DUMB Module.asm
  1919 327D				ROW F_6 $0A v6 CMD0 $74
Macro: ROW [Source: DUMB Module.inc]
    33 = 0005						argnum = 5	; up to 5 arguments may be valid 
   140 327D 78							.BYTE NOTE + INSTRUMENT + VOLUME + COMMAND_1 
   141 327E 4D							.BYTE F_6 
   142 327F 8A							.BYTE $0A + INSTRINIT
   143 3280 60							.BYTE V6
   144 3281 00							.BYTE CMD0 
   145 3282 74							.BYTE $74 
Source: DUMB Module.asm
  1920 3283				ROW ___ ___ v3
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 3283 10							.BYTE VOLUME 
    83 3284 30							.BYTE V3 
Source: DUMB Module.asm
  1921 3285				ROW REL 
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    67 3285 40							.BYTE NOTE 
    68 3286 60							.BYTE REL 
Source: DUMB Module.asm
  1922 3287				ROW F_6 $0A v6
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 3287 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 3288 4D							.BYTE F_6 
   111 3289 8A							.BYTE $0A + INSTRINIT
   112 328A 60							.BYTE V6 
Source: DUMB Module.asm
  1923 328B				ROW ___ ___ v3
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 328B 10							.BYTE VOLUME 
    83 328C 30							.BYTE V3 
Source: DUMB Module.asm
  1924 328D				ROW REL 
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    67 328D 40							.BYTE NOTE 
    68 328E 60							.BYTE REL 
Source: DUMB Module.asm
  1925 328F				ROW F_6 $0A v6
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 328F 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 3290 4D							.BYTE F_6 
   111 3291 8A							.BYTE $0A + INSTRINIT
   112 3292 60							.BYTE V6 
Source: DUMB Module.asm
  1926 3293				ROW ___ ___ v3
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 3293 10							.BYTE VOLUME 
    83 3294 30							.BYTE V3 
Source: DUMB Module.asm
  1927 3295				ROW C_6 $0A v6 CMD0 $74
Macro: ROW [Source: DUMB Module.inc]
    33 = 0005						argnum = 5	; up to 5 arguments may be valid 
   140 3295 78							.BYTE NOTE + INSTRUMENT + VOLUME + COMMAND_1 
   141 3296 48							.BYTE C_6 
   142 3297 8A							.BYTE $0A + INSTRINIT
   143 3298 60							.BYTE V6
   144 3299 00							.BYTE CMD0 
   145 329A 74							.BYTE $74 
Source: DUMB Module.asm
  1928 329B				ROW ___ ___ v3
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 329B 10							.BYTE VOLUME 
    83 329C 30							.BYTE V3 
Source: DUMB Module.asm
  1929 329D				ROW REL 
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    67 329D 40							.BYTE NOTE 
    68 329E 60							.BYTE REL 
Source: DUMB Module.asm
  1930 329F				ROW C_6 $0A v6
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 329F 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 32A0 48							.BYTE C_6 
   111 32A1 8A							.BYTE $0A + INSTRINIT
   112 32A2 60							.BYTE V6 
Source: DUMB Module.asm
  1931 32A3				ROW ___ ___ v3
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 32A3 10							.BYTE VOLUME 
    83 32A4 30							.BYTE V3 
Source: DUMB Module.asm
  1932 32A5				ROW REL 
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    67 32A5 40							.BYTE NOTE 
    68 32A6 60							.BYTE REL 
Source: DUMB Module.asm
  1933 32A7				ROW C_6 $0A v6
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
   109 32A7 70							.BYTE NOTE + INSTRUMENT + VOLUME 
   110 32A8 48							.BYTE C_6 
   111 32A9 8A							.BYTE $0A + INSTRINIT
   112 32AA 60							.BYTE V6 
Source: DUMB Module.asm
  1934 32AB				ROW ___ ___ v3 
Macro: ROW [Source: DUMB Module.inc]
    39 = 0003						argnum = 3	; up to 3 arguments may be valid 
    82 32AB 10							.BYTE VOLUME 
    83 32AC 30							.BYTE V3 
Source: DUMB Module.asm
  1935
  1936 32AD			PTN_FF
  1937 32AD				ROW OFF
Macro: ROW [Source: DUMB Module.inc]
    45 = 0001						argnum = 1	; only 1 argument may be valid 
    63 32AD 40							.BYTE NOTE 
    64 32AE FF							.BYTE $FF	; no, this is NOT a PAUSE command! 
Source: DUMB Module.asm
  1938 32AF				END_PATTERN 
Macro: END_PATTERN [Source: DUMB Module.inc]
     2 32AF 00				.BYTE $00			; Pattern End 
Source: DUMB Module.asm
  1939 					
  1940 				;----------------- 
  1941
  1942 				;--------------------------------------------------------------------------------------------------;
  1943
  1944 				;* Instrument Volume Envelope 
  1945
  1946 32B0			pickbass_c_vol
  1947 				.IF (pickbass_c_vol_end - pickbass_c_vol_sustain_start == 0)
  1948 					dta %10000000
  1949 				.ELSE 
  1950 32B0 00				dta %00000000
  1951 				.ENDIF
  1952 32B1 11				dta pickbass_c_vol_sustain_start - pickbass_c_vol 
  1953 32B2 12				dta pickbass_c_vol_release_start - pickbass_c_vol 
  1954 32B3 1A				dta pickbass_c_vol_end - pickbass_c_vol 
  1955 32B4			pickbass_c_vol_start						; Attack/Decay 
  1956 32B4 0F 0F 08 06 06 06 + 	dta $0F,$0F,$08,$06,$06,$06,$05,$05,$04,$04,$04,$03,$03
  1957 32C1			pickbass_c_vol_sustain_start					; Sustain 
  1958 32C1 02				dta $02 
  1959 32C2			pickbass_c_vol_release_start 					; Release 
  1960 32C2 01 01 01 01 01 01 + 	dta $01,$01,$01,$01,$01,$01,$01,$00 
  1961 32CA			pickbass_c_vol_end
  1962
  1963 				;-----------------
  1964
  1965 32CA			pulse_drum_2_vol 
  1966 				.IF (pulse_drum_2_vol_end - pulse_drum_2_vol_sustain_start == 0)
  1967 					dta %10000000
  1968 				.ELSE 
  1969 32CA 00				dta %00000000
  1970 				.ENDIF
  1971 32CB 0F				dta pulse_drum_2_vol_sustain_start - pulse_drum_2_vol 
  1972 32CC 10				dta pulse_drum_2_vol_release_start - pulse_drum_2_vol 
  1973 32CD 10				dta pulse_drum_2_vol_end - pulse_drum_2_vol 
  1974 32CE			pulse_drum_2_vol_start						; Attack/Decay 
  1975 32CE 06 0C 0A 08 06 04 + 	dta $06,$0C,$0A,$08,$06,$04,$03,$03,$02,$02,$02 
  1976 32D9			pulse_drum_2_vol_sustain_start					; Sustain 
  1977 32D9 00				dta $00
  1978 32DA			pulse_drum_2_vol_release_start 					; Release 
  1979 32DA			pulse_drum_2_vol_end
  1980
  1981 				;-----------------
  1982
  1983 32DA			pulse_snare_vol 
  1984 				.IF (pulse_snare_vol_end - pulse_snare_vol_sustain_start == 0)
  1985 					dta %10000000
  1986 				.ELSE 
  1987 32DA 00				dta %00000000
  1988 				.ENDIF
  1989 32DB 19				dta pulse_snare_vol_sustain_start - pulse_snare_vol 
  1990 32DC 1A				dta pulse_snare_vol_release_start - pulse_snare_vol 
  1991 32DD 1A				dta pulse_snare_vol_end - pulse_snare_vol 
  1992 32DE			pulse_snare_vol_start						; Attack/Decay 
  1993 32DE 06 0A 09 08 07 06 + 	dta $06,$0A,$09,$08,$07,$06,$05,$04
  1994 32E6 04 03 03 03 02 02 + 	dta $04,$03,$03,$03,$02,$02,$02,$02
  1995 32EE 01 01 01 01 01		dta $01,$01,$01,$01,$01
  1996 32F3			pulse_snare_vol_sustain_start					; Sustain 
  1997 32F3 00				dta $00
  1998 32F4			pulse_snare_vol_release_start 					; Release 
  1999 32F4			pulse_snare_vol_end
  2000
  2001 				;-----------------
  2002
  2003 32F4			shaker_cut_vol 
  2004 				.IF (shaker_cut_vol_end - shaker_cut_vol_sustain_start == 0)
  2005 					dta %10000000
  2006 				.ELSE 
  2007 32F4 00				dta %00000000
  2008 				.ENDIF
  2009 32F5 06				dta shaker_cut_vol_sustain_start - shaker_cut_vol 
  2010 32F6 07				dta shaker_cut_vol_release_start - shaker_cut_vol 
  2011 32F7 07				dta shaker_cut_vol_end - shaker_cut_vol 
  2012 32F8			shaker_cut_vol_start						; Attack/Decay 
  2013 32F8 0F 05			dta $0F,$05
  2014 32FA			shaker_cut_vol_sustain_start					; Sustain 
  2015 32FA 00				dta $00
  2016 32FB			shaker_cut_vol_release_start 					; Release 
  2017 32FB			shaker_cut_vol_end 
  2018
  2019 				;-----------------
  2020
  2021 32FB			shaker_vol 
  2022 				.IF (shaker_vol_end - shaker_vol_sustain_start == 0)
  2023 					dta %10000000
  2024 				.ELSE 
  2025 32FB 00				dta %00000000
  2026 				.ENDIF
  2027 32FC 0F				dta shaker_vol_sustain_start - shaker_vol 
  2028 32FD 10				dta shaker_vol_release_start - shaker_vol 
  2029 32FE 10				dta shaker_vol_end - shaker_vol 
  2030 32FF			shaker_vol_start						; Attack/Decay 
  2031 32FF 0F 05 08 02 05 04 + 	dta $0F,$05,$08,$02,$05,$04,$02,$04,$03,$01,$01
  2032 330A			shaker_vol_sustain_start					; Sustain 
  2033 330A 00				dta $00
  2034 330B			shaker_vol_release_start 					; Release 
  2035 330B			shaker_vol_end 
  2036
  2037 				;-----------------
  2038
  2039 330B			some_kind_of_flute_no_vib_vol 
  2040 				.IF (some_kind_of_flute_no_vib_vol_end - some_kind_of_flute_no_vib_vol_sustain_start == 0)
  2041 					dta %10000000
  2042 				.ELSE 
  2043 330B 00				dta %00000000
  2044 				.ENDIF
  2045 330C 0A				dta some_kind_of_flute_no_vib_vol_sustain_start - some_kind_of_flute_no_vib_vol 
  2046 330D 0B				dta some_kind_of_flute_no_vib_vol_release_start - some_kind_of_flute_no_vib_vol 
  2047 330E 0B				dta some_kind_of_flute_no_vib_vol_end - some_kind_of_flute_no_vib_vol 
  2048 330F			some_kind_of_flute_no_vib_vol_start						; Attack/Decay 
  2049 330F 02 03 04 05 06 06		dta $02,$03,$04,$05,$06,$06
  2050 3315			some_kind_of_flute_no_vib_vol_sustain_start					; Sustain 
  2051 3315 05				dta $05
  2052 3316			some_kind_of_flute_no_vib_vol_release_start 					; Release 
  2053 3316			some_kind_of_flute_no_vib_vol_end 
  2054
  2055 				;-----------------
  2056
  2057 3316			distortion_a_lead_2_pwm_vol 
  2058 				.IF (distortion_a_lead_2_pwm_vol_end - distortion_a_lead_2_pwm_vol_sustain_start == 0)
  2059 					dta %10000000
  2060 				.ELSE 
  2061 3316 00				dta %00000000
  2062 				.ENDIF
  2063 3317 09				dta distortion_a_lead_2_pwm_vol_sustain_start - distortion_a_lead_2_pwm_vol 
  2064 3318 0A				dta distortion_a_lead_2_pwm_vol_release_start - distortion_a_lead_2_pwm_vol 
  2065 3319 16				dta distortion_a_lead_2_pwm_vol_end - distortion_a_lead_2_pwm_vol 
  2066 331A			distortion_a_lead_2_pwm_vol_start						; Attack/Decay 
  2067 331A 01 03 04 04 04		dta $01,$03,$04,$04,$04 
  2068 331F			distortion_a_lead_2_pwm_vol_sustain_start					; Sustain 
  2069 331F 05				dta $05
  2070 3320			distortion_a_lead_2_pwm_vol_release_start 					; Release 
  2071 3320 04 03 03 02 02 02 + 	dta $04,$03,$03,$02,$02,$02,$02,$01,$01,$01,$01,$00 
  2072 332C			distortion_a_lead_2_pwm_vol_end 
  2073
  2074 				;-----------------
  2075
  2076 332C			distortion_a_bell_64khz_pwm_set_vol 
  2077 				.IF (distortion_a_bell_64khz_pwm_set_vol_end - distortion_a_bell_64khz_pwm_set_vol_sustain_start == 0)
  2078 					dta %10000000
  2079 				.ELSE 
  2080 332C 00				dta %00000000
  2081 				.ENDIF
  2082 332D 0A				dta distortion_a_bell_64khz_pwm_set_vol_sustain_start - distortion_a_bell_64khz_pwm_set_vol 
  2083 332E 0B				dta distortion_a_bell_64khz_pwm_set_vol_release_start - distortion_a_bell_64khz_pwm_set_vol 
  2084 332F 0B				dta distortion_a_bell_64khz_pwm_set_vol_end - distortion_a_bell_64khz_pwm_set_vol 
  2085 3330			distortion_a_bell_64khz_pwm_set_vol_start						; Attack/Decay 
  2086 3330 03 07 06 05 04 04		dta $03,07,06,05,04,04 
  2087 3336			distortion_a_bell_64khz_pwm_set_vol_sustain_start					; Sustain 
  2088 3336 05				dta $05
  2089 3337			distortion_a_bell_64khz_pwm_set_vol_release_start 					; Release 
  2090 3337			distortion_a_bell_64khz_pwm_set_vol_end 
  2091
  2092 				;-----------------
  2093
  2094 				;--------------------------------------------------------------------------------------------------;
  2095
  2096 				;* Instrument Distortion/AUDCTL Table 
  2097 					
  2098 3337			pickbass_c_aud 
  2099 				.IF (pickbass_c_aud_end - pickbass_c_aud_sustain_start == 0)
  2100 					dta %10000000
  2101 				.ELSE 
  2102 3337 00				dta %00000000
  2103 				.ENDIF
  2104 3338 05				dta pickbass_c_aud_sustain_start - pickbass_c_aud 
  2105 3339 06				dta pickbass_c_aud_release_start - pickbass_c_aud 
  2106 333A 06				dta pickbass_c_aud_end - pickbass_c_aud 
  2107 333B			pickbass_c_aud_start						; Attack/Decay 
  2108 333B 40				dta $40 
  2109 333C			pickbass_c_aud_sustain_start					; Sustain 
  2110 333C 0C				dta $0C 
  2111 333D			pickbass_c_aud_release_start 				; Release 
  2112 333D			pickbass_c_aud_end
  2113
  2114 				;-----------------
  2115
  2116 333D			pulse_drum_2_aud 
  2117 				.IF (pulse_drum_2_aud_end - pulse_drum_2_aud_sustain_start == 0)
  2118 					dta %10000000
  2119 				.ELSE 
  2120 333D 00				dta %00000000
  2121 				.ENDIF
  2122 333E 0F				dta pulse_drum_2_aud_sustain_start - pulse_drum_2_aud 
  2123 333F 10				dta pulse_drum_2_aud_release_start - pulse_drum_2_aud 
  2124 3340 10				dta pulse_drum_2_aud_end - pulse_drum_2_aud 
  2125 3341			pulse_drum_2_aud_start						; Attack/Decay 
  2126 3341 08 0A 0A 0A 0A 0C + 	dta $08,$0A,$0A,$0A,$0A,$0C,$0C,$0C,$0C,$0C,$0C
  2127 334C			pulse_drum_2_aud_sustain_start					; Sustain 
  2128 334C 00				dta $00 
  2129 334D			pulse_drum_2_aud_release_start 					; Release 
  2130 334D			pulse_drum_2_aud_end
  2131
  2132 				;-----------------
  2133
  2134 334D			pulse_snare_aud 
  2135 				.IF (pulse_snare_aud_end - pulse_snare_aud_sustain_start == 0)
  2136 					dta %10000000
  2137 				.ELSE 
  2138 334D 00				dta %00000000
  2139 				.ENDIF
  2140 334E 19				dta pulse_snare_aud_sustain_start - pulse_snare_aud 
  2141 334F 1A				dta pulse_snare_aud_release_start - pulse_snare_aud 
  2142 3350 1A				dta pulse_snare_aud_end - pulse_snare_aud 
  2143 3351			pulse_snare_aud_start						; Attack/Decay 
  2144 3351 00 0A 0A 0A 0A 00 + 	dta $00,$0A,$0A,$0A,$0A,$00,$08,$08
  2145 3359 08 08 08 08 08 08 + 	dta $08,$08,$08,$08,$08,$08,$08,$08
  2146 3361 08 08 08 08 08		dta $08,$08,$08,$08,$08 
  2147 3366			pulse_snare_aud_sustain_start					; Sustain 
  2148 3366 00				dta $00 
  2149 3367			pulse_snare_aud_release_start 					; Release 
  2150 3367			pulse_snare_aud_end
  2151
  2152 				;-----------------
  2153
  2154 3367			shaker_cut_aud 
  2155 				.IF (shaker_cut_aud_end - shaker_cut_aud_sustain_start == 0)
  2156 					dta %10000000
  2157 				.ELSE 
  2158 3367 00				dta %00000000
  2159 				.ENDIF
  2160 3368 06				dta shaker_cut_aud_sustain_start - shaker_cut_aud 
  2161 3369 07				dta shaker_cut_aud_release_start - shaker_cut_aud 
  2162 336A 07				dta shaker_cut_aud_end - shaker_cut_aud 
  2163 336B			shaker_cut_aud_start						; Attack/Decay 
  2164 336B 00 0A			dta $00,$0A 
  2165 336D			shaker_cut_aud_sustain_start					; Sustain 
  2166 336D 00				dta $00 
  2167 336E			shaker_cut_aud_release_start 					; Release 
  2168 336E			shaker_cut_aud_end
  2169
  2170 				;-----------------
  2171
  2172 336E			shaker_aud 
  2173 				.IF (shaker_aud_end - shaker_aud_sustain_start == 0)
  2174 					dta %10000000
  2175 				.ELSE 
  2176 336E 00				dta %00000000
  2177 				.ENDIF
  2178 336F 0F				dta shaker_aud_sustain_start - shaker_aud 
  2179 3370 10				dta shaker_aud_release_start - shaker_aud 
  2180 3371 10				dta shaker_aud_end - shaker_aud 
  2181 3372			shaker_aud_start						; Attack/Decay 
  2182 3372 00 0A 08 08 08 08 + 	dta $00,$0A,$08,$08,$08,$08,$08,$08,$08,$08,$08
  2183 337D			shaker_aud_sustain_start					; Sustain 
  2184 337D 00				dta $00 
  2185 337E			shaker_aud_release_start 					; Release 
  2186 337E			shaker_aud_end
  2187
  2188 				;-----------------
  2189
  2190 337E			pickbass_a_aud 
  2191 				.IF (pickbass_a_aud_end - pickbass_a_aud_sustain_start == 0)
  2192 					dta %10000000
  2193 				.ELSE 
  2194 337E 00				dta %00000000
  2195 				.ENDIF
  2196 337F 05				dta pickbass_a_aud_sustain_start - pickbass_a_aud 
  2197 3380 06				dta pickbass_a_aud_release_start - pickbass_a_aud 
  2198 3381 06				dta pickbass_a_aud_end - pickbass_a_aud 
  2199 3382			pickbass_a_aud_start						; Attack/Decay 
  2200 3382 40				dta $40 
  2201 3383			pickbass_a_aud_sustain_start					; Sustain 
  2202 3383 0A				dta $0A 
  2203 3384			pickbass_a_aud_release_start 					; Release 
  2204 3384			pickbass_a_aud_end
  2205
  2206 				;-----------------
  2207
  2208 3384			some_kind_of_flute_no_vib_aud 
  2209 				.IF (some_kind_of_flute_no_vib_aud_end - some_kind_of_flute_no_vib_aud_sustain_start == 0)
  2210 					dta %10000000
  2211 				.ELSE 
  2212 3384 00				dta %00000000
  2213 				.ENDIF
  2214 3385 07				dta some_kind_of_flute_no_vib_aud_sustain_start - some_kind_of_flute_no_vib_aud 
  2215 3386 08				dta some_kind_of_flute_no_vib_aud_release_start - some_kind_of_flute_no_vib_aud 
  2216 3387 08				dta some_kind_of_flute_no_vib_aud_end - some_kind_of_flute_no_vib_aud 
  2217 3388			some_kind_of_flute_no_vib_aud_start						; Attack/Decay 
  2218 3388 40 0A 0A			dta $40,$0A,$0A
  2219 338B			some_kind_of_flute_no_vib_aud_sustain_start					; Sustain 
  2220 338B 42				dta $42 
  2221 338C			some_kind_of_flute_no_vib_aud_release_start 					; Release 
  2222 338C			some_kind_of_flute_no_vib_aud_end
  2223
  2224 				;----------------- 
  2225
  2226 338C			distortion_a_lead_2_pwm_aud 
  2227 				.IF (distortion_a_lead_2_pwm_aud_end - distortion_a_lead_2_pwm_aud_sustain_start == 0)
  2228 					dta %10000000
  2229 				.ELSE 
  2230 338C 00				dta %00000000
  2231 				.ENDIF
  2232 338D 05				dta distortion_a_lead_2_pwm_aud_sustain_start - distortion_a_lead_2_pwm_aud 
  2233 338E 06				dta distortion_a_lead_2_pwm_aud_release_start - distortion_a_lead_2_pwm_aud 
  2234 338F 06				dta distortion_a_lead_2_pwm_aud_end - distortion_a_lead_2_pwm_aud 
  2235 3390			distortion_a_lead_2_pwm_aud_start						; Attack/Decay 
  2236 3390 28				dta $28 
  2237 3391			distortion_a_lead_2_pwm_aud_sustain_start					; Sustain 
  2238 3391 2A				dta $2A
  2239 3392			distortion_a_lead_2_pwm_aud_release_start 					; Release 
  2240 3392			distortion_a_lead_2_pwm_aud_end 
  2241
  2242 				;-----------------
  2243
  2244 3392			distortion_c_179_arp_aud 
  2245 				.IF (distortion_c_179_arp_aud_end - distortion_c_179_arp_aud_sustain_start == 0)
  2246 					dta %10000000
  2247 				.ELSE 
  2248 3392 00				dta %00000000
  2249 				.ENDIF
  2250 3393 05				dta distortion_c_179_arp_aud_sustain_start - distortion_c_179_arp_aud 
  2251 3394 06				dta distortion_c_179_arp_aud_release_start - distortion_c_179_arp_aud 
  2252 3395 06				dta distortion_c_179_arp_aud_end - distortion_c_179_arp_aud 
  2253 3396			distortion_c_179_arp_aud_start						; Attack/Decay 
  2254 3396 48				dta $48 
  2255 3397			distortion_c_179_arp_aud_sustain_start					; Sustain 
  2256 3397 4C				dta $4C
  2257 3398			distortion_c_179_arp_aud_release_start 					; Release 
  2258 3398			distortion_c_179_arp_aud_end 
  2259
  2260 				;-----------------
  2261
  2262 				;--------------------------------------------------------------------------------------------------;
  2263
  2264 				;* Instrument Notes Table 
  2265 					
  2266 3398			some_kind_of_flute_no_vib_notes
  2267 				.IF (some_kind_of_flute_no_vib_notes_end - some_kind_of_flute_no_vib_notes_sustain_start == 0)
  2268 					dta %10000000 + (%00000001 * some_kind_of_flute_no_vib_notes_absolute) 
  2269 				.ELSE 
  2270 3398 00				dta %00000000 + (%00000001 * some_kind_of_flute_no_vib_notes_absolute) 
  2271 				.ENDIF
  2272 3399 06				dta some_kind_of_flute_no_vib_notes_sustain_start - some_kind_of_flute_no_vib_notes
  2273 339A 07				dta some_kind_of_flute_no_vib_notes_release_start - some_kind_of_flute_no_vib_notes
  2274 339B 07				dta some_kind_of_flute_no_vib_notes_end - some_kind_of_flute_no_vib_notes
  2275 339C			some_kind_of_flute_no_vib_notes_start						; Attack/Decay 
  2276 339C 80 01			dta $80,$01
  2277 339E			some_kind_of_flute_no_vib_notes_sustain_start					; Sustain 
  2278 339E 00				dta $00 
  2279 339F			some_kind_of_flute_no_vib_notes_release_start 					; Release 
  2280 339F			some_kind_of_flute_no_vib_notes_end
  2281 = 0000			some_kind_of_flute_no_vib_notes_absolute = 0
  2282 				 
  2283 				;-----------------
  2284
  2285 				;--------------------------------------------------------------------------------------------------;
  2286
  2287 				;* Instrument Freqs Table 
  2288
  2289 339F			pickbass_c_freqs
  2290 				.IF (pickbass_c_freqs_end - pickbass_c_freqs_sustain_start == 0)
  2291 339F 81				dta %10000000 + (%00000001 * pickbass_c_freqs_absolute) 
  2292 				.ELSE 
  2293 					dta %00000000 + (%00000001 * pickbass_c_freqs_absolute) 
  2294 				.ENDIF
  2295 33A0 05				dta pickbass_c_freqs_sustain_start - pickbass_c_freqs 
  2296 33A1 05				dta pickbass_c_freqs_release_start - pickbass_c_freqs 
  2297 33A2 05				dta pickbass_c_freqs_end - pickbass_c_freqs 
  2298 33A3			pickbass_c_freqs_start						; Attack/Decay 
  2299 33A3 00				dta $00 
  2300 33A4			pickbass_c_freqs_sustain_start					; Sustain 
  2301 33A4			pickbass_c_freqs_release_start 					; Release 
  2302 33A4			pickbass_c_freqs_end 
  2303 = 0001			pickbass_c_freqs_absolute = 1
  2304
  2305 				;-----------------
  2306
  2307 33A4			pulse_drum_2_freqs
  2308 				.IF (pulse_drum_2_freqs_end - pulse_drum_2_freqs_sustain_start == 0)
  2309 					dta %10000000 + (%00000001 * pulse_drum_2_freqs_absolute) 
  2310 				.ELSE 
  2311 33A4 01				dta %00000000 + (%00000001 * pulse_drum_2_freqs_absolute) 
  2312 				.ENDIF
  2313 33A5 0F				dta pulse_drum_2_freqs_sustain_start - pulse_drum_2_freqs 
  2314 33A6 10				dta pulse_drum_2_freqs_release_start - pulse_drum_2_freqs 
  2315 33A7 10				dta pulse_drum_2_freqs_end - pulse_drum_2_freqs 
  2316 33A8			pulse_drum_2_freqs_start					; Attack/Decay 
  2317 33A8 00 DF EF F8 FF F2 + 	dta $00,$DF,$EF,$F8,$FF,$F2,$F2,$F2,$FF,$FF,$FF
  2318 33B3			pulse_drum_2_freqs_sustain_start				; Sustain 
  2319 33B3 00				dta $00 
  2320 33B4			pulse_drum_2_freqs_release_start 				; Release 
  2321 33B4			pulse_drum_2_freqs_end 
  2322 = 0001			pulse_drum_2_freqs_absolute = 1
  2323
  2324 				;-----------------
  2325
  2326 33B4			pulse_snare_freqs
  2327 				.IF (pulse_snare_freqs_end - pulse_snare_freqs_sustain_start == 0)
  2328 					dta %10000000 + (%00000001 * pulse_snare_freqs_absolute) 
  2329 				.ELSE 
  2330 33B4 01				dta %00000000 + (%00000001 * pulse_snare_freqs_absolute) 
  2331 				.ENDIF
  2332 33B5 19				dta pulse_snare_freqs_sustain_start - pulse_snare_freqs 
  2333 33B6 1A				dta pulse_snare_freqs_release_start - pulse_snare_freqs 
  2334 33B7 1A				dta pulse_snare_freqs_end - pulse_snare_freqs 
  2335 33B8			pulse_snare_freqs_start						; Attack/Decay 
  2336 33B8 07 88 98 C8 DF 05 + 	dta $07,$88,$98,$C8,$DF,$05,$05,$04
  2337 33C0 04 04 04 04 04 04 + 	dta $04,$04,$04,$04,$04,$04,$04,$04
  2338 33C8 04 04 04 04 04		dta $04,$04,$04,$04,$04 
  2339 33CD			pulse_snare_freqs_sustain_start					; Sustain 
  2340 33CD 00				dta $00 
  2341 33CE			pulse_snare_freqs_release_start 				; Release 
  2342 33CE			pulse_snare_freqs_end 
  2343 = 0001			pulse_snare_freqs_absolute = 1
  2344
  2345 				;-----------------
  2346
  2347 33CE			shaker_cut_freqs
  2348 				.IF (shaker_cut_freqs_end - shaker_cut_freqs_sustain_start == 0)
  2349 					dta %10000000 + (%00000001 * shaker_cut_freqs_absolute) 
  2350 				.ELSE 
  2351 33CE 01				dta %00000000 + (%00000001 * shaker_cut_freqs_absolute) 
  2352 				.ENDIF
  2353 33CF 06				dta shaker_cut_freqs_sustain_start - shaker_cut_freqs 
  2354 33D0 07				dta shaker_cut_freqs_release_start - shaker_cut_freqs 
  2355 33D1 07				dta shaker_cut_freqs_end - shaker_cut_freqs 
  2356 33D2			shaker_cut_freqs_start					; Attack/Decay 
  2357 33D2 00 02			dta $00,$02 
  2358 33D4			shaker_cut_freqs_sustain_start				; Sustain 
  2359 33D4 00				dta $00 
  2360 33D5			shaker_cut_freqs_release_start 				; Release 
  2361 33D5			shaker_cut_freqs_end 
  2362 = 0001			shaker_cut_freqs_absolute = 1
  2363
  2364 				;-----------------
  2365
  2366 33D5			shaker_freqs
  2367 				.IF (shaker_freqs_end - shaker_freqs_sustain_start == 0)
  2368 					dta %10000000 + (%00000001 * shaker_freqs_absolute) 
  2369 				.ELSE 
  2370 33D5 01				dta %00000000 + (%00000001 * shaker_freqs_absolute) 
  2371 				.ENDIF
  2372 33D6 0F				dta shaker_freqs_sustain_start - shaker_freqs 
  2373 33D7 10				dta shaker_freqs_release_start - shaker_freqs 
  2374 33D8 10				dta shaker_freqs_end - shaker_freqs 
  2375 33D9			shaker_freqs_start					; Attack/Decay 
  2376 33D9 00 02 01 01 04 01 + 	dta $00,$02,$01,$01,$04,$01,$01,$04,$01,$01,$04 
  2377 33E4			shaker_freqs_sustain_start				; Sustain 
  2378 33E4 00				dta $00 
  2379 33E5			shaker_freqs_release_start 				; Release 
  2380 33E5			shaker_freqs_end 
  2381 = 0001			shaker_freqs_absolute = 1
  2382
  2383 				;-----------------
  2384
  2385 33E5			some_kind_of_flute_no_vib_freqs
  2386 				.IF (some_kind_of_flute_no_vib_freqs_end - some_kind_of_flute_no_vib_freqs_sustain_start == 0)
  2387 					dta %10000000 + (%00000001 * some_kind_of_flute_no_vib_freqs_absolute) 
  2388 				.ELSE 
  2389 33E5 00				dta %00000000 + (%00000001 * some_kind_of_flute_no_vib_freqs_absolute) 
  2390 				.ENDIF
  2391 33E6 07				dta some_kind_of_flute_no_vib_freqs_sustain_start - some_kind_of_flute_no_vib_freqs
  2392 33E7 08				dta some_kind_of_flute_no_vib_freqs_release_start - some_kind_of_flute_no_vib_freqs
  2393 33E8 08				dta some_kind_of_flute_no_vib_freqs_end - some_kind_of_flute_no_vib_freqs
  2394 33E9			some_kind_of_flute_no_vib_freqs_start						; Attack/Decay 
  2395 33E9 70 00 01			dta $70,$00,$01
  2396 33EC			some_kind_of_flute_no_vib_freqs_sustain_start					; Sustain 
  2397 33EC 00				dta $00 
  2398 33ED			some_kind_of_flute_no_vib_freqs_release_start 					; Release 
  2399 33ED			some_kind_of_flute_no_vib_freqs_end
  2400 = 0000			some_kind_of_flute_no_vib_freqs_absolute = 0
  2401 				 
  2402 				;-----------------
  2403
  2404 				;--------------------------------------------------------------------------------------------------;
  2405
  2406 				;* Instrument Command Table 
  2407 					
  2408 33ED			pickbass_c_cmd
  2409 				.IF (pickbass_c_cmd_end - pickbass_c_cmd_sustain_start == 0)
  2410 33ED 80				dta %10000000
  2411 				.ELSE 
  2412 					dta %00000000
  2413 				.ENDIF
  2414 33EE 06				dta pickbass_c_cmd_sustain_start - pickbass_c_cmd 
  2415 33EF 06				dta pickbass_c_cmd_release_start - pickbass_c_cmd 
  2416 33F0 06				dta pickbass_c_cmd_end - pickbass_c_cmd 
  2417 33F1			pickbass_c_cmd_start							; Attack/Decay 
  2418 33F1 80 00			dta $80,$00
  2419 33F3			pickbass_c_cmd_sustain_start						; Sustain 
  2420 33F3			pickbass_c_cmd_release_start 						; Release 
  2421 33F3			pickbass_c_cmd_end
  2422
  2423 				;-----------------
  2424
  2425 33F3			some_kind_of_flute_no_vib_cmd
  2426 				.IF (some_kind_of_flute_no_vib_cmd_end - some_kind_of_flute_no_vib_cmd_sustain_start == 0)
  2427 33F3 80				dta %10000000 
  2428 				.ELSE 
  2429 					dta %00000000 
  2430 				.ENDIF
  2431 33F4 0A				dta some_kind_of_flute_no_vib_cmd_sustain_start - some_kind_of_flute_no_vib_cmd
  2432 33F5 0A				dta some_kind_of_flute_no_vib_cmd_release_start - some_kind_of_flute_no_vib_cmd
  2433 33F6 0A				dta some_kind_of_flute_no_vib_cmd_end - some_kind_of_flute_no_vib_cmd
  2434 33F7			some_kind_of_flute_no_vib_cmd_start						; Attack/Decay 
  2435 33F7 80 00			dta $80,$00
  2436 33F9 00 01			dta $00,$01
  2437 33FB 02 01			dta $02,$01
  2438 33FD			some_kind_of_flute_no_vib_cmd_sustain_start					; Sustain 
  2439 33FD			some_kind_of_flute_no_vib_cmd_release_start 					; Release 
  2440 33FD			some_kind_of_flute_no_vib_cmd_end 
  2441 				 
  2442 				;----------------- 
  2443
  2444 33FD			distortion_a_lead_2_pwm_cmd 
  2445 				.IF (distortion_a_lead_2_pwm_cmd_end - distortion_a_lead_2_pwm_cmd_sustain_start == 0)
  2446 33FD 80				dta %10000000
  2447 				.ELSE 
  2448 					dta %00000000
  2449 				.ENDIF
  2450 33FE 08				dta distortion_a_lead_2_pwm_cmd_sustain_start - distortion_a_lead_2_pwm_cmd 
  2451 33FF 08				dta distortion_a_lead_2_pwm_cmd_release_start - distortion_a_lead_2_pwm_cmd 
  2452 3400 08				dta distortion_a_lead_2_pwm_cmd_end - distortion_a_lead_2_pwm_cmd 
  2453 3401			distortion_a_lead_2_pwm_cmd_start						; Attack/Decay 
  2454 3401 80 00			dta $80,$00 
  2455 3403 02 FD			dta $02,$FD 
  2456 3405			distortion_a_lead_2_pwm_cmd_sustain_start					; Sustain 
  2457 3405			distortion_a_lead_2_pwm_cmd_release_start 					; Release 
  2458 3405			distortion_a_lead_2_pwm_cmd_end 
  2459
  2460 				;-----------------
  2461
  2462 3405			distortion_a_lead_2_pwm_set_cmd 
  2463 				.IF (distortion_a_lead_2_pwm_set_cmd_end - distortion_a_lead_2_pwm_set_cmd_sustain_start == 0)
  2464 					dta %10000000
  2465 				.ELSE 
  2466 3405 00				dta %00000000
  2467 				.ENDIF
  2468 3406 06				dta distortion_a_lead_2_pwm_set_cmd_sustain_start - distortion_a_lead_2_pwm_set_cmd 
  2469 3407 24				dta distortion_a_lead_2_pwm_set_cmd_release_start - distortion_a_lead_2_pwm_set_cmd 
  2470 3408 24				dta distortion_a_lead_2_pwm_set_cmd_end - distortion_a_lead_2_pwm_set_cmd 
  2471 3409			distortion_a_lead_2_pwm_set_cmd_start						; Attack/Decay 
  2472 3409 80 00			dta $80,$00  
  2473 340B			distortion_a_lead_2_pwm_set_cmd_sustain_start					; Sustain 
  2474 340B 02 01			dta $02,$01
  2475 340D 02 00			dta $02,$00
  2476 340F 02 00			dta $02,$00
  2477 3411 02 00			dta $02,$00
  2478 3413 02 00			dta $02,$00
  2479 3415 02 00			dta $02,$00
  2480 3417 02 00			dta $02,$00
  2481 3419 02 00			dta $02,$00
  2482 341B 02 00			dta $02,$00
  2483 341D 02 00			dta $02,$00
  2484 341F 02 00			dta $02,$00
  2485 3421 02 00			dta $02,$00
  2486 3423 02 00			dta $02,$00
  2487 3425 02 00			dta $02,$00
  2488 3427 02 00			dta $02,$00
  2489 3429			distortion_a_lead_2_pwm_set_cmd_release_start 					; Release 
  2490 3429			distortion_a_lead_2_pwm_set_cmd_end 
  2491
  2492 				;-----------------
  2493
  2494 3429			distortion_a_bell_64khz_pwm_set_cmd 
  2495 				.IF (distortion_a_bell_64khz_pwm_set_cmd_end - distortion_a_bell_64khz_pwm_set_cmd_sustain_start == 0)
  2496 3429 80				dta %10000000
  2497 				.ELSE 
  2498 					dta %00000000
  2499 				.ENDIF
  2500 342A 10				dta distortion_a_bell_64khz_pwm_set_cmd_sustain_start - distortion_a_bell_64khz_pwm_set_cmd 
  2501 342B 10				dta distortion_a_bell_64khz_pwm_set_cmd_release_start - distortion_a_bell_64khz_pwm_set_cmd 
  2502 342C 10				dta distortion_a_bell_64khz_pwm_set_cmd_end - distortion_a_bell_64khz_pwm_set_cmd 
  2503 342D			distortion_a_bell_64khz_pwm_set_cmd_start						; Attack/Decay 
  2504 342D 80 00			dta $80,$00 
  2505 342F 02 FF			dta $02,$FF 
  2506 3431 00 00			dta $00,$00
  2507 3433 00 00			dta $00,$00
  2508 3435 00 0C			dta $00,$0C
  2509 3437 00 0C			dta $00,$0C
  2510 3439			distortion_a_bell_64khz_pwm_set_cmd_sustain_start					; Sustain 
  2511 3439			distortion_a_bell_64khz_pwm_set_cmd_release_start 					; Release 
  2512 3439			distortion_a_bell_64khz_pwm_set_cmd_end 
  2513
  2514 				;-----------------
  2515
  2516 				;--------------------------------------------------------------------------------------------------;
  2517
  2518 				;--------------------------------------------------------------------------------------------------;
  2519 				;* No extra Module data exists past this point, unless it is specified otherwise... 
  2520 				;--------------------------------------------------------------------------------------------------;
  2521
  2522 3439			ENDFILE 
  2523
  2524 				;* That's all folks :D 
  2525
  2526 				;----------------- 
  2527
  2528 				;--------------------------------------------------------------------------------------------------;
  2529
   528 3439			MODULE_END 
   529 					
   530 				;--------------------------------------------------------------------------------------------------;
   531
   532 				; that's all :D 
   533
